import { ProgramMetadata } from '@gear-js/api'
import { assertNotNull } from '@subsquid/substrate-processor'
import { Store } from '@subsquid/typeorm-store'

import { Character } from '../model'
import { UserMessage } from '../types/v1000'

const mintMeta = ProgramMetadata.from('0002000100000000000106000000010e0000000111000000000000000113000000311b5c00081c6d696e745f696f18436f6e666967000020012c6c697665735f636f756e7404010875380001686761735f666f725f6461696c795f646973747269627574696f6e08010c7536340001486d696e696d756d5f6761735f616d6f756e7408010c7536340001647570646174655f696e74657276616c5f696e5f626c6f636b730c010c7533320001487265736572766174696f6e5f616d6f756e7408010c7536340001507265736572766174696f6e5f6475726174696f6e0c010c7533320001246d696e745f636f73741001304f7074696f6e3c753132383e000140676f6c645f706f6f6c5f616d6f756e741401107531323800000400000503000800000506000c00000505001004184f7074696f6e04045401140108104e6f6e6500000010536f6d65040014000001000014000005070018081c6d696e745f696f284d696e74416374696f6e00012c2041646441646d696e04011461646d696e1c011c4163746f7249640000002c52656d6f766541646d696e04011461646d696e1c011c4163746f7249640001003c4372656174654368617261637465720c011c636f64655f6964240118436f646549640001106e616d65280118537472696e67000128617474726962757465732c0144496e697469616c4174747269627574657300020034436861726163746572496e666f0401206f776e65725f69641c011c4163746f72496400030030426174746c65526573756c740801206f776e65725f69641c011c4163746f7249640001186c6f736572733001305665633c4163746f7249643e000400205365744172656e610401206172656e615f69641c011c4163746f7249640005001c4c6576656c55700401106174747234013c41747472696275746543686f6963650006003c4d616b655265736572766174696f6e0007006853746172744461696c79476f6c64446973747269627574696f6e0008004c446973747269627574654461696c79506f6f6c0009006453746f704461696c79476f6c64446973747269627574696f6e000a00001c10106773746418636f6d6d6f6e287072696d6974697665731c4163746f724964000004002001205b75383b2033325d0000200000032000000004002410106773746418636f6d6d6f6e287072696d69746976657318436f64654964000004002001205b75383b2033325d00002800000502002c081c6d696e745f696f44496e697469616c417474726962757465730000140120737472656e677468040108753800011c6167696c6974790401087538000120766974616c697479040108753800011c7374616d696e610401087538000130696e74656c6c6967656e636504010875380000300000021c0034081c6d696e745f696f3c41747472696275746543686f69636500011420537472656e6774680000001c4167696c69747900010020566974616c6974790002001c5374616d696e6100030030496e74656c6c6967656e63650004000038081c6d696e745f696f244d696e744576656e7400011040436861726163746572437265617465640401386368617261637465725f696e666f3c0134436861726163746572496e666f00000034436861726163746572446965640401306368617261637465725f69641c011c4163746f7249640001002c5870496e637265617365640801306368617261637465725f69641c011c4163746f72496400010878700c010c753332000200304c6576656c557064617465640801306368617261637465725f69641c011c4163746f7249640001106174747234013c41747472696275746543686f696365000300003c081c6d696e745f696f34436861726163746572496e666f000014010869641c011c4163746f7249640001106e616d65280118537472696e670001286174747269627574657340014c436861726163746572417474726962757465730001146c6576656c0401087538000128657870657269656e63650c010c753332000040081c6d696e745f696f4c436861726163746572417474726962757465730000200120737472656e677468040108753800011c6167696c6974790401087538000120766974616c697479040108753800011c7374616d696e610401087538000130696e74656c6c6967656e6365040108753800012c6c697665735f636f756e74040108753800012c746965725f726174696e671401107531323800011c62616c616e636514011075313238000044000004084848004800000400004c081c6d696e745f696f244d696e74537461746500000401286368617261637465727350018042547265654d61703c4163746f7249642c20436861726163746572496e666f3e000050042042547265654d617008044b011c0456013c0004005400000054000002580058000004081c3c00')

export async function handleMintMessage(
    message: UserMessage,
    store: Store,
    characters: Map<string, Character>,
) {
    let data = mintMeta.createType(assertNotNull(mintMeta.types.handle.output), message.payload).toJSON() as any
    if (data.characterCreated) {
        let info = data.characterCreated.characterInfo
        let character = new Character({
            ...info,
            owner: message.destination
        })
        characters.set(character.id, character)
    } else if (data.xpUpdated) {
        let character = characters.get(data.xpUpdated.characterId)
        if (character == null) {
            character = await store.findOneOrFail(Character, { where: { id: data.xpUpdated.characterId } })
            characters.set(character.id, character)
        }
        character.experience = data.xpUpdated.xp
    } else if (data.livesCountUpdated) {
        let character = characters.get(data.livesCountUpdated.characterId)
        if (character == null) {
            character = await store.findOneOrFail(Character, { where: { id: data.livesCountUpdated.characterId } })
            characters.set(character.id, character)
        }
        character.livesCount = data.livesCountUpdated.count
    } else if (data.ratingUpdated) {
        let character = characters.get(data.ratingUpdated.characterId)
        if (character == null) {
            character = await store.findOneOrFail(Character, { where: { id: data.ratingUpdated.characterId } })
            characters.set(character.id, character)
        }
        character.rating = data.ratingUpdated.rating
    } else if (data.levelUpdated) {
        if (!['strength', 'agility', 'vitality', 'stamina', 'intelligence'].includes(data.levelUpdated.attr)) {
            console.log(data.levelUpdated.attr)
            throw new Error('unknown attr')
        }

        let character = characters.get(data.levelUpdated.characterId)
        if (character == null) {
            character = await store.findOneOrFail(Character, { where: { id: data.levelUpdated.characterId } })
            characters.set(character.id, character)
        }
        let attributes = JSON.parse(character.attributes as any)
        attributes[data.levelUpdated.attr] += 1
        character.attributes = JSON.stringify(attributes)
    } else {
        console.log(data);
        throw new Error('event is not supported')
    }
}
