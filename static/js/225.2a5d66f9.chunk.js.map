{"version":3,"file":"static/js/225.2a5d66f9.chunk.js","mappings":"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","sources":["components/Table/styles.ts","components/Table/constants.ts","components/Table/hook/useGetRowItems.tsx","components/Table/TableUI.tsx","components/Table/hook/useSortRows.ts","components/Table/hook/useClickSort.ts","pages/Leaderboard/Leaderboard.tsx","pages/MintCharacter/hooks/useWasmMetadata.ts"],"sourcesContent":["import styled, { css } from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  box-sizing: border-box;\n  border-left: 2px solid white;\n  border-right: 2px solid white;\n  border-bottom: 2px solid white;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n\n  overflow: hidden;\n`;\n\nconst Column = styled.div<{ position?: \"left\" | \"right\" | \"center\" }>`\n  display: flex;\n  align-items: center;\n  height: 16px;\n  gap: 4px;\n  ${({ position }) => css`\n    justify-content: ${position};\n  `}\n`;\n\nconst ColumnText = styled.p<{\n  active: boolean;\n  sortable: boolean;\n  isLeftPadded?: boolean;\n}>`\n  color: white;\n  font-size: 12px;\n  font-weight: ${({ active }) => (active ? \"bold\" : \"normal\")};\n  padding-left: ${({ isLeftPadded }) => (isLeftPadded ? \"1.5rem\" : \"\")};\n`;\n\n// const ColumnIcon = styled.div<{ active: boolean; sortType: SortType }>`\n//   height: 16px;\n//   width: 16px;\n//   visibility: ${({ active }) => (active ? 'visible' : 'hidden')};\n//   ${({ sortType }) => {\n//     if (sortType === SortType.ascending) {\n//       return css`\n//         transform: rotate(180deg);\n//       `;\n//     }\n//   }}\n// `;\n\nconst Columns = styled.div`\n  display: flex;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.7);\n  height: 40px;\n`;\n\nconst Rows = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Row = styled.div`\n  height: 72px;\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  color: white;\n  background: rgba(0, 0, 0, 0.7);\n  border-top: 1px solid white;\n\n  position: relative;\n\n  &:last-child {\n    border-bottom-left-radius: 12px;\n    border-bottom-right-radius: 12px;\n  }\n`;\n\nconst Cell = styled.div<{\n  position?: \"center\" | \"left\" | \"right\";\n  ableClick?: boolean;\n}>`\n  display: flex;\n  ${({ position }) => css`\n    justify-content: ${position};\n  `}\n\n  cursor: ${({ ableClick }) => {\n    return ableClick ? \"pointer\" : \"default\";\n  }};\n`;\n\nexport const Styled = {\n  Container,\n  Columns,\n  Column,\n  // ColumnIcon,\n  ColumnText,\n  Row,\n  Rows,\n  Cell,\n};\n","export enum SortType {\n    ascending = 'ascending',\n    descending = 'descending',\n    default = 'default'\n}","import { ReactNode, useMemo } from \"react\";\nimport { TableColumnsType } from \"../types\";\nimport { Styled } from \"../styles\";\n\nexport const useGetRowItems = ({\n  columns,\n  rows,\n  cellClick,\n}: {\n  columns: TableColumnsType[];\n  rows: object[];\n  cellClick?: (arg: object) => void;\n}) => {\n  return useMemo((): ReactNode => {\n    return rows.map((row, i) => {\n      const items = columns.reduce<ReactNode[]>((acc, cur, i) => {\n        const item = (\n          <Styled.Cell\n            position={cur.position}\n            key={i}\n            style={{ width: cur.width }}\n            ableClick={!!cellClick}\n          >\n            <div onClick={() => cellClick?.(row)}>{row[cur.field]}</div>\n          </Styled.Cell>\n        );\n\n        return [...acc, item];\n      }, []);\n      return <Styled.Row key={i}>{items}</Styled.Row>;\n    });\n  }, [cellClick, columns, rows]);\n};\n","import React, { FC, useState } from \"react\";\nimport { Styled } from \"./styles\";\nimport { TableColumnsType } from \"./types\";\nimport { SortType } from \"./constants\";\nimport { useSortRows } from \"./hook/useSortRows\";\nimport { useGetRowItems } from \"./hook/useGetRowItems\";\nimport { useClickSort } from \"./hook/useClickSort\";\n\nexport type TableUIProps = {\n  columns: TableColumnsType[];\n  rows: object[];\n  cellClick?: (arg?: object) => void;\n};\n\nexport const TableUI: FC<TableUIProps> = ({ columns, rows, cellClick }) => {\n  const [sortedColumn, setSortedColumn] = useState<{\n    field: string | undefined;\n    sortName?: boolean;\n    sortType: SortType;\n  }>({ field: undefined, sortType: SortType.default });\n\n  const sortedRows = useSortRows({ rows, sortedColumn });\n  const RowItems = useGetRowItems({ columns, rows: sortedRows, cellClick });\n  const onClickSort = useClickSort(setSortedColumn);\n\n  return (\n    <Styled.Container>\n      <Styled.Columns>\n        {columns.map((column, index) => (\n          <Styled.Column\n            position={column.position}\n            key={column.field}\n            style={{ width: column.width }}\n            onClick={onClickSort(column)}\n          >\n            <Styled.ColumnText\n              active={\n                sortedColumn.sortType !== SortType.default &&\n                sortedColumn.field === column.field\n              }\n              sortable={column.sortable ?? false}\n              isLeftPadded={index === 0}\n            >\n              {column.headerName}\n            </Styled.ColumnText>\n            {/* {column.sortable && (\n              <Styled.ColumnIcon\n                active={\n                  sortedColumn.sortType !== SortType.default &&\n                  sortedColumn.field === column.field\n                }\n                sortType={sortedColumn.sortType}\n              >\n                <IconUI iconName={IconName.ArrowDown} />\n              </Styled.ColumnIcon>\n            )} */}\n          </Styled.Column>\n        ))}\n      </Styled.Columns>\n      <Styled.Rows>{RowItems}</Styled.Rows>\n    </Styled.Container>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { SortType } from \"../constants\";\n\ntype UseSortRowsType = (props: {\n  sortedColumn: {\n    field: string | undefined;\n    sortType: SortType;\n    sortName?: boolean;\n  };\n  rows: object[];\n}) => object[];\n\nexport const useSortRows: UseSortRowsType = ({ sortedColumn, rows }) => {\n  const [sortedRows, setSortedRows] = useState(rows);\n\n  useEffect(() => {\n    const cpRows = [...rows];\n    const { field, sortName } = sortedColumn;\n\n    if (field) {\n      if (sortedColumn.sortType === SortType.ascending) {\n        cpRows.sort((a, b) => {\n          const name = sortName ? \"sortName\" : field;\n          const cpA = a[name].toUpperCase();\n          const cpB = b[name].toUpperCase();\n\n          if (cpA > cpB) {\n            return 1;\n          }\n          if (cpB > cpA) {\n            return -1;\n          }\n          return 0;\n        });\n      }\n      if (sortedColumn.sortType === SortType.descending) {\n        cpRows.sort((a, b) => {\n          const name = sortName ? \"sortName\" : field;\n          const cpA = a[name].toUpperCase();\n          const cpB = b[name].toUpperCase();\n\n          if (cpA > cpB) {\n            return -1;\n          }\n          if (cpB > cpA) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n    setSortedRows(cpRows);\n  }, [rows, sortedColumn]);\n\n  return sortedRows;\n};\n","import { Dispatch, SetStateAction, useCallback } from 'react';\nimport { SortType } from '../constants';\nimport { TableColumnsType } from '../types';\n\ntype UseClickSortType = (\n  setSortedColumn: Dispatch<\n    SetStateAction<{\n      field: string | undefined;\n      sortType: SortType;\n      sortName?: boolean;\n    }>\n  >\n) => (column: TableColumnsType) => VoidFunction;\n\nexport const useClickSort: UseClickSortType = (setSortedColumn) => {\n  return useCallback(\n    (column) => {\n      return () => {\n        const { field, sortable, sortName } = column;\n        setSortedColumn((prev) => {\n          if (!sortable) {\n            return prev;\n          }\n\n          if (prev.field === field) {\n            let sortType =\n              prev.sortType === SortType.ascending\n                ? SortType.descending\n                : prev.sortType === SortType.descending\n                ? SortType.default\n                : SortType.ascending;\n            return { field, sortType, sortName };\n          }\n          return { field, sortType: SortType.ascending, sortName };\n        });\n      };\n    },\n    [setSortedColumn]\n  );\n};\n","import { useCallback, useMemo } from \"react\";\nimport \"./styles.scss\";\nimport { TableUI } from \"components/Table\";\nimport { TableColumnsType } from \"components/Table/types\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAccount, useReadWasmState } from \"@gear-js/react-hooks\";\nimport { ARENA_PROGRAM_ID, ARENA_METADATA } from \"consts\";\nimport arenaMetaWasm from \"../../assets/arena.opt.wasm\";\nimport { useWasmMetadata } from \"../MintCharacter/hooks/useWasmMetadata\";\nimport { ProgramMetadata } from \"@gear-js/api\";\n\nexport type LeaderboardProps = {};\n\nconst inProgressColumns: TableColumnsType[] = [\n  {\n    field: \"ownerId\",\n    headerName: \"Owner Id\",\n    width: 645,\n    position: \"center\",\n  },\n  {\n    field: \"nw\",\n    headerName: \"number of wins\",\n    width: 120,\n    position: \"center\",\n  },\n];\n\nexport const Leaderboard = () => {\n  const navigate = useNavigate();\n  const { account } = useAccount();\n  const { buffer } = useWasmMetadata(arenaMetaWasm);\n  const meta = ProgramMetadata.from(ARENA_METADATA);\n\n  const metaWasmData: MetaWasmDataType = useMemo(\n    () => ({\n      programId: ARENA_PROGRAM_ID,\n      programMetadata: meta,\n      wasm: buffer,\n      functionName: \"leaderboard\",\n      argument: account?.decodedAddress,\n    }),\n    [buffer, account?.decodedAddress, meta]\n  );\n\n  const leaderBoard = useReadWasmState(metaWasmData).state;\n  const inProgressRows = useMemo(() => {\n    if (leaderBoard) {\n      return Object.keys(leaderBoard)\n        .map((key) => ({\n          ownerId: <p className=\"row_ownerId\">🔗 {key}</p>,\n          nw: leaderBoard[key],\n        }))\n        .sort((row1, row2) => Number(row2.nw) - Number(row1.nw));\n    }\n\n    return [];\n  }, [leaderBoard]);\n\n  const handleClickCell = useCallback(\n    (arg) => {\n      navigate(`/profile/${arg.ownerId.props.children[1]}`);\n    },\n    [navigate]\n  );\n\n  // console.log(\"leaderBoard\", users);\n\n  return (\n    <div className=\"leaderboard\">\n      <div className=\"modal_leaderboard\">\n        <div className=\"header\">Leaderboard</div>\n        <div className={\"scroll_container\"}>\n          <div className=\"modal_table\">\n            <TableUI\n              rows={inProgressRows}\n              columns={inProgressColumns}\n              cellClick={handleClickCell}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useAlert } from \"@gear-js/react-hooks\";\nimport { useEffect, useState } from \"react\";\n\nexport const useWasmMetadata = (source: RequestInfo | URL) => {\n  const alert = useAlert();\n  const [data, setData] = useState<Buffer>();\n\n  useEffect(() => {\n    if (source) {\n      fetch(source)\n        .then((response) => response.arrayBuffer())\n        .then((array) => Buffer.from(array))\n        .then((buffer) => setData(buffer))\n        .catch(({ message }: Error) => alert.error(`Fetch error: ${message}`));\n    }\n  }, [alert, source]);\n\n  return { buffer: data };\n};\n"],"names":["Container","styled","div","Column","_ref","position","css","ColumnText","p","_ref2","active","_ref3","isLeftPadded","Columns","Rows","Styled","Row","Cell","_ref4","_ref5","ableClick","SortType","TableUI","columns","rows","cellClick","sortedColumn","setSortedColumn","useState","field","undefined","sortType","default","sortedRows","setSortedRows","useEffect","cpRows","sortName","ascending","sort","a","b","name","cpA","toUpperCase","cpB","descending","useSortRows","RowItems","useMemo","map","row","i","items","reduce","acc","cur","_jsx","style","width","children","onClick","useGetRowItems","onClickSort","useCallback","column","sortable","prev","useClickSort","_jsxs","index","_column$sortable","headerName","inProgressColumns","Leaderboard","navigate","useNavigate","account","useAccount","buffer","useWasmMetadata","arenaMetaWasm","meta","ProgramMetadata","from","ARENA_METADATA","metaWasmData","programId","ARENA_PROGRAM_ID","programMetadata","wasm","functionName","argument","decodedAddress","leaderBoard","useReadWasmState","state","inProgressRows","Object","keys","key","ownerId","className","nw","row1","row2","Number","handleClickCell","arg","props","source","alert","useAlert","data","setData","fetch","then","response","arrayBuffer","array","Buffer","catch","message","error"],"sourceRoot":""}