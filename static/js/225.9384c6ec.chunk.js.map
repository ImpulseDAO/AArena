{"version":3,"file":"static/js/225.9384c6ec.chunk.js","mappings":"4KASmCA,EAAAA,EAAAA,GAAuB,iJAA1D,MAeMC,GAAiCD,EAAAA,EAAAA,GAAuB,yMAajDE,EAA4BA,KACvC,MAAMC,GAAaC,EAAAA,EAAAA,GAAqBH,GAExCI,EAAAA,EAAYC,kBAAkB,CAAEC,SAAU,CAACJ,IAAc,EAG9CK,EAAkBC,IAAyC,IAAxC,SAAEC,GAAgCD,EAChE,OAAOE,EAAAA,EAAAA,GAAWV,EAAgC,CAChDS,YACA,EAGSE,EAAiBA,KAAO,IAADC,EAClC,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,MACdC,EAAcR,EAAgB,CAClCE,SAAiC,QAAzBG,EAAS,OAAPC,QAAO,IAAPA,OAAO,EAAPA,EAASG,sBAAc,IAAAJ,EAAAA,EAAI,KAGjCK,EAAeF,EAAYG,KAEjC,MAAO,IACFH,EACHG,KAAkB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcE,YACN,OAAZF,QAAY,IAAZA,OAAY,EAAZA,EAAcE,WAAWC,QAAS,GAErC,GAGgCrB,EAAAA,EAAAA,GAAuB,8L,wHCvDnD,MAAMsB,GAAeC,EAAAA,EAAAA,GAQ1B,CACAC,IAAK,CChB6BC,GAC1BC,IACN,MAAM,IAAEC,IAAQC,EAAAA,EAAAA,MAEhB,OAAOH,EAAa,IACfC,EACHG,KAAM,IACDH,EAAQG,KACXF,QAEF,GDOJpB,SAAU,CAAC,oBACXuB,QAASC,MAAAtB,EAAgCuB,KAAa,IAADC,EAAA,IAArC,UAAEC,EAAS,SAAEC,GAAU1B,EACrC,MAAM2B,EAAeC,EAAAA,GAAgBC,KAAKH,GACpCR,EAAkB,QAAfM,EAAGD,EAAQH,YAAI,IAAAI,OAAA,EAAZA,EAAcN,IAEpBY,QAAqB,OAAHZ,QAAG,IAAHA,OAAG,EAAHA,EAAKa,aAAaC,KACxC,CAAEP,YAAWQ,aAASC,GACtBP,IAEF,OAAgB,OAATG,QAAS,IAATA,OAAS,EAATA,EAAWK,QAAQ,IASjBC,EAAkCA,KAC7C,MAAMC,GAAYC,EAAAA,EAAAA,KAWlB,OAVoBzB,EAAa,CAC/B0B,UAAW,CACTb,SAAUc,EAAAA,GACVf,UAAWgB,EAAAA,IAEbC,OAASC,IAAW,IAADC,EAAAC,EACjB,OAAuD,QAAvDD,EAAuB,QAAvBC,EAAOF,EAAMhC,kBAAU,IAAAkC,OAAA,EAAhBA,EAA6B,OAATR,QAAS,IAATA,EAAAA,EAAa,WAAe,IAAAO,EAAAA,EAAI,IAAI,GAIjD,EAGPE,EAAkBA,KAAO,IAADC,EACnC,MAAM9C,EAA2B,QAAnB8C,GAAGT,EAAAA,EAAAA,YAAgB,IAAAS,EAAAA,EAAI,IAC7BrC,KAAMD,IAAiBV,EAAAA,EAAAA,IAAgB,CAAEE,cACzCS,KAAMsC,GAAgBZ,IAE9B,MAAO,CACLa,OAA4C,KAAxB,OAAZxC,QAAY,IAAZA,OAAY,EAAZA,EAAcE,WAAWC,UAAiBoC,EAElDE,QAA6C,KAAxB,OAAZzC,QAAY,IAAZA,OAAY,EAAZA,EAAcE,WAAWC,QACnC,C,yDE5DH,MAAMuC,EAAYC,EAAAA,GAAOC,GAAI;;;;;;;;;;;;;EAevBC,EAASF,EAAAA,GAAOC,GAAgD;;;;;IAKlErD,IAAA,IAAC,SAAEuD,GAAUvD,EAAA,OAAKwD,EAAAA,EAAI;uBACHD;GACpB;EAGGE,EAAaL,EAAAA,GAAOM,CAIvB;;;iBAGcC,IAAA,IAAC,OAAEC,GAAQD,EAAA,OAAMC,EAAS,OAAS,QAAQ;kBAC1CC,IAAA,IAAC,aAAEC,GAAcD,EAAA,OAAMC,EAAe,SAAW,EAAE;EAgB/DC,EAAUX,EAAAA,GAAOC,GAAI;;;;;EAOrBW,EAAOZ,EAAAA,GAAOC,GAAI;;;EAoCXY,EAAS,CACpBd,YACAY,UACAT,SAEAG,aACAS,IArCUd,EAAAA,GAAOC,GAAI;;;;;;;;;;;;;;;EAsCrBW,OACAG,KAtBWf,EAAAA,GAAOC,GAGjB;;IAECe,IAAA,IAAC,SAAEb,GAAUa,EAAA,OAAKZ,EAAAA,EAAI;uBACHD;GACpB;;YAESc,IAAoB,IAAnB,UAAEC,GAAWD,EACtB,OAAOC,EAAY,UAAY,SAAS;GC1FrC,IAAKC,EAAQ,SAARA,GAAQ,OAARA,EAAQ,sBAARA,EAAQ,wBAARA,EAAQ,kBAARA,CAAQ,M,aCIb,MCUMC,EAA4BxE,IAAmC,IAAlC,QAAEyE,EAAO,KAAEC,EAAI,UAAEC,GAAW3E,EACpE,MAAO4E,EAAcC,IAAmBC,EAAAA,EAAAA,UAIrC,CAAEC,WAAO7C,EAAW8C,SAAUT,EAASU,UAEpCC,ECToClF,KAA6B,IAA5B,aAAE4E,EAAY,KAAEF,GAAM1E,EACjE,MAAOkF,EAAYC,IAAiBL,EAAAA,EAAAA,UAASJ,GAyC7C,OAvCAU,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAS,IAAIX,IACb,MAAEK,EAAK,SAAEO,GAAaV,EAExBG,IACEH,EAAaI,WAAaT,EAASgB,WACrCF,EAAOG,MAAK,CAACC,EAAGC,KACd,MAAMC,EAAOL,EAAW,WAAaP,EAC/Ba,EAAMH,EAAEE,GAAME,cACdC,EAAMJ,EAAEC,GAAME,cAEpB,OAAID,EAAME,EACD,EAELA,EAAMF,GACA,EAEH,CAAC,IAGRhB,EAAaI,WAAaT,EAASwB,YACrCV,EAAOG,MAAK,CAACC,EAAGC,KACd,MAAMC,EAAOL,EAAW,WAAaP,EAC/Ba,EAAMH,EAAEE,GAAME,cACdC,EAAMJ,EAAEC,GAAME,cAEpB,OAAID,EAAME,GACA,EAENA,EAAMF,EACD,EAEF,CAAC,KAIdT,EAAcE,EAAO,GACpB,CAACX,EAAME,IAEHM,CAAU,EDjCEc,CAAY,CAAEtB,OAAME,iBACjCqB,EDlBsBjG,KAQvB,IARwB,QAC7ByE,EAAO,KACPC,EAAI,UACJC,GAKD3E,EACC,OAAOkG,EAAAA,EAAAA,UAAQ,IACNxB,EAAKyB,KAAI,CAACC,EAAKC,KACpB,MAAMC,EAAQ7B,EAAQ8B,QAAoB,CAACC,EAAKC,EAAKJ,IAY5C,IAAIG,GAVTE,EAAAA,EAAAA,KAACzC,EAAOE,KAAI,CACVZ,SAAUkD,EAAIlD,SAEdoD,MAAO,CAAEC,MAAOH,EAAIG,OACpBtC,YAAaK,EAAUkC,UAEvBH,EAAAA,EAAAA,KAAA,OAAKI,QAASA,IAAe,OAATnC,QAAS,IAATA,OAAS,EAATA,EAAYyB,GAAKS,SAAET,EAAIK,EAAI1B,UAJ1CsB,KASR,IACH,OAAOK,EAAAA,EAAAA,KAACzC,EAAOC,IAAG,CAAA2C,SAAUP,GAAJD,EAAuB,KAEhD,CAAC1B,EAAWF,EAASC,GAAM,ECTbqC,CAAe,CAAEtC,UAASC,KAAMQ,EAAYP,cACvDqC,EETuCnC,KACtCoC,EAAAA,EAAAA,cACJC,GACQ,KACL,MAAM,MAAEnC,EAAK,SAAEoC,EAAQ,SAAE7B,GAAa4B,EACtCrC,GAAiBuC,IACf,IAAKD,EACH,OAAOC,EAGT,GAAIA,EAAKrC,QAAUA,EAAO,CACxB,IAAIC,EACFoC,EAAKpC,WAAaT,EAASgB,UACvBhB,EAASwB,WACTqB,EAAKpC,WAAaT,EAASwB,WAC3BxB,EAASU,QACTV,EAASgB,UACf,MAAO,CAAER,QAAOC,WAAUM,WAC5B,CACA,MAAO,CAAEP,QAAOC,SAAUT,EAASgB,UAAWD,WAAU,GACxD,GAGN,CAACT,IFdiBwC,CAAaxC,GAEjC,OACEyC,EAAAA,EAAAA,MAACrD,EAAOd,UAAS,CAAA0D,SAAA,EACfH,EAAAA,EAAAA,KAACzC,EAAOF,QAAO,CAAA8C,SACZpC,EAAQ0B,KAAI,CAACe,EAAQK,KAAK,IAAAC,EAAA,OACzBd,EAAAA,EAAAA,KAACzC,EAAOX,OAAM,CACZC,SAAU2D,EAAO3D,SAEjBoD,MAAO,CAAEC,MAAOM,EAAON,OACvBE,QAASE,EAAYE,GAAQL,UAE7BH,EAAAA,EAAAA,KAACzC,EAAOR,WAAU,CAChBG,OACEgB,EAAaI,WAAaT,EAASU,SACnCL,EAAaG,QAAUmC,EAAOnC,MAEhCoC,SAAyB,QAAjBK,EAAEN,EAAOC,gBAAQ,IAAAK,GAAAA,EACzB1D,aAAwB,IAAVyD,EAAYV,SAEzBK,EAAOO,cAZLP,EAAOnC,MAyBE,OAGpB2B,EAAAA,EAAAA,KAACzC,EAAOD,KAAI,CAAA6C,SAAEZ,MACG,C,gDGrDhB,MAAM3D,EAAiBA,KAC5B,MAAM,QAAEjC,IAAYC,EAAAA,EAAAA,MACpB,OAAc,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAASG,cAAc,C,uGCAhC,MAAMkH,EAAwC,CAC5C,CACE3C,MAAO,UACP0C,WAAY,WACZb,MAAO,IACPrD,SAAU,UAEZ,CACEwB,MAAO,KACP0C,WAAY,iBACZb,MAAO,IACPrD,SAAU,WAIDoE,EAAcA,KACzB,MAAMC,GAAWC,EAAAA,EAAAA,OAETnH,KAAMoB,IAAcjB,EAAAA,EAAAA,OAItB,WAAEF,GAAwB,OAATmB,QAAS,IAATA,EAAAA,EAAa,CAAEnB,WAAY,CAAC,GAEnCmH,OAAOC,QAAQpH,GAEvB6E,MAAK,CAAAxF,EAAA2D,KAAqC,IAAnCqE,EAAUC,GAAGjI,GAAGkI,EAAUC,GAAGxE,EAE1BsE,EAAGG,WAAWC,WACdF,EAAGC,WAAWC,WAC9B,OAAO,CAAC,IAgBV,MAEMC,GAAkBrB,EAAAA,EAAAA,cACrBsB,IACCX,EAAU,YAAWW,EAAIC,QAAQC,MAAM5B,SAAS,KAAK,GAEvD,CAACe,IAKH,OACElB,EAAAA,EAAAA,KAAA,OAAKgC,UAAU,cAAa7B,UAC1BS,EAAAA,EAAAA,MAAA,OAAKoB,UAAU,oBAAmB7B,SAAA,EAChCH,EAAAA,EAAAA,KAAA,OAAKgC,UAAU,SAAQ7B,SAAC,iBACxBH,EAAAA,EAAAA,KAAA,OAAKgC,UAAW,mBAAmB7B,UACjCH,EAAAA,EAAAA,KAAA,OAAKgC,UAAU,cAAa7B,UAC1BH,EAAAA,EAAAA,KAAClC,EAAAA,EAAO,CACNE,KAlBW,GAmBXD,QAASiD,EACT/C,UAAW2D,YAKf,C","sources":["app/api/characters.ts","app/api/mintState.ts","app/api/queryMiddleware/withApi.ts","components/Table/styles.ts","components/Table/constants.ts","components/Table/hook/useGetRowItems.tsx","components/Table/TableUI.tsx","components/Table/hook/useSortRows.ts","components/Table/hook/useClickSort.ts","hooks/hooks.ts","pages/Leaderboard/Leaderboard.tsx"],"sourcesContent":["import { useAccount } from \"@gear-js/react-hooks\";\nimport { graphql } from \"gql/gql\";\nimport {\n  getGraphQLPrimaryKey,\n  useGraphQL,\n} from \"app/providers/ReactQuery/useGraphQL\";\nimport { UseQueryResult } from \"@tanstack/react-query\";\nimport { queryClient } from \"app/providers/ReactQuery\";\n\nconst allCharactersQueryDocument = graphql(/* GraphQL */ `\n  query AllCharacters {\n    characters {\n      id\n      level\n      name\n      owner\n      experience\n      attributes\n    }\n  }\n`);\n\nexport const useAllCharacters = () => useGraphQL(allCharactersQueryDocument);\n\nconst charactersByOwnerQueryDocument = graphql(/* GraphQL */ `\n  query CharactersByOwner($owner_eq: String!) {\n    characters(where: { owner_eq: $owner_eq }) {\n      id\n      level\n      name\n      owner\n      experience\n      attributes\n    }\n  }\n`);\n\nexport const resetUseMyCharacrersQuery = () => {\n  const primaryKey = getGraphQLPrimaryKey(charactersByOwnerQueryDocument);\n\n  queryClient.invalidateQueries({ queryKey: [primaryKey] });\n};\n\nexport const useMyCharacters = ({ owner_eq }: { owner_eq: string }) => {\n  return useGraphQL(charactersByOwnerQueryDocument, {\n    owner_eq,\n  });\n};\n\nexport const useMyCharacter = () => {\n  const { account } = useAccount();\n  const queryResult = useMyCharacters({\n    owner_eq: account?.decodedAddress ?? \"\",\n  });\n\n  const myCharacters = queryResult.data;\n\n  return {\n    ...queryResult,\n    data: myCharacters?.characters[\n      myCharacters?.characters.length - 1\n    ] as Character,\n  };\n};\n\nconst characterByIdQueryDocument = graphql(/* GraphQL */ `\n  query CharacterById($character_id: String!) {\n    characterById(id: $character_id) {\n      attributes\n      experience\n      id\n      level\n      name\n      owner\n    }\n  }\n`);\n\nexport const useCharacterById = ({ id }: { id: string }) => {\n  return useGraphQL(characterByIdQueryDocument, {\n    character_id: id,\n  }) as UseQueryResult<Character>;\n};\n","import { GearApi, ProgramMetadata } from \"@gear-js/api\";\nimport { MINT_METADATA, MINT_PROGRAM_ID } from \"consts\";\nimport { useMyAccountId } from \"hooks/hooks\";\n\nimport { createQuery } from \"react-query-kit\";\nimport { withApi } from \"./queryMiddleware/withApi\";\nimport { useMyCharacters } from \"./characters\";\n\ntype OwnerId = HexString;\n\nexport const useMintState = createQuery<\n  {\n    characters: Record<OwnerId, CharacterInContractState>;\n  },\n  {\n    programId: HexString;\n    metadata: string;\n  }\n>({\n  use: [withApi],\n  queryKey: [\"mintProgramState\"],\n  fetcher: async ({ programId, metadata }, context) => {\n    const mintMetadata = ProgramMetadata.from(metadata);\n    const api = context.meta?.api as GearApi | undefined;\n\n    const mintState = await api?.programState.read(\n      { programId, payload: undefined },\n      mintMetadata\n    );\n    return mintState?.toJSON() as {\n      characters: Record<OwnerId, CharacterInContractState>;\n    };\n  },\n});\n\n/**\n * This is a workaround until we have working indexer\n */\nexport const useMyCharacterFromContractState = () => {\n  const accountId = useMyAccountId();\n  const queryResult = useMintState({\n    variables: {\n      metadata: MINT_METADATA,\n      programId: MINT_PROGRAM_ID,\n    },\n    select: (state) => {\n      return state.characters?.[(accountId ?? \"\") as OwnerId] ?? null;\n    },\n  });\n\n  return queryResult;\n};\n\nexport const useMyHeroIsDead = () => {\n  const owner_eq = useMyAccountId() ?? \"\";\n  const { data: myCharacters } = useMyCharacters({ owner_eq });\n  const { data: myCharacter } = useMyCharacterFromContractState();\n\n  return {\n    isDead: myCharacters?.characters.length !== 0 && !myCharacter,\n    // isFresh means that we don't have any characters yet\n    isFresh: myCharacters?.characters.length === 0,\n  };\n};\n","import { useApi } from \"@gear-js/react-hooks\";\nimport { Middleware } from \"react-query-kit\";\n\nexport const withApi: Middleware = (useQueryNext) => {\n  return (options) => {\n    const { api } = useApi();\n\n    return useQueryNext({\n      ...options,\n      meta: {\n        ...options.meta,\n        api,\n      },\n    });\n  };\n};\n","import styled, { css } from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  box-sizing: border-box;\n  border-left: 2px solid white;\n  border-right: 2px solid white;\n  border-bottom: 2px solid white;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n\n  overflow: hidden;\n`;\n\nconst Column = styled.div<{ position?: \"left\" | \"right\" | \"center\" }>`\n  display: flex;\n  align-items: center;\n  height: 16px;\n  gap: 4px;\n  ${({ position }) => css`\n    justify-content: ${position};\n  `}\n`;\n\nconst ColumnText = styled.p<{\n  active: boolean;\n  sortable: boolean;\n  isLeftPadded?: boolean;\n}>`\n  color: white;\n  font-size: 12px;\n  font-weight: ${({ active }) => (active ? \"bold\" : \"normal\")};\n  padding-left: ${({ isLeftPadded }) => (isLeftPadded ? \"1.5rem\" : \"\")};\n`;\n\n// const ColumnIcon = styled.div<{ active: boolean; sortType: SortType }>`\n//   height: 16px;\n//   width: 16px;\n//   visibility: ${({ active }) => (active ? 'visible' : 'hidden')};\n//   ${({ sortType }) => {\n//     if (sortType === SortType.ascending) {\n//       return css`\n//         transform: rotate(180deg);\n//       `;\n//     }\n//   }}\n// `;\n\nconst Columns = styled.div`\n  display: flex;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.7);\n  height: 40px;\n`;\n\nconst Rows = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Row = styled.div`\n  height: 72px;\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  color: white;\n  background: rgba(0, 0, 0, 0.7);\n  border-top: 1px solid white;\n\n  position: relative;\n\n  &:last-child {\n    border-bottom-left-radius: 12px;\n    border-bottom-right-radius: 12px;\n  }\n`;\n\nconst Cell = styled.div<{\n  position?: \"center\" | \"left\" | \"right\";\n  ableClick?: boolean;\n}>`\n  display: flex;\n  ${({ position }) => css`\n    justify-content: ${position};\n  `}\n\n  cursor: ${({ ableClick }) => {\n    return ableClick ? \"pointer\" : \"default\";\n  }};\n`;\n\nexport const Styled = {\n  Container,\n  Columns,\n  Column,\n  // ColumnIcon,\n  ColumnText,\n  Row,\n  Rows,\n  Cell,\n};\n","export enum SortType {\n    ascending = 'ascending',\n    descending = 'descending',\n    default = 'default'\n}","import { ReactNode, useMemo } from \"react\";\nimport { TableColumnsType } from \"../types\";\nimport { Styled } from \"../styles\";\n\nexport const useGetRowItems = ({\n  columns,\n  rows,\n  cellClick,\n}: {\n  columns: TableColumnsType[];\n  rows: object[];\n  cellClick?: (arg: object) => void;\n}) => {\n  return useMemo((): ReactNode => {\n    return rows.map((row, i) => {\n      const items = columns.reduce<ReactNode[]>((acc, cur, i) => {\n        const item = (\n          <Styled.Cell\n            position={cur.position}\n            key={i}\n            style={{ width: cur.width }}\n            ableClick={!!cellClick}\n          >\n            <div onClick={() => cellClick?.(row)}>{row[cur.field]}</div>\n          </Styled.Cell>\n        );\n\n        return [...acc, item];\n      }, []);\n      return <Styled.Row key={i}>{items}</Styled.Row>;\n    });\n  }, [cellClick, columns, rows]);\n};\n","import React, { FC, useState } from \"react\";\nimport { Styled } from \"./styles\";\nimport { TableColumnsType } from \"./types\";\nimport { SortType } from \"./constants\";\nimport { useSortRows } from \"./hook/useSortRows\";\nimport { useGetRowItems } from \"./hook/useGetRowItems\";\nimport { useClickSort } from \"./hook/useClickSort\";\n\nexport type TableUIProps = {\n  columns: TableColumnsType[];\n  rows: object[];\n  cellClick?: (arg?: object) => void;\n};\n\nexport const TableUI: FC<TableUIProps> = ({ columns, rows, cellClick }) => {\n  const [sortedColumn, setSortedColumn] = useState<{\n    field: string | undefined;\n    sortName?: boolean;\n    sortType: SortType;\n  }>({ field: undefined, sortType: SortType.default });\n\n  const sortedRows = useSortRows({ rows, sortedColumn });\n  const RowItems = useGetRowItems({ columns, rows: sortedRows, cellClick });\n  const onClickSort = useClickSort(setSortedColumn);\n\n  return (\n    <Styled.Container>\n      <Styled.Columns>\n        {columns.map((column, index) => (\n          <Styled.Column\n            position={column.position}\n            key={column.field}\n            style={{ width: column.width }}\n            onClick={onClickSort(column)}\n          >\n            <Styled.ColumnText\n              active={\n                sortedColumn.sortType !== SortType.default &&\n                sortedColumn.field === column.field\n              }\n              sortable={column.sortable ?? false}\n              isLeftPadded={index === 0}\n            >\n              {column.headerName}\n            </Styled.ColumnText>\n            {/* {column.sortable && (\n              <Styled.ColumnIcon\n                active={\n                  sortedColumn.sortType !== SortType.default &&\n                  sortedColumn.field === column.field\n                }\n                sortType={sortedColumn.sortType}\n              >\n                <IconUI iconName={IconName.ArrowDown} />\n              </Styled.ColumnIcon>\n            )} */}\n          </Styled.Column>\n        ))}\n      </Styled.Columns>\n      <Styled.Rows>{RowItems}</Styled.Rows>\n    </Styled.Container>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { SortType } from \"../constants\";\n\ntype UseSortRowsType = (props: {\n  sortedColumn: {\n    field: string | undefined;\n    sortType: SortType;\n    sortName?: boolean;\n  };\n  rows: object[];\n}) => object[];\n\nexport const useSortRows: UseSortRowsType = ({ sortedColumn, rows }) => {\n  const [sortedRows, setSortedRows] = useState(rows);\n\n  useEffect(() => {\n    const cpRows = [...rows];\n    const { field, sortName } = sortedColumn;\n\n    if (field) {\n      if (sortedColumn.sortType === SortType.ascending) {\n        cpRows.sort((a, b) => {\n          const name = sortName ? \"sortName\" : field;\n          const cpA = a[name].toUpperCase();\n          const cpB = b[name].toUpperCase();\n\n          if (cpA > cpB) {\n            return 1;\n          }\n          if (cpB > cpA) {\n            return -1;\n          }\n          return 0;\n        });\n      }\n      if (sortedColumn.sortType === SortType.descending) {\n        cpRows.sort((a, b) => {\n          const name = sortName ? \"sortName\" : field;\n          const cpA = a[name].toUpperCase();\n          const cpB = b[name].toUpperCase();\n\n          if (cpA > cpB) {\n            return -1;\n          }\n          if (cpB > cpA) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n    setSortedRows(cpRows);\n  }, [rows, sortedColumn]);\n\n  return sortedRows;\n};\n","import { Dispatch, SetStateAction, useCallback } from 'react';\nimport { SortType } from '../constants';\nimport { TableColumnsType } from '../types';\n\ntype UseClickSortType = (\n  setSortedColumn: Dispatch<\n    SetStateAction<{\n      field: string | undefined;\n      sortType: SortType;\n      sortName?: boolean;\n    }>\n  >\n) => (column: TableColumnsType) => VoidFunction;\n\nexport const useClickSort: UseClickSortType = (setSortedColumn) => {\n  return useCallback(\n    (column) => {\n      return () => {\n        const { field, sortable, sortName } = column;\n        setSortedColumn((prev) => {\n          if (!sortable) {\n            return prev;\n          }\n\n          if (prev.field === field) {\n            let sortType =\n              prev.sortType === SortType.ascending\n                ? SortType.descending\n                : prev.sortType === SortType.descending\n                ? SortType.default\n                : SortType.ascending;\n            return { field, sortType, sortName };\n          }\n          return { field, sortType: SortType.ascending, sortName };\n        });\n      };\n    },\n    [setSortedColumn]\n  );\n};\n","/**\n * I didn't want to name this file \"index.ts\" and named it \"hooks.ts\" instead\n * so that it's easier to open from vscode search menu cmd+P menu\n */\n\nimport { useAccount } from \"@gear-js/react-hooks\";\n\nexport const useMyAccountId = () => {\n  const { account } = useAccount();\n  return account?.decodedAddress;\n};\n","import { useCallback } from \"react\";\nimport \"./styles.scss\";\nimport { TableUI } from \"components/Table\";\nimport { TableColumnsType } from \"components/Table/types\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useMintState } from \"app/api/mintState\";\n\nexport type LeaderboardProps = {};\n\nconst inProgressColumns: TableColumnsType[] = [\n  {\n    field: \"ownerId\",\n    headerName: \"Owner Id\",\n    width: 645,\n    position: \"center\",\n  },\n  {\n    field: \"nw\",\n    headerName: \"number of wins\",\n    width: 120,\n    position: \"center\",\n  },\n];\n\nexport const Leaderboard = () => {\n  const navigate = useNavigate();\n\n  const { data: mintState } = useMintState();\n\n\n\n  const { characters } = mintState ?? { characters: {} };\n\n  const entries = Object.entries(characters);\n\n  entries.sort(([ownerId1, c1], [ownerId2, c2]) => {\n    // by rating\n    const rating1 = c1.attributes.tierRating;\n    const rating2 = c2.attributes.tierRating;\n    return 1;\n  });\n\n  // const inProgressRows = useMemo(() => {\n  //   if (leaderBoard) {\n  //     return Object.keys(leaderBoard)\n  //       .map((key) => ({\n  //         ownerId: <p className=\"row_ownerId\">🔗 {key}</p>,\n  //         nw: leaderBoard[key],\n  //       }))\n  //       .sort((row1, row2) => Number(row2.nw) - Number(row1.nw));\n  //   }\n\n  //   return [];\n  // }, [leaderBoard]);\n\n  const inProgressRows = [];\n\n  const handleClickCell = useCallback(\n    (arg) => {\n      navigate(`/profile/${arg.ownerId.props.children[1]}`);\n    },\n    [navigate]\n  );\n\n  // console.log(\"leaderBoard\", users);\n\n  return (\n    <div className=\"leaderboard\">\n      <div className=\"modal_leaderboard\">\n        <div className=\"header\">Leaderboard</div>\n        <div className={\"scroll_container\"}>\n          <div className=\"modal_table\">\n            <TableUI\n              rows={inProgressRows}\n              columns={inProgressColumns}\n              cellClick={handleClickCell}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n"],"names":["graphql","charactersByOwnerQueryDocument","resetUseMyCharacrersQuery","primaryKey","getGraphQLPrimaryKey","queryClient","invalidateQueries","queryKey","useMyCharacters","_ref","owner_eq","useGraphQL","useMyCharacter","_account$decodedAddre","account","useAccount","queryResult","decodedAddress","myCharacters","data","characters","length","useMintState","createQuery","use","useQueryNext","options","api","useApi","meta","fetcher","async","context","_context$meta","programId","metadata","mintMetadata","ProgramMetadata","from","mintState","programState","read","payload","undefined","toJSON","useMyCharacterFromContractState","accountId","useMyAccountId","variables","MINT_METADATA","MINT_PROGRAM_ID","select","state","_state$characters","_state$characters2","useMyHeroIsDead","_useMyAccountId","myCharacter","isDead","isFresh","Container","styled","div","Column","position","css","ColumnText","p","_ref2","active","_ref3","isLeftPadded","Columns","Rows","Styled","Row","Cell","_ref4","_ref5","ableClick","SortType","TableUI","columns","rows","cellClick","sortedColumn","setSortedColumn","useState","field","sortType","default","sortedRows","setSortedRows","useEffect","cpRows","sortName","ascending","sort","a","b","name","cpA","toUpperCase","cpB","descending","useSortRows","RowItems","useMemo","map","row","i","items","reduce","acc","cur","_jsx","style","width","children","onClick","useGetRowItems","onClickSort","useCallback","column","sortable","prev","useClickSort","_jsxs","index","_column$sortable","headerName","inProgressColumns","Leaderboard","navigate","useNavigate","Object","entries","ownerId1","c1","ownerId2","c2","attributes","tierRating","handleClickCell","arg","ownerId","props","className"],"sourceRoot":""}