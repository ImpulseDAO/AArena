{"version":3,"file":"static/js/16.9db719cc.chunk.js","mappings":"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","sources":["app/api/lobbies.ts","app/api/sendMessages.ts","components/GasReserved/GasReserved.tsx","components/Panel/Panel.tsx","components/TheButton/TheButton.tsx","hooks/useWatchArenaMessages/useWatchArenaMessages.ts","pages/Arena/Arena.tsx"],"sourcesContent":["import { graphql } from \"gql/gql\";\nimport { useGraphQL } from \"app/providers/ReactQuery/useGraphQL\";\nimport { useSendToArena } from \"./sendMessages\";\nimport { MAX_GAS_LIMIT } from \"consts\";\nimport { useAccount, useAlert } from \"@gear-js/react-hooks\";\nimport { useWatchArenaMessages } from \"hooks/useWatchArenaMessages/useWatchArenaMessages\";\n\n/**\n * All Lobbies\n */\n\nconst lobbiesQueryDocument = graphql(/* GraphQL */ `\n  query Lobbies {\n    lobbies {\n      id\n      capacity\n      tier\n      reservationsCount\n      characters {\n        id\n        character {\n          id\n          name\n          owner\n          level\n          experience\n          attributes\n        }\n      }\n      battleLogs {\n        id\n      }\n    }\n  }\n`);\n\nexport const useLobbies = () =>\n  useGraphQL(lobbiesQueryDocument, undefined, { refetchInterval: 1000 * 3 });\n\n/**\n * Lobby By Id\n */\n\nconst lobbyByIdQueryDocument = graphql(/* GraphQL */ `\n  query LobbyById2($id: String!) {\n    lobbyById(id: $id) {\n      id\n      capacity\n      tier\n      reservationsCount\n      characters {\n        id\n        character {\n          id\n          name\n          owner\n          level\n          experience\n          attributes\n        }\n      }\n      battleLogs {\n        id\n      }\n    }\n  }\n`);\n\nexport const useLobby = ({ id }: { id: string }) => {\n  const query = useGraphQL(\n    lobbyByIdQueryDocument,\n    { id: `${id}` },\n    {\n      // refresh every 3 seconds\n      refetchInterval: 1000 * 3,\n    }\n  );\n  return query;\n};\n\ntype ReplyObject = {\n  LobbyCreated: {\n    lobbyId: string;\n    capacity: string;\n  };\n};\n\n/**\n * Create Lobby\n */\n\nexport const useCreateLobby = () => {\n  const alert = useAlert();\n  const send = useSendToArena();\n  const { isAccountReady } = useAccount();\n  const { subscribe, unsubscribe } = useWatchArenaMessages<ReplyObject>();\n\n  if (!isAccountReady) {\n    // no-op\n    return ({ capacity }: { capacity: LobbyCapacity }) =>\n      Promise.resolve(undefined as ReplyObject | undefined);\n  }\n\n  return ({ capacity }: { capacity: LobbyCapacity }) => {\n    if (capacity <= 0) {\n      alert.error(\"Capacity must be greater than 0\");\n      return Promise.reject(\"Capacity must be greater than 0\");\n    }\n\n    return new Promise<ReplyObject | undefined>((resolve, reject) => {\n      subscribe((reply, error) => {\n        if (error) {\n          reject(error.message);\n          alert.error(error.message);\n          return;\n        }\n\n        reply != null &&\n          setTimeout(() => {\n            const { lobbyId, capacity } = reply.LobbyCreated;\n            const message = `Lobby ${lobbyId} created with capacity ${capacity}`;\n            console.info(message);\n            alert.success(message);\n          });\n\n        resolve(reply);\n      });\n      send({\n        payload: {\n          CreateLobby: {\n            capacity: `${capacity}`,\n          },\n        },\n        gasLimit: MAX_GAS_LIMIT,\n        onSuccess: () => {\n          console.log(\"CreateLobby message successfully sent\");\n        },\n        onError: () => {\n          console.log(\"Error while sending CreateLobby message\");\n          reject(\"Error while sending CreateLobby message\");\n        },\n      });\n    }).finally(() => {\n      console.log(\"Unsubscribing from arena messages\");\n      unsubscribe();\n    });\n  };\n};\n","import { ProgramMetadata } from \"@gear-js/api\";\nimport { useSendMessage } from \"@gear-js/react-hooks\";\nimport {\n  ARENA_METADATA,\n  ARENA_PROGRAM_ID,\n  MINT_METADATA,\n  MINT_PROGRAM_ID,\n} from \"consts\";\nimport { useCallback, useMemo } from \"react\";\n\nconst options = {\n  isMaxGasLimit: true,\n};\n\nexport const useSendToArena = () => {\n  const meta = useMemo(() => ProgramMetadata.from(ARENA_METADATA), []);\n  const sendToArenaContract = useSendMessage(ARENA_PROGRAM_ID, meta, options);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(sendToArenaContract, []);\n};\n\nexport const useSendToMintContract = () => {\n  const meta = useMemo(() => ProgramMetadata.from(MINT_METADATA), []);\n  const sendToMintContract = useSendMessage(MINT_PROGRAM_ID, meta, options);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(sendToMintContract, []);\n};\n","import { FlexProps, Flex, Box, Text } from \"@mantine/core\";\n\nexport const GasReserved = ({\n  gasNeeded,\n  gasReserved,\n  ...flexProps\n}: {\n  gasNeeded: number,\n  gasReserved: number,\n} & FlexProps) => {\n  return (\n    <Flex align={\"center\"} gap=\"xs\" {...flexProps}>\n      <Flex gap={2.75}>\n        {\n          Array.from({ length: gasNeeded }).map((_, index) => (\n            <GasPoint filled={index < gasReserved} key={index} />\n          ))\n        }\n      </Flex>\n\n      <Text c=\"white\" fw={600}>Gas Reserved</Text>\n    </Flex >\n  );\n};\n\nconst GasPoint = ({ filled }: { filled?: boolean; }) => {\n  return <Box bg={filled ? 'primary' : 'white'} w={20} h={8} style={{\n    borderRadius: 4,\n  }} />;\n};\n","import { Paper, PaperProps } from \"@mantine/core\";\n\nexport const Panel = ({ children, turnOffPadding = false, ...paperProps }: PaperProps & {\n  children: React.ReactNode,\n  turnOffPadding?: boolean;\n}) => {\n  return (\n    <Paper\n      {...(turnOffPadding ? {} : { p: \"lg\" })}\n      bg={\"rgba(0, 0, 0, 0.7)\"}\n      withBorder\n      radius={12}\n      style={{\n        border: \"2px solid #eaecf0\",\n        color: 'white'\n      }}\n      {...paperProps}\n    >\n      {children}\n    </Paper>\n  );\n};\n","import { ComponentPropsWithoutRef } from \"react\";\nimport { Button, type ButtonProps } from \"@mantine/core\";\n\nexport const TheButton = ({\n  children,\n  onClick,\n  ...buttonProps\n}: ButtonProps & ComponentPropsWithoutRef<typeof Button<'button'>>) => {\n  return (\n    <Button\n      onClick={onClick}\n      //\n      radius=\"sm\"\n      bg=\"primary\"\n      size=\"md\"\n      px=\"xl\"\n      style={theme => ({\n        boxShadow: theme.shadows.sm,\n      })}\n      styles={(theme) => ({\n        root: {\n          '&:disabled': {\n            backgroundColor: theme.colors.gray[5],\n            color: theme.colors.gray[6],\n          },\n        },\n      })}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  );\n};\n","import { ProgramMetadata } from \"@gear-js/api\";\nimport { ARENA_METADATA, ARENA_PROGRAM_ID } from \"consts\";\nimport { useWatchMessages } from \"hooks/useWatchMessages/useWatchMessages\";\n\nexport const useWatchArenaMessages = <TReply>() => {\n  const arenaMetadata = ProgramMetadata.from(ARENA_METADATA);\n  const programId = ARENA_PROGRAM_ID;\n  return useWatchMessages<TReply>({\n    meta: arenaMetadata,\n    programId,\n  });\n};\n","import { Title, Box, Grid, Image, Select, Stack, Badge, type TitleProps, Text, Flex } from \"@mantine/core\";\nimport ArenaPng from \"assets/images/arena.png\";\nimport { TheButton } from \"components/TheButton\";\nimport { Panel } from \"components/Panel\";\nimport { useCreateLobby, useLobbies } from \"app/api/lobbies\";\nimport { useNavigate } from \"react-router-dom\";\nimport { newRoutes } from \"app/routes\";\nimport { useMemo, useRef } from \"react\";\nimport { GasReserved } from \"components/GasReserved/GasReserved\";\nimport { useAlert } from \"@gear-js/react-hooks\";\nimport { PLAYERS_TO_RESERVATIONS_NEEDED_MAP } from \"consts\";\n\nexport const Arena = () => {\n  const alert = useAlert();\n  const navigate = useNavigate();\n  const selectRef = useRef<HTMLInputElement | null>(null);\n\n  const { data: lobbiesData, refetch: refetchLobbies } = useLobbies();\n\n  const cards = useMemo(() => {\n    if (!lobbiesData) return [];\n\n    return [...lobbiesData?.lobbies]\n      .sort((a, b) => parseInt(b.id) - parseInt(a.id))\n      .map(lobby => {\n        return {\n          tierText: 'tier' in lobby ? `Tier ${lobby.tier}` : \"\",\n          lobbyId: lobby.id,\n          playersSize: lobby.capacity,\n          playersJoined: lobby.characters.length,\n          gasNeeded: PLAYERS_TO_RESERVATIONS_NEEDED_MAP[lobby.capacity],\n          gasReserved: lobby.reservationsCount,\n          isFinished: lobby.battleLogs.length > 0,\n        };\n      });\n  }, [lobbiesData]);\n\n  /**\n   * Get handleJoinLobby\n   */\n  const handleJoinLobby = ({ lobbyId }: {\n    lobbyId: string;\n  }) => {\n    console.log('handleJoinLobby', lobbyId);\n\n    navigate(newRoutes.lobby(lobbyId));\n  };\n\n  /**\n   * \n   */\n\n  const handleCreateLobby = useCreateLobby();\n\n  return (\n    <Flex style={{\n      flex: 1,\n      justifyContent: 'center',\n    }} >\n      <Grid m={'lg'} gutter={'md'}\n        pb={150}\n        style={{\n          flex: 1,\n          maxWidth: \"min(1300px, 90%)\",\n        }}\n      >\n        <GridColumn >\n          <Panel\n            h={370}\n            bg=\"black\"\n          >\n            <Stack align=\"center\" h=\"100%\" gap={0}>\n              <SwordsImage />\n\n              <TitleText>Create a lobby</TitleText>\n\n              <Stack w=\"100%\" mt=\"auto\" >\n                <Select\n                  ref={selectRef}\n                  label=\"Choose number of players\"\n                  styles={{\n                    input: {\n                      height: 44,\n                      fontSize: 16,\n                    },\n                    option: {\n                      color: 'black',\n                      fontSize: 14,\n                    },\n                    section: { pointerEvents: 'none' }\n                  }}\n                  labelProps={{\n                    c: 'white',\n                    fz: \"sm\",\n                    pb: 4\n                  }}\n                  data={[\n                    // can be only of type LobbyCapacity\n                    { value: '2', label: '2', },\n                    { value: '4', label: '4' },\n                  ]}\n                  defaultValue=\"4\"\n                  rightSection={\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\">\n                      <path d=\"M5 7.5L10 12.5L15 7.5\" stroke=\"#667085\" strokeWidth=\"1.66667\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                    </svg>\n                  }\n                  leftSection={\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\">\n                      <path d=\"M16.6668 17.5V15.8333C16.6668 14.9493 16.3156 14.1014 15.6905 13.4763C15.0654 12.8512 14.2176 12.5 13.3335 12.5H6.66683C5.78277 12.5 4.93493 12.8512 4.30981 13.4763C3.68469 14.1014 3.3335 14.9493 3.3335 15.8333V17.5M13.3335 5.83333C13.3335 7.67428 11.8411 9.16667 10.0002 9.16667C8.15921 9.16667 6.66683 7.67428 6.66683 5.83333C6.66683 3.99238 8.15921 2.5 10.0002 2.5C11.8411 2.5 13.3335 3.99238 13.3335 5.83333Z\" stroke=\"#667085\" strokeWidth=\"1.66667\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                    </svg>\n                  }\n                />\n                <TheButton onClick={async () => {\n                  const capacity = parseInt(selectRef.current?.value ?? '');\n\n                  if (capacity !== 2 && capacity !== 4 && capacity !== 8) {\n                    alert.error('Invalid capacity');\n                    return;\n                  };\n\n                  handleCreateLobby({ capacity })\n                    .then(async (reply) => {\n                      if (reply) {\n                        const { lobbyId } = reply.LobbyCreated;\n                        setTimeout(() => navigate(newRoutes.lobby(lobbyId)), 800);\n                      }\n                      /**\n                       * Refetch lobbies after successful promise resolution\n                       */\n                      await refetchLobbies();\n                    })\n                    .catch(error => {\n                      console.log('Lobby creation cancelled');\n                    });\n\n\n\n                }}  >\n                  Create\n                </TheButton>\n              </Stack>\n            </Stack>\n          </Panel>\n        </GridColumn>\n\n        {cards.map((card, index) => (\n          <GridColumn key={`${index} - ${card.lobbyId}`}>\n            <Card\n              isFinished={card.isFinished}\n              tierText={card.tierText}\n              lobbyId={card.lobbyId}\n              playersSize={card.playersSize}\n              playersJoined={card.playersJoined}\n              gasNeeded={card.gasNeeded}\n              gasReserved={card.gasReserved}\n              onJoin={() => {\n                console.log('onJoin');\n                handleJoinLobby({ lobbyId: card.lobbyId });\n              }}\n            />\n          </GridColumn>\n        ))}\n      </Grid>\n    </Flex >\n  );\n};\n\nconst SwordsImage = () => <Image maw={105} src={ArenaPng} mb={14} />;\nconst TitleText = ({ children, ...titleProps }: TitleProps) => <Title order={2} c={'white'} {...titleProps} >{children}</Title>;\n\nconst GridColumn = ({ children }) => {\n  return (\n    <Grid.Col\n      span={{\n        xs: 12,\n        sm: 6,\n        md: 4,\n      }}\n    >\n      {children}\n    </Grid.Col>\n  );\n};\n\nconst Card = ({\n  isFinished,\n  tierText,\n  lobbyId,\n  playersSize,\n  playersJoined,\n  gasNeeded,\n  gasReserved,\n  onJoin\n}: {\n  isFinished?: boolean,\n  tierText: string,\n  lobbyId: string,\n  playersSize: number | string,\n  playersJoined: number,\n  gasNeeded: number,\n  gasReserved: number,\n  onJoin: () => void,\n}) => {\n  return (\n    <Panel h={370} pos=\"relative\" >\n      {/* Lobby ID - absolutely positioned*/}\n      <Box pos=\"absolute\"\n        top={10}\n        right={10}\n      >\n        <Text fz={12} fw=\"600\" color=\"white\" bg={\"rgba(0, 0, 0, 0.4)\"}\n          py={4}\n          px={8}\n          style={{\n            borderRadius: 9999,\n          }}\n        >Lobby ID #{lobbyId}</Text>\n      </Box>\n\n      {/* Centered Content */}\n      <Stack align=\"center\" h=\"100%\" gap={0}>\n        <SwordsImage />\n\n        <TitleText mb=\"sm\">{tierText}</TitleText>\n\n        <Badge c={'white'} style={{ textTransform: 'none' }}>\n          {playersJoined} of {playersSize} players\n        </Badge>\n\n        <Box\n          mt=\"auto\"\n          mb=\"lg\"\n        >\n          {\n            isFinished\n              ? <Text c=\"red\" fw={600}>Lobby ended</Text>\n              : gasNeeded > 0 ? <GasReserved  {...{ gasNeeded, gasReserved }} /> : null\n          }\n        </Box>\n\n        <TheButton onClick={() => {\n          setTimeout(onJoin, 200);\n        }} w=\"100%\" >\n          Join the Lobby\n        </TheButton>\n\n      </Stack>\n\n    </Panel>\n  );\n};\n"],"names":["lobbiesQueryDocument","graphql","useLobbies","useGraphQL","undefined","refetchInterval","lobbyByIdQueryDocument","useLobby","_ref","id","useCreateLobby","alert","useAlert","send","useSendToArena","isAccountReady","useAccount","subscribe","unsubscribe","useWatchArenaMessages","_ref3","capacity","error","Promise","reject","resolve","reply","message","setTimeout","lobbyId","LobbyCreated","console","info","success","payload","CreateLobby","gasLimit","MAX_GAS_LIMIT","onSuccess","log","onError","finally","_ref2","options","isMaxGasLimit","meta","useMemo","ProgramMetadata","from","ARENA_METADATA","sendToArenaContract","useSendMessage","ARENA_PROGRAM_ID","useCallback","useSendToMintContract","MINT_METADATA","sendToMintContract","MINT_PROGRAM_ID","GasReserved","gasNeeded","gasReserved","flexProps","_jsxs","Flex","align","gap","children","_jsx","Array","length","map","_","index","GasPoint","filled","Text","c","fw","Box","bg","w","h","style","borderRadius","Panel","turnOffPadding","paperProps","Paper","p","withBorder","radius","border","color","TheButton","onClick","buttonProps","Button","size","px","theme","boxShadow","shadows","sm","styles","root","backgroundColor","colors","gray","arenaMetadata","programId","useWatchMessages","Arena","navigate","useNavigate","selectRef","useRef","data","lobbiesData","refetch","refetchLobbies","cards","lobbies","sort","a","b","parseInt","lobby","tierText","tier","playersSize","playersJoined","characters","PLAYERS_TO_RESERVATIONS_NEEDED_MAP","reservationsCount","isFinished","battleLogs","handleCreateLobby","flex","justifyContent","Grid","m","gutter","pb","maxWidth","GridColumn","Stack","SwordsImage","TitleText","mt","Select","ref","label","input","height","fontSize","option","section","pointerEvents","labelProps","fz","value","defaultValue","rightSection","xmlns","width","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","leftSection","async","_selectRef$current$va","_selectRef$current","current","then","newRoutes","catch","card","Card","onJoin","handleJoinLobby","Image","maw","src","ArenaPng","mb","titleProps","Title","order","Col","span","xs","md","_ref4","pos","top","right","py","Badge","textTransform"],"sourceRoot":""}