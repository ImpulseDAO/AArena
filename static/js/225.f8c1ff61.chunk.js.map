{"version":3,"file":"static/js/225.f8c1ff61.chunk.js","mappings":"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","sources":["pages/Leaderboard/Leaderboard.tsx","../node_modules/@mantine/core/src/components/Table/Table.context.ts","../node_modules/@mantine/core/src/components/Table/Table.components.tsx","../node_modules/@mantine/core/src/components/Table/TableDataRenderer.tsx","../node_modules/@mantine/core/src/components/Table/TableScrollContainer.tsx","../node_modules/@mantine/core/src/components/Table/Table.tsx"],"sourcesContent":["import { useMemo } from \"react\";\nimport \"./styles.scss\";\nimport { useMintState } from \"app/api/mintState\";\nimport { MINT_METADATA, MINT_PROGRAM_ID } from \"consts\";\nimport { Box, Table, Text } from \"@mantine/core\";\nimport { getShortIdString } from \"utils\";\nimport { useMyAccountId } from \"hooks/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport { routes } from \"app/routes\";\n\nexport const Leaderboard = () => {\n  const navigate = useNavigate();\n  const myAccountId = useMyAccountId();\n\n  const { data: mintState } = useMintState({\n    variables: {\n      metadata: MINT_METADATA,\n      programId: MINT_PROGRAM_ID\n    }\n  });\n\n  const { characters } = mintState ?? { characters: {} };\n\n  const entries = useMemo(() => {\n    return Object.entries(characters).sort(([, c1], [, c2]) => {\n      return (c1.attributes.tierRating - c2.attributes.tierRating) * -1;\n    });\n  }, [characters]);\n\n  const ROWS_MIN = 5;\n  const inProgressRows = entries.map(([ownerId, c]) => {\n    const isMyCharacter = ownerId === myAccountId;\n\n    return {\n      name: c.name,\n      level: c.level,\n      exp: c.experience,\n      ownerId,\n      rating: c.attributes.tierRating,\n      isMyCharacter,\n      id: c.id,\n    };\n  });\n\n  return (\n    <div className=\"leaderboard\">\n      <div className=\"content-wrapper\">\n        <div className=\"header\">Leaderboard</div>\n\n        <div className='modal_table'>\n          <Table horizontalSpacing=\"md\" verticalSpacing=\"md\" >\n            <Table.Thead>\n              <Table.Tr>\n                {[\n                  'Rating',\n                  'Name',\n                  'Level',\n                  'Owner ID',\n                ].map((header, idx) => {\n                  return (\n                    <Table.Th\n                      key={header}\n                      w={CELL_WIDTH[idx]}\n                      ta={TEXT_ALIGN[idx]}\n                    >\n                      {header}\n                    </Table.Th>\n                  );\n                })}\n              </Table.Tr>\n            </Table.Thead>\n            <Table.Tbody>\n              {inProgressRows.map((row) => {\n                return (\n                  <Table.Tr\n                    // onClick={() => {\n                    //   const [lobbyId, battleId] = row.battleId.split('-') as [string, string | undefined];\n                    //   navigate(newRoutes.tournamentResult({ lobbyId, battleId }));\n                    // }}\n                    className={['table_row', row.isMyCharacter ? 'table_row_highlighted' : ''].join(' ')}\n                    key={row.ownerId}\n                    style={{\n                      cursor: 'pointer',\n                    }}\n                    onClick={() => {\n                      navigate(routes.profile(String(row.id)));\n                    }}\n                  >\n                    {[\n                      /* Rating */\n                      <Box className={'badge'} >{row.rating}</Box>,\n                      /* Name */\n                      <Text size=\"md\"> {row.name}</Text>,\n                      /* Level */\n                      <div className={'badge'}>{row.level}</div>,\n                      /* Owner ID */\n                      <div title={row.ownerId}>{getShortIdString(row.ownerId)}</div>,\n                    ].map((cellContent, idx) => {\n                      return (\n                        <Table.Td\n                          key={idx}\n                          w={CELL_WIDTH[idx]}\n                          ta={TEXT_ALIGN[idx]}\n\n                        >\n                          <Box h=\"2rem\">\n                            {cellContent}\n                          </Box>\n                        </Table.Td>\n                      );\n                    })}\n\n                  </Table.Tr>);\n              })}\n              {ROWS_MIN - inProgressRows.length &&\n                /**\n                 * This is needed to keep the table rows height consistent\n                 */\n                (\n                  <Table.Tr>\n                    <Table.Td colSpan={4} >\n\n                    </Table.Td>\n                  </Table.Tr>\n                )\n              }\n            </Table.Tbody>\n          </Table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst CELL_WIDTH = {\n  0: '10%',\n  1: '30%',\n  // 2: '100px',\n  3: '40%'\n};\n\nconst TEXT_ALIGN = {\n  0: 'center',\n  1: 'left',\n  2: 'center',\n};\n","import { createSafeContext, GetStylesApi } from '../../core';\nimport type { TableFactory } from './Table';\n\nexport interface TableContextValue {\n  getStyles: GetStylesApi<TableFactory>;\n  stickyHeader: boolean | undefined;\n  striped: 'odd' | 'even' | undefined;\n  highlightOnHover: boolean | undefined;\n  withColumnBorders: boolean | undefined;\n  withRowBorders: boolean | undefined;\n  captionSide: 'top' | 'bottom';\n}\n\nexport const [TableProvider, useTableContext] = createSafeContext<TableContextValue>(\n  'Table component was not found in the tree'\n);\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  FactoryPayload,\n  useProps,\n} from '../../core';\nimport type { TableFactory } from './Table';\nimport { TableContextValue, useTableContext } from './Table.context';\nimport classes from './Table.module.css';\n\nexport interface TableElementProps<Selector extends string>\n  extends BoxProps,\n    CompoundStylesApiProps<Omit<TableFactory, 'stylesNames'> & { stylesNames: Selector }> {}\n\nexport interface TableThProps extends TableElementProps<'th'>, ElementProps<'th'> {}\nexport interface TableTdProps extends TableElementProps<'td'>, ElementProps<'td'> {}\nexport interface TableTrProps extends TableElementProps<'tr'>, ElementProps<'tr'> {}\nexport interface TableTheadProps extends TableElementProps<'thead'>, ElementProps<'thead'> {}\nexport interface TableTbodyProps extends TableElementProps<'tbody'>, ElementProps<'tbody'> {}\nexport interface TableTfootProps extends TableElementProps<'tfoot'>, ElementProps<'tfoot'> {}\nexport interface TableCaptionProps extends TableElementProps<'caption'>, ElementProps<'caption'> {}\n\nexport type TableThFactory = Factory<{\n  props: TableThProps;\n  ref: HTMLTableCellElement;\n  stylesNames: 'th';\n  compound: true;\n}>;\n\nexport type TableTdFactory = Factory<{\n  props: TableTdProps;\n  ref: HTMLTableCellElement;\n  stylesNames: 'td';\n  compound: true;\n}>;\n\nexport type TableTrFactory = Factory<{\n  props: TableTrProps;\n  ref: HTMLTableRowElement;\n  stylesNames: 'tr';\n  compound: true;\n}>;\n\nexport type TableTheadFactory = Factory<{\n  props: TableTheadProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'thead';\n  compound: true;\n}>;\n\nexport type TableTbodyFactory = Factory<{\n  props: TableTbodyProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'tbody';\n  compound: true;\n}>;\n\nexport type TableTfootFactory = Factory<{\n  props: TableTfootProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'tfoot';\n  compound: true;\n}>;\n\nexport type TableCaptionFactory = Factory<{\n  props: TableCaptionProps;\n  ref: HTMLTableCaptionElement;\n  stylesNames: 'caption';\n  compound: true;\n}>;\n\ninterface TableElementOptions {\n  columnBorder?: true;\n  rowBorder?: true;\n  striped?: true;\n  highlightOnHover?: true;\n  captionSide?: true;\n  stickyHeader?: true;\n}\n\nfunction getDataAttributes(ctx: TableContextValue, options?: TableElementOptions) {\n  if (!options) {\n    return undefined;\n  }\n\n  const data: Record<string, boolean | string> = {};\n\n  if (options.columnBorder && ctx.withColumnBorders) {\n    data['data-with-column-border'] = true;\n  }\n\n  if (options.rowBorder && ctx.withRowBorders) {\n    data['data-with-row-border'] = true;\n  }\n\n  if (options.striped && ctx.striped) {\n    data['data-striped'] = ctx.striped;\n  }\n\n  if (options.highlightOnHover && ctx.highlightOnHover) {\n    data['data-hover'] = true;\n  }\n\n  if (options.captionSide && ctx.captionSide) {\n    data['data-side'] = ctx.captionSide;\n  }\n\n  if (options.stickyHeader && ctx.stickyHeader) {\n    data['data-sticky'] = true;\n  }\n\n  return data;\n}\n\nexport function tableElement<Factory extends FactoryPayload>(\n  element: 'th' | 'td' | 'tr' | 'thead' | 'tbody' | 'tfoot' | 'caption',\n  options?: TableElementOptions\n) {\n  const name = `Table${element.charAt(0).toUpperCase()}${element.slice(1)}`;\n  const Component = factory<Factory>((_props, ref) => {\n    const props = useProps(name, {}, _props);\n    const { classNames, className, style, styles, ...others } = props;\n\n    const ctx = useTableContext();\n\n    return (\n      <Box\n        component={element}\n        ref={ref}\n        {...getDataAttributes(ctx, options)}\n        {...ctx.getStyles(element, { className, classNames, style, styles, props })}\n        {...others}\n      />\n    );\n  });\n\n  Component.displayName = `@mantine/core/${name}`;\n  Component.classes = classes;\n  return Component;\n}\n\nexport const TableTh = tableElement<TableThFactory>('th', { columnBorder: true });\nexport const TableTd = tableElement<TableTdFactory>('td', { columnBorder: true });\nexport const TableTr = tableElement<TableTrFactory>('tr', {\n  rowBorder: true,\n  striped: true,\n  highlightOnHover: true,\n});\nexport const TableThead = tableElement<TableTheadFactory>('thead', { stickyHeader: true });\nexport const TableTbody = tableElement<TableTbodyFactory>('tbody');\nexport const TableTfoot = tableElement<TableTfootFactory>('tfoot');\nexport const TableCaption = tableElement<TableCaptionFactory>('caption', { captionSide: true });\n","import React from 'react';\nimport type { TableData } from './Table';\nimport {\n  TableCaption,\n  TableTbody,\n  TableTd,\n  TableTfoot,\n  TableTh,\n  TableThead,\n  TableTr,\n} from './Table.components';\n\nexport interface TableDataRendererProps {\n  data: TableData;\n}\n\nexport function TableDataRenderer({ data }: TableDataRendererProps) {\n  return (\n    <>\n      {data.caption && <TableCaption>{data.caption}</TableCaption>}\n\n      {data.head && (\n        <TableThead>\n          <TableTr>\n            {data.head.map((item, index) => (\n              <TableTh key={index}>{item}</TableTh>\n            ))}\n          </TableTr>\n        </TableThead>\n      )}\n\n      {data.body && (\n        <TableTbody>\n          {data.body.map((row, rowIndex) => (\n            <TableTr key={rowIndex}>\n              {row.map((item, index) => (\n                <TableTd key={index}>{item}</TableTd>\n              ))}\n            </TableTr>\n          ))}\n        </TableTbody>\n      )}\n\n      {data.foot && (\n        <TableTfoot>\n          <TableTr>\n            {data.foot.map((item, index) => (\n              <TableTh key={index}>{item}</TableTh>\n            ))}\n          </TableTr>\n        </TableTfoot>\n      )}\n    </>\n  );\n}\n\nTableDataRenderer.displayName = '@mantine/core/TableDataRenderer';\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { ScrollArea } from '../ScrollArea';\nimport classes from './Table.module.css';\n\nexport type TableScrollContainerStylesNames = 'scrollContainer' | 'scrollContainerInner';\nexport type TableScrollContainerCssVariables = {\n  scrollContainer: '--table-min-width' | '--table-overflow';\n};\n\nexport interface TableScrollContainerProps\n  extends BoxProps,\n    StylesApiProps<TableScrollContainerFactory>,\n    ElementProps<'div'> {\n  /** `min-width` of the `Table` at which it should become scrollable */\n  minWidth: React.CSSProperties['minWidth'];\n\n  /** Type of the scroll container, `native` to use native scrollbars, `scrollarea` to use `ScrollArea` component, `scrollarea` by default */\n  type?: 'native' | 'scrollarea';\n}\n\nexport type TableScrollContainerFactory = Factory<{\n  props: TableScrollContainerProps;\n  ref: HTMLDivElement;\n  stylesNames: TableScrollContainerStylesNames;\n  vars: TableScrollContainerCssVariables;\n}>;\n\nconst defaultProps: Partial<TableScrollContainerProps> = {\n  type: 'scrollarea',\n};\n\nconst varsResolver = createVarsResolver<TableScrollContainerFactory>((_, { minWidth, type }) => ({\n  scrollContainer: {\n    '--table-min-width': rem(minWidth),\n    '--table-overflow': type === 'native' ? 'auto' : undefined,\n  },\n}));\n\nexport const TableScrollContainer = factory<TableScrollContainerFactory>((_props, ref) => {\n  const props = useProps('TableScrollContainer', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    minWidth,\n    type,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<TableScrollContainerFactory>({\n    name: 'TableScrollContainer',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n    rootSelector: 'scrollContainer',\n  });\n\n  return (\n    <Box<any>\n      component={type === 'scrollarea' ? ScrollArea : 'div'}\n      {...(type === 'scrollarea' ? { offsetScrollbars: 'x' } : {})}\n      ref={ref}\n      {...getStyles('scrollContainer')}\n      {...others}\n    >\n      <div {...getStyles('scrollContainerInner')}>{children}</div>\n    </Box>\n  );\n});\n\nTableScrollContainer.classes = classes;\nTableScrollContainer.displayName = '@mantine/core/TableScrollContainer';\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getSpacing,\n  getThemeColor,\n  MantineColor,\n  MantineSpacing,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport {\n  TableCaption,\n  TableTbody,\n  TableTd,\n  TableTfoot,\n  TableTh,\n  TableThead,\n  TableTr,\n} from './Table.components';\nimport { TableProvider } from './Table.context';\nimport { TableDataRenderer } from './TableDataRenderer';\nimport { TableScrollContainer } from './TableScrollContainer';\nimport classes from './Table.module.css';\n\nexport type TableStylesNames =\n  | 'table'\n  | 'thead'\n  | 'tbody'\n  | 'tfoot'\n  | 'tr'\n  | 'th'\n  | 'td'\n  | 'caption';\n\nexport type TableCssVariables = {\n  table:\n    | '--table-layout'\n    | '--table-border-color'\n    | '--table-caption-side'\n    | '--table-horizontal-spacing'\n    | '--table-vertical-spacing'\n    | '--table-striped-color'\n    | '--table-highlight-on-hover-color'\n    | '--table-sticky-header-offset';\n};\n\nexport interface TableData {\n  head?: React.ReactNode[];\n  body?: React.ReactNode[][];\n  foot?: React.ReactNode[];\n  caption?: string;\n}\n\nexport interface TableProps extends BoxProps, StylesApiProps<TableFactory>, ElementProps<'table'> {\n  /** Value of `table-layout` style, `auto` by default */\n  layout?: React.CSSProperties['tableLayout'];\n\n  /** Determines on which side `Table.Caption` is displayed, `bottom` by default */\n  captionSide?: 'top' | 'bottom';\n\n  /** Color of table borders, key of `theme.colors` or any valid CSS color */\n  borderColor?: MantineColor;\n\n  /** Determines whether the table should have outer border, `false` by default */\n  withTableBorder?: boolean;\n\n  /** Determines whether the table should have borders between columns, `false` by default */\n  withColumnBorders?: boolean;\n\n  /** Determines whether the table should have borders between rows, `true` by default */\n  withRowBorders?: boolean;\n\n  /** Horizontal cells spacing, key of `theme.spacing` or any valid CSS value for padding, numbers are converted to rem, default value is `xs` */\n  horizontalSpacing?: MantineSpacing;\n\n  /** Vertical cells spacing, key of `theme.spacing` or any valid CSS value for padding, numbers are converted to rem, default value is `xs` */\n  verticalSpacing?: MantineSpacing;\n\n  /** Determines whether every odd/even row background should be changed to `strippedColor`, if set to `true`, then `odd` value will be used, `false` by default  */\n  striped?: boolean | 'odd' | 'even';\n\n  /** Background color of striped rows, key of `theme.colors` or any valid CSS color */\n  stripedColor?: MantineColor;\n\n  /** Determines whether table rows background should change to `highlightOnHoverColor` when hovered, `false` by default */\n  highlightOnHover?: boolean;\n\n  /** Background color of table rows when hovered, key of `theme.colors` or any valid CSS color */\n  highlightOnHoverColor?: MantineColor;\n\n  /** Data that should be used to generate table, ignored if `children` prop is set */\n  data?: TableData;\n\n  /** Determines whether `Table.Thead` should be sticky, `false` by default */\n  stickyHeader?: boolean;\n\n  /** Offset from top at which `Table.Thead` should become sticky, `0` by default */\n  stickyHeaderOffset?: number | string;\n}\n\nexport type TableFactory = Factory<{\n  props: TableProps;\n  ref: HTMLTableElement;\n  stylesNames: TableStylesNames;\n  vars: TableCssVariables;\n  staticComponents: {\n    Thead: typeof TableThead;\n    Tbody: typeof TableTbody;\n    Tfoot: typeof TableTfoot;\n    Td: typeof TableTd;\n    Th: typeof TableTh;\n    Tr: typeof TableTr;\n    Caption: typeof TableCaption;\n    ScrollContainer: typeof TableScrollContainer;\n    DataRenderer: typeof TableDataRenderer;\n  };\n}>;\n\nconst defaultProps: Partial<TableProps> = {\n  withRowBorders: true,\n  verticalSpacing: 7,\n};\n\nconst varsResolver = createVarsResolver<TableFactory>(\n  (\n    theme,\n    {\n      layout,\n      captionSide,\n      horizontalSpacing,\n      verticalSpacing,\n      borderColor,\n      stripedColor,\n      highlightOnHoverColor,\n      striped,\n      highlightOnHover,\n      stickyHeaderOffset,\n      stickyHeader,\n    }\n  ) => ({\n    table: {\n      '--table-layout': layout,\n      '--table-caption-side': captionSide,\n      '--table-horizontal-spacing': getSpacing(horizontalSpacing),\n      '--table-vertical-spacing': getSpacing(verticalSpacing),\n      '--table-border-color': borderColor ? getThemeColor(borderColor, theme) : undefined,\n      '--table-striped-color':\n        striped && stripedColor ? getThemeColor(stripedColor, theme) : undefined,\n      '--table-highlight-on-hover-color':\n        highlightOnHover && highlightOnHoverColor\n          ? getThemeColor(highlightOnHoverColor, theme)\n          : undefined,\n      '--table-sticky-header-offset': stickyHeader ? rem(stickyHeaderOffset) : undefined,\n    },\n  })\n);\n\nexport const Table = factory<TableFactory>((_props, ref) => {\n  const props = useProps('Table', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    horizontalSpacing,\n    verticalSpacing,\n    captionSide,\n    stripedColor,\n    highlightOnHoverColor,\n    striped,\n    highlightOnHover,\n    withColumnBorders,\n    withRowBorders,\n    withTableBorder,\n    borderColor,\n    layout,\n    variant,\n    data,\n    children,\n    stickyHeader,\n    stickyHeaderOffset,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<TableFactory>({\n    name: 'Table',\n    props,\n    className,\n    style,\n    classes,\n    classNames,\n    styles,\n    unstyled,\n    rootSelector: 'table',\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <TableProvider\n      value={{\n        getStyles,\n        stickyHeader,\n        striped: striped === true ? 'odd' : striped || undefined,\n        highlightOnHover,\n        withColumnBorders,\n        withRowBorders,\n        captionSide: captionSide || 'bottom',\n      }}\n    >\n      <Box\n        component=\"table\"\n        variant={variant}\n        ref={ref}\n        mod={{ 'data-with-table-border': withTableBorder }}\n        {...getStyles('table')}\n        {...others}\n      >\n        {children || (!!data && <TableDataRenderer data={data} />)}\n      </Box>\n    </TableProvider>\n  );\n});\n\nTable.classes = classes;\nTable.displayName = '@mantine/core/Table';\nTable.Td = TableTd;\nTable.Th = TableTh;\nTable.Tr = TableTr;\nTable.Thead = TableThead;\nTable.Tbody = TableTbody;\nTable.Tfoot = TableTfoot;\nTable.Caption = TableCaption;\nTable.ScrollContainer = TableScrollContainer;\nTable.DataRenderer = TableDataRenderer;\n"],"names":["Leaderboard","navigate","useNavigate","myAccountId","useMyAccountId","data","mintState","useMintState","variables","metadata","MINT_METADATA","programId","MINT_PROGRAM_ID","characters","inProgressRows","useMemo","Object","entries","sort","_ref","_ref2","c1","c2","attributes","tierRating","map","_ref3","ownerId","c","isMyCharacter","name","level","exp","experience","rating","id","_jsx","className","children","_jsxs","Table","horizontalSpacing","verticalSpacing","Thead","Tr","header","idx","Th","w","CELL_WIDTH","ta","TEXT_ALIGN","Tbody","row","join","style","cursor","onClick","routes","profile","String","Box","Text","size","title","getShortIdString","cellContent","Td","h","length","colSpan","TableProvider","useTableContext","createSafeContext","getDataAttributes","ctx","options","columnBorder","withColumnBorders","rowBorder","withRowBorders","striped","highlightOnHover","captionSide","stickyHeader","tableElement","element","charAt","toUpperCase","slice","Component","factory","_props","ref","props","useProps","classNames","styles","others","React","component","getStyles","displayName","classes","TableTh","TableTd","TableTr","TableThead","TableTbody","TableTfoot","TableCaption","TableDataRenderer","caption","head","item","index","key","body","rowIndex","foot","defaultProps","type","varsResolver","createVarsResolver","_","minWidth","scrollContainer","rem","TableScrollContainer","unstyled","vars","useStyles","rootSelector","ScrollArea","offsetScrollbars","theme","layout","borderColor","stripedColor","highlightOnHoverColor","stickyHeaderOffset","table","getSpacing","getThemeColor","withTableBorder","variant","value","mod","Tfoot","Caption","ScrollContainer","DataRenderer"],"sourceRoot":""}