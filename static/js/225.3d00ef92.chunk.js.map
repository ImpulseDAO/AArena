{"version":3,"file":"static/js/225.3d00ef92.chunk.js","mappings":"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","sources":["app/api/characters.ts","app/api/mintState.ts","app/api/queryMiddleware/withApi.ts","hooks/hooks.ts","pages/Leaderboard/Leaderboard.tsx","../node_modules/@mantine/core/src/components/Table/Table.context.ts","../node_modules/@mantine/core/src/components/Table/Table.components.tsx","../node_modules/@mantine/core/src/components/Table/TableDataRenderer.tsx","../node_modules/@mantine/core/src/components/Table/TableScrollContainer.tsx","../node_modules/@mantine/core/src/components/Table/Table.tsx","../node_modules/@mantine/core/src/components/Text/Text.tsx"],"sourcesContent":["import { useAccount } from \"@gear-js/react-hooks\";\nimport { graphql } from \"gql/gql\";\nimport {\n  getGraphQLPrimaryKey,\n  useGraphQL,\n} from \"app/providers/ReactQuery/useGraphQL\";\nimport { UseQueryResult } from \"@tanstack/react-query\";\nimport { queryClient } from \"app/providers/ReactQuery\";\n\nconst allCharactersQueryDocument = graphql(/* GraphQL */ `\n  query AllCharacters {\n    characters {\n      id\n      level\n      name\n      owner\n      experience\n      attributes\n    }\n  }\n`);\n\nexport const useAllCharacters = () => useGraphQL(allCharactersQueryDocument);\n\nconst charactersByOwnerQueryDocument = graphql(/* GraphQL */ `\n  query CharactersByOwner($owner_eq: String!) {\n    characters(where: { owner_eq: $owner_eq }) {\n      id\n      level\n      name\n      owner\n      experience\n      attributes\n    }\n  }\n`);\n\nexport const resetUseMyCharacrersQuery = () => {\n  const primaryKey = getGraphQLPrimaryKey(charactersByOwnerQueryDocument);\n\n  queryClient.invalidateQueries({ queryKey: [primaryKey] });\n};\n\nexport const useMyCharacters = ({ owner_eq }: { owner_eq: string }) => {\n  return useGraphQL(charactersByOwnerQueryDocument, {\n    owner_eq,\n  });\n};\n\nexport const useMyCharacter = () => {\n  const { account } = useAccount();\n  const queryResult = useMyCharacters({\n    owner_eq: account?.decodedAddress ?? \"\",\n  });\n\n  const myCharacters = queryResult.data;\n\n  return {\n    ...queryResult,\n    data: myCharacters?.characters[\n      myCharacters?.characters.length - 1\n    ] as Character,\n  };\n};\n\nconst characterByIdQueryDocument = graphql(/* GraphQL */ `\n  query CharacterById($character_id: String!) {\n    characterById(id: $character_id) {\n      attributes\n      experience\n      id\n      level\n      name\n      owner\n    }\n  }\n`);\n\nexport const useCharacterById = ({ id }: { id: string }) => {\n  return useGraphQL(characterByIdQueryDocument, {\n    character_id: id,\n  }) as UseQueryResult<Character>;\n};\n","import { GearApi, ProgramMetadata } from \"@gear-js/api\";\nimport { MINT_METADATA, MINT_PROGRAM_ID } from \"consts\";\nimport { useMyAccountId } from \"hooks/hooks\";\n\nimport { createQuery } from \"react-query-kit\";\nimport { withApi } from \"./queryMiddleware/withApi\";\nimport { useMyCharacters } from \"./characters\";\n\ntype OwnerId = HexString;\n\nexport const useMintState = createQuery<\n  {\n    characters: Record<OwnerId, CharacterInContractState>;\n  },\n  {\n    programId: HexString;\n    metadata: string;\n  }\n>({\n  use: [withApi],\n  queryKey: [\"mintProgramState\"],\n  fetcher: async ({ programId, metadata }, context) => {\n    const mintMetadata = ProgramMetadata.from(metadata);\n    const api = context.meta?.api as GearApi | undefined;\n\n    const mintState = await api?.programState.read(\n      { programId, payload: undefined },\n      mintMetadata\n    );\n    return mintState?.toJSON() as {\n      characters: Record<OwnerId, CharacterInContractState>;\n    };\n  },\n});\n\n/**\n * This is a workaround until we have working indexer\n */\nexport const useMyCharacterFromContractState = () => {\n  const accountId = useMyAccountId();\n  const queryResult = useMintState({\n    variables: {\n      metadata: MINT_METADATA,\n      programId: MINT_PROGRAM_ID,\n    },\n    select: (state) => {\n      return state.characters?.[(accountId ?? \"\") as OwnerId] ?? null;\n    },\n  });\n\n  return queryResult;\n};\n\nexport const useMyHeroIsDead = () => {\n  const owner_eq = useMyAccountId() ?? \"\";\n  const { data: myCharacters } = useMyCharacters({ owner_eq });\n  const { data: myCharacter } = useMyCharacterFromContractState();\n\n  return {\n    isDead: myCharacters?.characters.length !== 0 && !myCharacter,\n    // isFresh means that we don't have any characters yet\n    isFresh: myCharacters?.characters.length === 0,\n  };\n};\n","import { useApi } from \"@gear-js/react-hooks\";\nimport { Middleware } from \"react-query-kit\";\n\nexport const withApi: Middleware = (useQueryNext) => {\n  return (options) => {\n    const { api } = useApi();\n\n    return useQueryNext({\n      ...options,\n      meta: {\n        ...options.meta,\n        api,\n      },\n    });\n  };\n};\n","/**\n * I didn't want to name this file \"index.ts\" and named it \"hooks.ts\" instead\n * so that it's easier to open from vscode search menu cmd+P menu\n */\n\nimport { useAccount } from \"@gear-js/react-hooks\";\n\nexport const useMyAccountId = () => {\n  const { account } = useAccount();\n  return account?.decodedAddress;\n};\n","import { useMemo } from \"react\";\nimport \"./styles.scss\";\nimport { useMintState } from \"app/api/mintState\";\nimport { MINT_METADATA, MINT_PROGRAM_ID } from \"consts\";\nimport { Table, Text } from \"@mantine/core\";\nimport { getShortIdString } from \"utils\";\nimport { useMyAccountId } from \"hooks/hooks\";\n\nexport const Leaderboard = () => {\n  const myAccountId = useMyAccountId();\n\n  const { data: mintState } = useMintState({\n    variables: {\n      metadata: MINT_METADATA,\n      programId: MINT_PROGRAM_ID\n    }\n  });\n\n  const { characters } = mintState ?? { characters: {} };\n\n  const entries = useMemo(() => {\n    return Object.entries(characters).sort(([, c1], [, c2]) => {\n      return (c1.attributes.tierRating - c2.attributes.tierRating) * -1;\n    });\n  }, [characters]);\n\n\n  const inProgressRows = entries.map(([ownerId, c]) => {\n    const isMyCharacter = ownerId === myAccountId;\n\n    return {\n      name: c.name,\n      level: c.level,\n      exp: c.experience,\n      ownerId,\n      rating: c.attributes.tierRating,\n      isMyCharacter,\n    };\n  });\n\n  return (\n    <div className=\"leaderboard\">\n      <div className=\"content-wrapper\">\n        <div className=\"header\">Leaderboard</div>\n\n        <div className='modal_table'>\n          <Table horizontalSpacing=\"md\" verticalSpacing=\"md\" >\n            <Table.Thead>\n              <Table.Tr>\n                {[\n                  'Rating',\n                  'Name',\n                  'Level',\n                  'Owner ID',\n                ].map((header, idx) => {\n                  return (\n                    <Table.Th\n                      key={header}\n                      w={CELL_WIDTH[idx]}\n                      ta={TEXT_ALIGN[idx]}\n                    >\n                      {header}\n                    </Table.Th>\n                  );\n                })}\n              </Table.Tr>\n            </Table.Thead>\n            <Table.Tbody>{inProgressRows.map((row) => {\n              return (\n                <Table.Tr\n                  // onClick={() => {\n                  //   const [lobbyId, battleId] = row.battleId.split('-') as [string, string | undefined];\n                  //   navigate(newRoutes.tournamentResult({ lobbyId, battleId }));\n                  // }}\n                  className={['table_row', row.isMyCharacter ? 'table_row_highlighted' : ''].join(' ')}\n                  key={row.ownerId}\n                >\n                  {[\n                    /* Rating */\n                    <div className={'badge'}>{row.rating}</div>,\n                    /* Name */\n                    <Text size=\"md\"> {row.name}</Text>,\n                    /* Level */\n                    <div className={'badge'}>{row.level}</div>,\n                    /* Owner ID */\n                    <div title={row.ownerId}>{getShortIdString(row.ownerId)}</div>,\n                  ].map((cellContent, idx) => {\n                    return (\n                      <Table.Td\n                        key={idx}\n                        w={CELL_WIDTH[idx]}\n                        ta={TEXT_ALIGN[idx]}\n                      >\n                        {cellContent}\n                      </Table.Td>\n                    );\n                  })}\n\n                </Table.Tr>);\n            })}</Table.Tbody>\n          </Table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst CELL_WIDTH = {\n  0: '10%',\n  1: '30%',\n  // 2: '100px',\n  3: '40%'\n};\n\nconst TEXT_ALIGN = {\n  0: 'center',\n  1: 'left',\n  2: 'center',\n};\n","import { createSafeContext, GetStylesApi } from '../../core';\nimport type { TableFactory } from './Table';\n\nexport interface TableContextValue {\n  getStyles: GetStylesApi<TableFactory>;\n  stickyHeader: boolean | undefined;\n  striped: 'odd' | 'even' | undefined;\n  highlightOnHover: boolean | undefined;\n  withColumnBorders: boolean | undefined;\n  withRowBorders: boolean | undefined;\n  captionSide: 'top' | 'bottom';\n}\n\nexport const [TableProvider, useTableContext] = createSafeContext<TableContextValue>(\n  'Table component was not found in the tree'\n);\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  FactoryPayload,\n  useProps,\n} from '../../core';\nimport type { TableFactory } from './Table';\nimport { TableContextValue, useTableContext } from './Table.context';\nimport classes from './Table.module.css';\n\nexport interface TableElementProps<Selector extends string>\n  extends BoxProps,\n    CompoundStylesApiProps<Omit<TableFactory, 'stylesNames'> & { stylesNames: Selector }> {}\n\nexport interface TableThProps extends TableElementProps<'th'>, ElementProps<'th'> {}\nexport interface TableTdProps extends TableElementProps<'td'>, ElementProps<'td'> {}\nexport interface TableTrProps extends TableElementProps<'tr'>, ElementProps<'tr'> {}\nexport interface TableTheadProps extends TableElementProps<'thead'>, ElementProps<'thead'> {}\nexport interface TableTbodyProps extends TableElementProps<'tbody'>, ElementProps<'tbody'> {}\nexport interface TableTfootProps extends TableElementProps<'tfoot'>, ElementProps<'tfoot'> {}\nexport interface TableCaptionProps extends TableElementProps<'caption'>, ElementProps<'caption'> {}\n\nexport type TableThFactory = Factory<{\n  props: TableThProps;\n  ref: HTMLTableCellElement;\n  stylesNames: 'th';\n  compound: true;\n}>;\n\nexport type TableTdFactory = Factory<{\n  props: TableTdProps;\n  ref: HTMLTableCellElement;\n  stylesNames: 'td';\n  compound: true;\n}>;\n\nexport type TableTrFactory = Factory<{\n  props: TableTrProps;\n  ref: HTMLTableRowElement;\n  stylesNames: 'tr';\n  compound: true;\n}>;\n\nexport type TableTheadFactory = Factory<{\n  props: TableTheadProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'thead';\n  compound: true;\n}>;\n\nexport type TableTbodyFactory = Factory<{\n  props: TableTbodyProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'tbody';\n  compound: true;\n}>;\n\nexport type TableTfootFactory = Factory<{\n  props: TableTfootProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'tfoot';\n  compound: true;\n}>;\n\nexport type TableCaptionFactory = Factory<{\n  props: TableCaptionProps;\n  ref: HTMLTableCaptionElement;\n  stylesNames: 'caption';\n  compound: true;\n}>;\n\ninterface TableElementOptions {\n  columnBorder?: true;\n  rowBorder?: true;\n  striped?: true;\n  highlightOnHover?: true;\n  captionSide?: true;\n  stickyHeader?: true;\n}\n\nfunction getDataAttributes(ctx: TableContextValue, options?: TableElementOptions) {\n  if (!options) {\n    return undefined;\n  }\n\n  const data: Record<string, boolean | string> = {};\n\n  if (options.columnBorder && ctx.withColumnBorders) {\n    data['data-with-column-border'] = true;\n  }\n\n  if (options.rowBorder && ctx.withRowBorders) {\n    data['data-with-row-border'] = true;\n  }\n\n  if (options.striped && ctx.striped) {\n    data['data-striped'] = ctx.striped;\n  }\n\n  if (options.highlightOnHover && ctx.highlightOnHover) {\n    data['data-hover'] = true;\n  }\n\n  if (options.captionSide && ctx.captionSide) {\n    data['data-side'] = ctx.captionSide;\n  }\n\n  if (options.stickyHeader && ctx.stickyHeader) {\n    data['data-sticky'] = true;\n  }\n\n  return data;\n}\n\nexport function tableElement<Factory extends FactoryPayload>(\n  element: 'th' | 'td' | 'tr' | 'thead' | 'tbody' | 'tfoot' | 'caption',\n  options?: TableElementOptions\n) {\n  const name = `Table${element.charAt(0).toUpperCase()}${element.slice(1)}`;\n  const Component = factory<Factory>((_props, ref) => {\n    const props = useProps(name, {}, _props);\n    const { classNames, className, style, styles, ...others } = props;\n\n    const ctx = useTableContext();\n\n    return (\n      <Box\n        component={element}\n        ref={ref}\n        {...getDataAttributes(ctx, options)}\n        {...ctx.getStyles(element, { className, classNames, style, styles, props })}\n        {...others}\n      />\n    );\n  });\n\n  Component.displayName = `@mantine/core/${name}`;\n  Component.classes = classes;\n  return Component;\n}\n\nexport const TableTh = tableElement<TableThFactory>('th', { columnBorder: true });\nexport const TableTd = tableElement<TableTdFactory>('td', { columnBorder: true });\nexport const TableTr = tableElement<TableTrFactory>('tr', {\n  rowBorder: true,\n  striped: true,\n  highlightOnHover: true,\n});\nexport const TableThead = tableElement<TableTheadFactory>('thead', { stickyHeader: true });\nexport const TableTbody = tableElement<TableTbodyFactory>('tbody');\nexport const TableTfoot = tableElement<TableTfootFactory>('tfoot');\nexport const TableCaption = tableElement<TableCaptionFactory>('caption', { captionSide: true });\n","import React from 'react';\nimport type { TableData } from './Table';\nimport {\n  TableCaption,\n  TableTbody,\n  TableTd,\n  TableTfoot,\n  TableTh,\n  TableThead,\n  TableTr,\n} from './Table.components';\n\nexport interface TableDataRendererProps {\n  data: TableData;\n}\n\nexport function TableDataRenderer({ data }: TableDataRendererProps) {\n  return (\n    <>\n      {data.caption && <TableCaption>{data.caption}</TableCaption>}\n\n      {data.head && (\n        <TableThead>\n          <TableTr>\n            {data.head.map((item, index) => (\n              <TableTh key={index}>{item}</TableTh>\n            ))}\n          </TableTr>\n        </TableThead>\n      )}\n\n      {data.body && (\n        <TableTbody>\n          {data.body.map((row, rowIndex) => (\n            <TableTr key={rowIndex}>\n              {row.map((item, index) => (\n                <TableTd key={index}>{item}</TableTd>\n              ))}\n            </TableTr>\n          ))}\n        </TableTbody>\n      )}\n\n      {data.foot && (\n        <TableTfoot>\n          <TableTr>\n            {data.foot.map((item, index) => (\n              <TableTh key={index}>{item}</TableTh>\n            ))}\n          </TableTr>\n        </TableTfoot>\n      )}\n    </>\n  );\n}\n\nTableDataRenderer.displayName = '@mantine/core/TableDataRenderer';\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { ScrollArea } from '../ScrollArea';\nimport classes from './Table.module.css';\n\nexport type TableScrollContainerStylesNames = 'scrollContainer' | 'scrollContainerInner';\nexport type TableScrollContainerCssVariables = {\n  scrollContainer: '--table-min-width' | '--table-overflow';\n};\n\nexport interface TableScrollContainerProps\n  extends BoxProps,\n    StylesApiProps<TableScrollContainerFactory>,\n    ElementProps<'div'> {\n  /** `min-width` of the `Table` at which it should become scrollable */\n  minWidth: React.CSSProperties['minWidth'];\n\n  /** Type of the scroll container, `native` to use native scrollbars, `scrollarea` to use `ScrollArea` component, `scrollarea` by default */\n  type?: 'native' | 'scrollarea';\n}\n\nexport type TableScrollContainerFactory = Factory<{\n  props: TableScrollContainerProps;\n  ref: HTMLDivElement;\n  stylesNames: TableScrollContainerStylesNames;\n  vars: TableScrollContainerCssVariables;\n}>;\n\nconst defaultProps: Partial<TableScrollContainerProps> = {\n  type: 'scrollarea',\n};\n\nconst varsResolver = createVarsResolver<TableScrollContainerFactory>((_, { minWidth, type }) => ({\n  scrollContainer: {\n    '--table-min-width': rem(minWidth),\n    '--table-overflow': type === 'native' ? 'auto' : undefined,\n  },\n}));\n\nexport const TableScrollContainer = factory<TableScrollContainerFactory>((_props, ref) => {\n  const props = useProps('TableScrollContainer', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    minWidth,\n    type,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<TableScrollContainerFactory>({\n    name: 'TableScrollContainer',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n    rootSelector: 'scrollContainer',\n  });\n\n  return (\n    <Box<any>\n      component={type === 'scrollarea' ? ScrollArea : 'div'}\n      {...(type === 'scrollarea' ? { offsetScrollbars: 'x' } : {})}\n      ref={ref}\n      {...getStyles('scrollContainer')}\n      {...others}\n    >\n      <div {...getStyles('scrollContainerInner')}>{children}</div>\n    </Box>\n  );\n});\n\nTableScrollContainer.classes = classes;\nTableScrollContainer.displayName = '@mantine/core/TableScrollContainer';\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getSpacing,\n  getThemeColor,\n  MantineColor,\n  MantineSpacing,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport {\n  TableCaption,\n  TableTbody,\n  TableTd,\n  TableTfoot,\n  TableTh,\n  TableThead,\n  TableTr,\n} from './Table.components';\nimport { TableProvider } from './Table.context';\nimport { TableDataRenderer } from './TableDataRenderer';\nimport { TableScrollContainer } from './TableScrollContainer';\nimport classes from './Table.module.css';\n\nexport type TableStylesNames =\n  | 'table'\n  | 'thead'\n  | 'tbody'\n  | 'tfoot'\n  | 'tr'\n  | 'th'\n  | 'td'\n  | 'caption';\n\nexport type TableCssVariables = {\n  table:\n    | '--table-layout'\n    | '--table-border-color'\n    | '--table-caption-side'\n    | '--table-horizontal-spacing'\n    | '--table-vertical-spacing'\n    | '--table-striped-color'\n    | '--table-highlight-on-hover-color'\n    | '--table-sticky-header-offset';\n};\n\nexport interface TableData {\n  head?: React.ReactNode[];\n  body?: React.ReactNode[][];\n  foot?: React.ReactNode[];\n  caption?: string;\n}\n\nexport interface TableProps extends BoxProps, StylesApiProps<TableFactory>, ElementProps<'table'> {\n  /** Value of `table-layout` style, `auto` by default */\n  layout?: React.CSSProperties['tableLayout'];\n\n  /** Determines on which side `Table.Caption` is displayed, `bottom` by default */\n  captionSide?: 'top' | 'bottom';\n\n  /** Color of table borders, key of `theme.colors` or any valid CSS color */\n  borderColor?: MantineColor;\n\n  /** Determines whether the table should have outer border, `false` by default */\n  withTableBorder?: boolean;\n\n  /** Determines whether the table should have borders between columns, `false` by default */\n  withColumnBorders?: boolean;\n\n  /** Determines whether the table should have borders between rows, `true` by default */\n  withRowBorders?: boolean;\n\n  /** Horizontal cells spacing, key of `theme.spacing` or any valid CSS value for padding, numbers are converted to rem, default value is `xs` */\n  horizontalSpacing?: MantineSpacing;\n\n  /** Vertical cells spacing, key of `theme.spacing` or any valid CSS value for padding, numbers are converted to rem, default value is `xs` */\n  verticalSpacing?: MantineSpacing;\n\n  /** Determines whether every odd/even row background should be changed to `strippedColor`, if set to `true`, then `odd` value will be used, `false` by default  */\n  striped?: boolean | 'odd' | 'even';\n\n  /** Background color of striped rows, key of `theme.colors` or any valid CSS color */\n  stripedColor?: MantineColor;\n\n  /** Determines whether table rows background should change to `highlightOnHoverColor` when hovered, `false` by default */\n  highlightOnHover?: boolean;\n\n  /** Background color of table rows when hovered, key of `theme.colors` or any valid CSS color */\n  highlightOnHoverColor?: MantineColor;\n\n  /** Data that should be used to generate table, ignored if `children` prop is set */\n  data?: TableData;\n\n  /** Determines whether `Table.Thead` should be sticky, `false` by default */\n  stickyHeader?: boolean;\n\n  /** Offset from top at which `Table.Thead` should become sticky, `0` by default */\n  stickyHeaderOffset?: number | string;\n}\n\nexport type TableFactory = Factory<{\n  props: TableProps;\n  ref: HTMLTableElement;\n  stylesNames: TableStylesNames;\n  vars: TableCssVariables;\n  staticComponents: {\n    Thead: typeof TableThead;\n    Tbody: typeof TableTbody;\n    Tfoot: typeof TableTfoot;\n    Td: typeof TableTd;\n    Th: typeof TableTh;\n    Tr: typeof TableTr;\n    Caption: typeof TableCaption;\n    ScrollContainer: typeof TableScrollContainer;\n    DataRenderer: typeof TableDataRenderer;\n  };\n}>;\n\nconst defaultProps: Partial<TableProps> = {\n  withRowBorders: true,\n  verticalSpacing: 7,\n};\n\nconst varsResolver = createVarsResolver<TableFactory>(\n  (\n    theme,\n    {\n      layout,\n      captionSide,\n      horizontalSpacing,\n      verticalSpacing,\n      borderColor,\n      stripedColor,\n      highlightOnHoverColor,\n      striped,\n      highlightOnHover,\n      stickyHeaderOffset,\n      stickyHeader,\n    }\n  ) => ({\n    table: {\n      '--table-layout': layout,\n      '--table-caption-side': captionSide,\n      '--table-horizontal-spacing': getSpacing(horizontalSpacing),\n      '--table-vertical-spacing': getSpacing(verticalSpacing),\n      '--table-border-color': borderColor ? getThemeColor(borderColor, theme) : undefined,\n      '--table-striped-color':\n        striped && stripedColor ? getThemeColor(stripedColor, theme) : undefined,\n      '--table-highlight-on-hover-color':\n        highlightOnHover && highlightOnHoverColor\n          ? getThemeColor(highlightOnHoverColor, theme)\n          : undefined,\n      '--table-sticky-header-offset': stickyHeader ? rem(stickyHeaderOffset) : undefined,\n    },\n  })\n);\n\nexport const Table = factory<TableFactory>((_props, ref) => {\n  const props = useProps('Table', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    horizontalSpacing,\n    verticalSpacing,\n    captionSide,\n    stripedColor,\n    highlightOnHoverColor,\n    striped,\n    highlightOnHover,\n    withColumnBorders,\n    withRowBorders,\n    withTableBorder,\n    borderColor,\n    layout,\n    variant,\n    data,\n    children,\n    stickyHeader,\n    stickyHeaderOffset,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<TableFactory>({\n    name: 'Table',\n    props,\n    className,\n    style,\n    classes,\n    classNames,\n    styles,\n    unstyled,\n    rootSelector: 'table',\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <TableProvider\n      value={{\n        getStyles,\n        stickyHeader,\n        striped: striped === true ? 'odd' : striped || undefined,\n        highlightOnHover,\n        withColumnBorders,\n        withRowBorders,\n        captionSide: captionSide || 'bottom',\n      }}\n    >\n      <Box\n        component=\"table\"\n        variant={variant}\n        ref={ref}\n        mod={{ 'data-with-table-border': withTableBorder }}\n        {...getStyles('table')}\n        {...others}\n      >\n        {children || (!!data && <TableDataRenderer data={data} />)}\n      </Box>\n    </TableProvider>\n  );\n});\n\nTable.classes = classes;\nTable.displayName = '@mantine/core/Table';\nTable.Td = TableTd;\nTable.Th = TableTh;\nTable.Tr = TableTr;\nTable.Thead = TableThead;\nTable.Tbody = TableTbody;\nTable.Tfoot = TableTfoot;\nTable.Caption = TableCaption;\nTable.ScrollContainer = TableScrollContainer;\nTable.DataRenderer = TableDataRenderer;\n","import React from 'react';\nimport {\n  Box,\n  BoxMod,\n  BoxProps,\n  createVarsResolver,\n  getFontSize,\n  getGradient,\n  getLineHeight,\n  getThemeColor,\n  MantineColor,\n  MantineGradient,\n  MantineSize,\n  polymorphicFactory,\n  PolymorphicFactory,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Text.module.css';\n\ntype TextTruncate = 'end' | 'start' | boolean;\n\nfunction getTextTruncate(truncate: TextTruncate | undefined) {\n  if (truncate === 'start') {\n    return 'start';\n  }\n\n  if (truncate === 'end' || truncate) {\n    return 'end';\n  }\n\n  return undefined;\n}\n\nexport type TextStylesNames = 'root';\nexport type TextVariant = 'text' | 'gradient';\nexport type TextCssVariables = {\n  root: '--text-gradient' | '--text-line-clamp' | '--text-fz' | '--text-lh';\n};\n\nexport interface TextProps extends BoxProps, StylesApiProps<TextFactory> {\n  __staticSelector?: string;\n  mod?: BoxMod;\n\n  /** Controls `font-size` and `line-height`, `'md'` by default */\n  size?: MantineSize | (string & {});\n\n  /** Number of lines after which Text will be truncated */\n  lineClamp?: number;\n\n  /** Side on which Text must be truncated, if `true`, text is truncated from the start */\n  truncate?: TextTruncate;\n\n  /** Sets `line-height` to 1 for centering, `false` by default */\n  inline?: boolean;\n\n  /** Determines whether font properties should be inherited from the parent, `false` by default */\n  inherit?: boolean;\n\n  /** Gradient configuration, ignored when `variant` is not `gradient`, `theme.defaultGradient` by default */\n  gradient?: MantineGradient;\n\n  /** Shorthand for `component=\"span\"`, `false` by default, default root element is `p` */\n  span?: boolean;\n\n  /** @deprecated Use `c` prop instead */\n  color?: MantineColor;\n}\n\nexport type TextFactory = PolymorphicFactory<{\n  props: TextProps;\n  defaultComponent: 'p';\n  defaultRef: HTMLParagraphElement;\n  stylesNames: TextStylesNames;\n  vars: TextCssVariables;\n  variant: TextVariant;\n}>;\n\nconst defaultProps: Partial<TextProps> = {\n  inherit: false,\n};\n\nconst varsResolver = createVarsResolver<TextFactory>(\n  (theme, { variant, lineClamp, gradient, size, color }) => ({\n    root: {\n      '--text-fz': getFontSize(size),\n      '--text-lh': getLineHeight(size),\n      '--text-gradient': variant === 'gradient' ? getGradient(gradient, theme) : undefined,\n      '--text-line-clamp': typeof lineClamp === 'number' ? lineClamp.toString() : undefined,\n      '--text-color': color ? getThemeColor(color, theme) : undefined,\n    },\n  })\n);\n\nexport const Text = polymorphicFactory<TextFactory>((_props, ref) => {\n  const props = useProps('Text', defaultProps, _props);\n  const {\n    lineClamp,\n    truncate,\n    inline,\n    inherit,\n    gradient,\n    span,\n    __staticSelector,\n    vars,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    variant,\n    mod,\n    size,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<TextFactory>({\n    name: ['Text', __staticSelector],\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box\n      {...getStyles('root', { focusable: true })}\n      ref={ref}\n      component={span ? 'span' : 'p'}\n      variant={variant}\n      mod={[\n        {\n          'data-truncate': getTextTruncate(truncate),\n          'data-line-clamp': typeof lineClamp === 'number',\n          'data-inline': inline,\n          'data-inherit': inherit,\n        },\n        mod,\n      ]}\n      size={size}\n      {...others}\n    />\n  );\n});\n\nText.classes = classes;\nText.displayName = '@mantine/core/Text';\n"],"names":["graphql","charactersByOwnerQueryDocument","resetUseMyCharacrersQuery","primaryKey","getGraphQLPrimaryKey","queryClient","invalidateQueries","queryKey","useMyCharacters","_ref","owner_eq","useGraphQL","useMyCharacter","_account$decodedAddre","account","useAccount","queryResult","decodedAddress","myCharacters","data","characters","length","useMintState","createQuery","use","useQueryNext","options","api","useApi","meta","fetcher","async","context","_context$meta","programId","metadata","mintMetadata","ProgramMetadata","from","mintState","programState","read","payload","undefined","toJSON","useMyCharacterFromContractState","accountId","useMyAccountId","variables","MINT_METADATA","MINT_PROGRAM_ID","select","state","_state$characters","_state$characters2","useMyHeroIsDead","_useMyAccountId","myCharacter","isDead","isFresh","Leaderboard","myAccountId","inProgressRows","useMemo","Object","entries","sort","_ref2","c1","c2","attributes","tierRating","map","_ref3","ownerId","c","isMyCharacter","name","level","exp","experience","rating","_jsx","className","children","_jsxs","Table","horizontalSpacing","verticalSpacing","Thead","Tr","header","idx","Th","w","CELL_WIDTH","ta","TEXT_ALIGN","Tbody","row","join","Text","size","title","getShortIdString","cellContent","Td","TableProvider","useTableContext","createSafeContext","getDataAttributes","ctx","columnBorder","withColumnBorders","rowBorder","withRowBorders","striped","highlightOnHover","captionSide","stickyHeader","tableElement","element","charAt","toUpperCase","slice","Component","factory","_props","ref","props","useProps","classNames","style","styles","others","React","Box","component","getStyles","displayName","classes","TableTh","TableTd","TableTr","TableThead","TableTbody","TableTfoot","TableCaption","TableDataRenderer","caption","head","item","index","key","body","rowIndex","foot","defaultProps","type","varsResolver","createVarsResolver","_","minWidth","scrollContainer","rem","TableScrollContainer","unstyled","vars","useStyles","rootSelector","ScrollArea","offsetScrollbars","theme","layout","borderColor","stripedColor","highlightOnHoverColor","stickyHeaderOffset","table","getSpacing","getThemeColor","withTableBorder","variant","value","mod","Tfoot","Caption","ScrollContainer","DataRenderer","getTextTruncate","truncate","inherit","lineClamp","gradient","color","root","getFontSize","getLineHeight","getGradient","toString","polymorphicFactory","inline","span","__staticSelector","focusable"],"sourceRoot":""}