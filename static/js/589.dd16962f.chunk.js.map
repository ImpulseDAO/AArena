{"version":3,"file":"static/js/589.dd16962f.chunk.js","mappings":"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","sources":["components/Button/Button.tsx","components/Input/Input.tsx","pages/@shared/StatBar/StatBar.tsx","pages/MintCharacter/hooks/useWasmMetadata.ts","model/user.ts","components/ButtonGroup/ButtonGroup.tsx","components/TitleWithQuote/TitleWithQuote.tsx","pages/MintCharacter/components/SchoolOfMagicChoice.tsx","pages/MintCharacter/components/MintCharacterView.tsx","pages/MintCharacter/MintCharacter.tsx","pages/MintCharacter/hooks/useStats.ts","pages/MintCharacter/hooks/useOnSubmit.ts","pages/MintCharacter/hooks/useOnChange.ts"],"sourcesContent":["import React, {\n  ButtonHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  ReactNode,\n} from \"react\";\nimport \"./styles.scss\";\nimport clsx from \"clsx\";\n\nexport type ButtonProps = {\n  onClick?: VoidFunction;\n  children: ReactNode;\n  disabled?: boolean;\n  value?: string;\n  buttonProps?: DetailedHTMLProps<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n  className?: string;\n};\n\nexport const Button: FC<ButtonProps> = ({\n  onClick,\n  children,\n  disabled,\n  buttonProps,\n  className,\n}) => {\n  const classes = clsx(\"button\", className, { disabled });\n  return (\n    <button\n      {...buttonProps}\n      className={classes}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {children}\n    </button>\n  );\n};\n","import { ChangeEventHandler, FC, InputHTMLAttributes, memo } from \"react\";\nimport \"./styles.scss\";\n\nexport type InputProps = {\n  inputProps?: InputHTMLAttributes<HTMLInputElement>;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n  value: string;\n  placeholder?: string;\n  className?: string;\n  name?: string;\n};\n\nexport const Input: FC<InputProps> = memo(\n  ({ inputProps, onChange, value, placeholder, name }) => (\n    <div className=\"input_container\">\n      <input\n        {...inputProps}\n        className=\"input\"\n        onChange={onChange}\n        value={value}\n        placeholder={placeholder}\n        name={name}\n      />\n    </div>\n  )\n);\n","import React, { FC } from \"react\";\nimport \"./styles.scss\";\nimport { LIFES_INITIAL_QUANTITY } from \"consts\";\n\nexport type StatBarProps = {\n  lives?: number;\n  health: number | undefined;\n  healthMax?: number | undefined;\n  energy: number | undefined;\n  energyMax?: number | undefined;\n};\n\nexport const StatBar: FC<StatBarProps> = ({ lives, health, healthMax, energy, energyMax, }) => {\n\n  const healthPercent = healthMax ? (health ?? 0) / healthMax * 100 : 100;\n  const energyPercent = energyMax ? (energy ?? 0) / energyMax * 100 : 100;\n\n  let livesIndicators: React.ReactNode[] = [];\n\n  if (lives != null) {\n\n    livesIndicators = Array(LIFES_INITIAL_QUANTITY).fill(null).map((el, idx) => {\n      const isSpentLife = idx + 1 > lives;\n\n      /**\n       * show empty life indicator if life is spents\n       */\n\n      if (isSpentLife) return <div key={idx} className={\"lifeIndicator empty\"} />;\n      return <div key={idx} className={\"lifeIndicator\"} />;\n    });\n  }\n\n  return (\n    <div className=\"outer-wrapper\">\n      {lives != null && (\n        <div className={\"flex-container\"}>\n          <div className={\"elem1 leftText\"}>Lives</div>\n          <div className={\"elem2 livesContainer\"}>\n            {livesIndicators}\n          </div>\n          <div className={\"elem3 elem_number\"}>{lives}/5</div>\n        </div>\n      )}\n\n      <div className={\"flex-container\"}>\n        <div className={\"elem1 leftText\"}>Health</div>\n        <div className={\"elem2 healthBar\"} >\n          <div className={\"healthBarInner\"} style={{ maxWidth: `${healthPercent}%` }} />\n        </div>\n        <div className={\"elem3 elem_number\"}>{\n          healthMax\n            ? `${health}/${healthMax}`\n            : health\n        }</div>\n      </div>\n      <div className={\"flex-container\"}>\n        <div className={\"elem1 leftText\"}>Energy</div>\n        <div className={\"elem2 energyBar\"} >\n          <div className={\"energyBarInner\"} style={{ maxWidth: `${energyPercent}%` }} />\n        </div>\n        <div className={\"elem3 elem_number\"}>{\n          energyMax\n            ? `${energy}/${energyMax}`\n            : energy\n        }</div>\n      </div>\n    </div>\n  );\n};\n","import { useAlert } from \"@gear-js/react-hooks\";\nimport { useEffect, useState } from \"react\";\n\nexport const useWasmMetadata = (source: RequestInfo | URL) => {\n  const alert = useAlert();\n  const [data, setData] = useState<Buffer>();\n\n  useEffect(() => {\n    if (source) {\n      fetch(source)\n        .then((response) => response.arrayBuffer())\n        .then((array) => Buffer.from(array))\n        .then((buffer) => setData(buffer))\n        .catch(({ message }: Error) => alert.error(`Fetch error: ${message}`));\n    }\n  }, [alert, source]);\n\n  return { buffer: data };\n};\n","import { createEvent, createStore, sample } from \"effector\";\n\nconst $user = createStore<null | {\n  id: string;\n  attributes: {\n    strength: string;\n    agility: string;\n    vitality: string;\n    stamina: string;\n  };\n  name: string;\n}>(null);\n\n// const $registerUsers = createStore<\n//   Array<{\n//     id: string;\n//     attributes: {\n//       strength: string;\n//       agility: string;\n//       vitality: string;\n//       stamina: string;\n//     };\n//     name: string;\n//   }>\n// >([]);\n\n// const updateRegisterUsers = createEvent<\n//   Array<{\n//     id: string;\n//     attributes: {\n//       strength: string;\n//       agility: string;\n//       vitality: string;\n//       stamina: string;\n//     };\n//     name: string;\n//   }>\n// >();\n\nconst setName = createEvent<{\n  id: string;\n  attributes: {\n    strength: string;\n    agility: string;\n    vitality: string;\n    stamina: string;\n  };\n  name: string;\n}>();\n\n// sample({ clock: updateRegisterUsers, target: $registerUsers });\n\nsample({ clock: setName, target: $user });\n\nexport const userStore = {\n  $user,\n  setName,\n  // $registerUsers,\n  // updateRegisterUsers,\n};\n","import { ButtonHTMLAttributes, DetailedHTMLProps, FC } from \"react\";\nimport \"./styles.scss\";\nimport { Button, Flex } from \"@mantine/core\";\n\nexport type ButtonGroupNewProps = {\n  disabled?: boolean;\n  buttonProps?: DetailedHTMLProps<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n  leftText?: string;\n  firstButton?: string;\n  value: string | number;\n  secondButton?: string;\n  onClickFirstButton?: VoidFunction;\n  onClickSecondButton?: VoidFunction;\n  //\n  isFirstDisabled?: boolean;\n  isSecondDisabled?: boolean;\n};\n\nexport const ButtonGroup: FC<ButtonGroupNewProps> = ({\n  firstButton,\n  value,\n  secondButton,\n  leftText,\n  onClickFirstButton,\n  onClickSecondButton,\n  isFirstDisabled = false,\n  isSecondDisabled = false,\n}) => {\n  return (\n    <div className={\"pointButtonWrapper\"}>\n      <div className={\"buttonText\"}>{leftText}</div>\n      <Button.Group>\n        {onClickFirstButton && (\n          <Button\n            className={\"pointButton\"}\n            onClick={onClickFirstButton}\n            disabled={isFirstDisabled}\n          >\n            {firstButton}\n          </Button>\n        )}\n        <Flex\n          align={'center'}\n          justify={'center'}\n          style={{ cursor: 'default' }}\n          className={\"pointButton secondBtn\"}\n        >\n          {value}\n        </Flex>\n        {onClickSecondButton && (\n          <Button\n            className={\"pointButton\"}\n            onClick={onClickSecondButton}\n            disabled={isSecondDisabled}\n          >\n            {secondButton}\n          </Button>\n        )}\n      </Button.Group>\n    </div>\n  );\n};\n","import { Anchor, Text } from \"@mantine/core\";\n\nexport const TitleWithQuote = ({\n  children,\n  quoteUrl\n}: {\n  children: React.ReactNode;\n  quoteUrl?: string;\n}) => {\n  return (\n    <div >\n      <Text\n        component=\"span\"\n        c=\"white\"\n        fw=\"600\"\n        fz={18}\n      >\n        {children}\n      </Text>\n      {quoteUrl && <Anchor ml={4} target=\"_blank\" rel=\"noopener\" href={quoteUrl}>\n        [?]\n      </Anchor>}\n    </div>\n  );\n};\n","import { Flex, Radio, Stack } from \"@mantine/core\";\nimport { SchoolOfMagic } from \"components/SchoolOfMagic\";\nimport { TitleWithQuote } from \"components/TitleWithQuote\";\n\nimport { useState } from \"react\";\n\nexport const SchoolOfMagicChoice = ({\n  onChange\n}: {\n  onChange: (element: MagicElement) => void;\n}) => {\n  const [elementChecked, setElementCheckedRaw] = useState<MagicElement | undefined>();\n  const setElementChecked = (element: MagicElement) => {\n    setElementCheckedRaw(element);\n    onChange(element);\n  };\n\n  return (\n    <Stack gap={'sm'}>\n      <TitleWithQuote quoteUrl=\"https://impulse-dao.gitbook.io/impulse-dao/games-for-developers/arena\" >\n        Choose a School of Magic\n      </TitleWithQuote>\n\n      <Stack gap={'sm'}>\n        {(['fire', 'water', 'earth'] as MagicElement[]).map((element, index) => {\n\n          return (\n            <SchoolOfMagicWithRadioButton\n              key={index}\n              isChecked={element === elementChecked}\n              type={element}\n              onClick={() => setElementChecked(element)}\n              disabled={elementChecked != null && element !== elementChecked}\n            />\n          );\n        })}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst SchoolOfMagicWithRadioButton = ({\n  type,\n  isChecked,\n  onClick,\n  disabled,\n}: {\n  type: MagicElement;\n  isChecked: boolean;\n  onClick?: () => void;\n  disabled?: boolean;\n}) => {\n  return (\n    <Flex gap=\"md\" align=\"center\" style={{ cursor: 'pointer' }} onClick={onClick}>\n      <Radio checked={isChecked} color=\"white\" size=\"xs\" styles={{\n        icon: {\n          color: 'black'\n        }\n      }} />\n      <SchoolOfMagic type={type} disabled={disabled} />\n    </Flex >\n  );\n};\n","import { Input } from \"components\";\nimport { Button } from \"components/Button\";\nimport { ButtonGroup } from \"components/ButtonGroup\";\nimport { StatBar } from \"pages/@shared/StatBar\";\nimport { FC, memo, useRef } from \"react\";\nimport \"./styles.scss\";\nimport { Badge, Box, Table } from \"@mantine/core\";\nimport { SchoolOfMagicChoice } from \"./SchoolOfMagicChoice\";\nimport { TitleWithQuote } from \"components/TitleWithQuote\";\nimport capitalize from \"lodash/capitalize\";\nimport { StrategyInput } from \"components/StrategyInput\";\nimport { getFullEnergy, getFullHp } from \"consts\";\n\ntype MintCharacterViewProps = {\n  stats: {\n    strength: number;\n    agility: number;\n    vitality: number;\n    stamina: number;\n    intelligence: number;\n    points: number;\n  };\n  decrease: (stat) => void;\n  increase: (stat) => void;\n  disabled: boolean;\n  onSubmit: VoidFunction;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n  onShoolOfMagicChange: (element: MagicElement) => void;\n  onUploadCodeChange: (codeId: string) => void;\n  name: string;\n  codeId: string;\n  setCodeId: (codeId: string) => void;\n};\n\nexport const MintCharacterView: FC<MintCharacterViewProps> = memo(\n  ({\n    stats,\n    decrease,\n    increase,\n    disabled,\n    onSubmit,\n    onChange,\n    onShoolOfMagicChange,\n    onUploadCodeChange,\n    name,\n    codeId,\n    setCodeId,\n  }) => {\n    const initialStats = useRef({ ...stats });\n\n    return (\n      <div className=\"mint_char\">\n        <Table className={\"table_container\"}>\n          <div className={\"table_header\"}>Mint character to proceed</div>\n          <div className=\"modal_wrapper\">\n            <div className={\"modal_left\"}>\n              <div className={\"top_wrapper\"}>\n                <TitleWithQuote quoteUrl=\"https://impulse-dao.gitbook.io/impulse-dao/games-for-developers/arena\" >\n                  Character info\n                </TitleWithQuote>\n                <Input\n                  className={\"input_container\"}\n                  onChange={onChange}\n                  value={name}\n                  placeholder=\"Enter character name\"\n                  name=\"name\"\n                />\n                <StrategyInput\n                  codeId={codeId}\n                  setCodeId={setCodeId}\n                  onUploadCodeChange={onUploadCodeChange}\n                />\n              </div>\n              <PointsLeft points={stats.points} />\n              {[\n                'strength',\n                'agility',\n                'vitality',\n                'stamina',\n                'intelligence'\n              ].map((statName) => {\n                return (\n                  <ButtonGroup\n                    key={statName}\n                    leftText={capitalize(statName)}\n                    firstButton={\"-\"}\n                    value={stats[statName]}\n                    secondButton={\"+\"}\n                    onClickFirstButton={() => decrease(statName)}\n                    onClickSecondButton={() => increase(statName)}\n                    isFirstDisabled={stats[statName] === initialStats.current[statName]}\n                    isSecondDisabled={stats.points === 0}\n                  />\n                );\n              })}\n\n            </div>\n            <div className={\"modal_right\"}>\n              <Box pt=\"2.5rem\" mb=\"2rem\">\n                <StatBar\n                  health={getFullHp(stats.vitality)}\n                  energy={getFullEnergy(stats.stamina)}\n                />\n              </Box>\n\n              <SchoolOfMagicChoice onChange={onShoolOfMagicChange} />\n            </div>\n          </div>\n          <div className={\"buttonsGrid\"}>\n            <Button className={\"cancelButton\"} onClick={() => { }}>\n              Cancel\n            </Button>\n            <Button\n              className={\"mintButton\"}\n              onClick={onSubmit}\n              disabled={disabled}\n            >\n              Mint character\n              <Badge component=\"span\" c=\"white\" styles={{\n                root: {\n                  backgroundColor: '#484848',\n                  pointerEvents: 'none',\n                }\n              }}>\n                100 vara\n              </Badge>\n            </Button>\n            <div className=\"textWrapper\">\n              75% is added to this season's prize pool\n            </div>\n          </div>\n        </Table>\n      </div>\n    );\n  }\n);\n\nconst PointsLeft = ({ points }) => {\n  return (\n    <div className={\"points\"}>\n      Points left:<span>{points}</span>{\" \"}\n    </div>\n  );\n};\n","import { FC, memo, useEffect, useState, useMemo } from \"react\";\nimport { useAccount, useReadWasmState } from \"@gear-js/react-hooks\";\nimport { useUnit } from \"effector-react\";\nimport { ProgramMetadata } from \"@gear-js/api\";\nimport { userStore } from \"model/user\";\nimport stateMetaWasm from \"../../assets/mint.opt.wasm\";\nimport { MintCharacterView } from \"./components/MintCharacterView\";\nimport { useWasmMetadata } from \"./hooks/useWasmMetadata\";\nimport { MINT_PROGRAM_ID, MINT_METADATA } from \"consts\";\nimport { useOnSubmit } from \"./hooks/useOnSubmit\";\nimport { useStats } from \"./hooks/useStats\";\nimport { useOnChange } from \"./hooks/useOnChange\";\nimport {\n  getCodeIdsFromLocalStorage,\n} from \"hooks/useUploadCode\";\n\nexport type MintCharacterProps = {};\n\nexport const MintCharacter: FC<MintCharacterProps> = memo(() => {\n  const { buffer } = useWasmMetadata(stateMetaWasm);\n  const setUserName = useUnit(userStore.setName);\n  const { account } = useAccount();\n  const meta = useMemo(() => ProgramMetadata.from(MINT_METADATA), []);\n\n  const metaWasmData: MetaWasmDataType = useMemo(\n    () => ({\n      programId: MINT_PROGRAM_ID,\n      programMetadata: meta,\n      wasm: buffer,\n      functionName: \"character_info\",\n      argument: account?.decodedAddress,\n    }),\n    [meta, buffer, account?.decodedAddress]\n  );\n\n  const charInfo = useReadWasmState<{\n    id: string;\n    attributes: {\n      strength: string;\n      agility: string;\n      vitality: string;\n      stamina: string;\n      intelligence: string;\n    };\n    name: string;\n  }>(metaWasmData);\n\n  const [data, setData] = useState({\n    codeId: getCodeIdsFromLocalStorage()[0] ?? \"\",\n    name: \"\",\n  });\n\n  const { decrease, increase, stats } = useStats();\n  const onSubmit = useOnSubmit({ ...data, stats });\n  const onChangeInput = useOnChange(setData);\n\n  useEffect(() => {\n    if (charInfo.state) {\n      setUserName(charInfo.state);\n    }\n  }, [charInfo.state, setUserName]);\n\n  return (\n    <MintCharacterView\n      codeId={data.codeId}\n      setCodeId={(codeId) => setData({ ...data, codeId })}\n      name={data.name}\n      disabled={!!stats.points || !data.name}\n      decrease={decrease}\n      increase={increase}\n      onChange={onChangeInput}\n      onSubmit={onSubmit}\n      onShoolOfMagicChange={(element) => { }}\n      onUploadCodeChange={(codeId) => setData({ ...data, codeId })}\n      stats={stats}\n    />\n  );\n});\n","import { useState } from \"react\";\n\nexport type CharacterStats = {\n  strength: number;\n  agility: number;\n  vitality: number;\n  stamina: number;\n  points: number;\n  intelligence: number;\n};\n\nexport const useStats = (\n  initialStats: CharacterStats = {\n    strength: 1,\n    agility: 1,\n    vitality: 1,\n    stamina: 1,\n    intelligence: 1,\n    points: 5,\n  }\n) => {\n  const [stats, setStats] = useState(initialStats);\n  const increase = (name) => {\n    if (stats.points > 0) {\n      setStats((prevStats) => ({\n        ...prevStats,\n        [name]: prevStats[name] + 1,\n        points: prevStats[\"points\"] - 1,\n      }));\n    }\n  };\n  const decrease = (name) => {\n    if (stats[name] > 1) {\n      setStats((prevStats) => ({\n        ...prevStats,\n        [name]: prevStats[name] - 1,\n        points: prevStats[\"points\"] + 1,\n      }));\n    }\n  };\n\n  return {\n    decrease,\n    increase,\n    stats,\n  };\n};\n","import { useSendMessage } from \"@gear-js/react-hooks\";\nimport { useCallback, useMemo, useRef } from \"react\";\nimport { MINT_METADATA, MINT_PROGRAM_ID } from \"consts\";\nimport { ProgramMetadata } from \"@gear-js/api\";\nimport { useNavigate } from \"react-router-dom\";\nimport { MAX_GAS_LIMIT, PAYMENT_FOR_MINTING } from \"consts\";\nimport { resetUseMyCharacrersQuery } from \"app/api/characters\";\nimport { useShouldUseVoucher } from \"hooks/useShouldUseVoucher\";\n\nexport const useOnSubmit = ({\n  codeId,\n  name,\n  stats,\n  onSuccess,\n}: {\n  codeId: string;\n  name: string;\n  stats: {\n    strength: number;\n    agility: number;\n    vitality: number;\n    stamina: number;\n    intelligence: number;\n    points: number;\n  };\n  onSuccess?: () => void;\n}): VoidFunction => {\n  /**\n   *  using ref to reduce the number of re-renders caused by the useCallback below\n   */\n  const onSuccessRef = useRef(onSuccess);\n  onSuccessRef.current = onSuccess;\n\n  /**\n   *\n   */\n\n  const shouldUseVoucher = useShouldUseVoucher();\n\n  /**\n   *\n   */\n  const meta = useMemo(() => ProgramMetadata.from(MINT_METADATA), []);\n\n  const send = useSendMessage(MINT_PROGRAM_ID, meta, { isMaxGasLimit: true });\n  const navigate = useNavigate();\n\n  /**\n   *\n   */\n\n  return useCallback(async () => {\n    const payload = {\n      CreateCharacter: {\n        code_id: codeId,\n        attributes: {\n          agility: stats.agility,\n          stamina: stats.stamina,\n          strength: stats.strength,\n          vitality: stats.vitality,\n          intelligence: stats.intelligence,\n        },\n        name,\n      },\n    };\n\n    send({\n      payload,\n      gasLimit: MAX_GAS_LIMIT,\n      withVoucher: shouldUseVoucher,\n      onSuccess: (result) => {\n        console.log(\"success\", result);\n        onSuccessRef.current?.();\n        resetUseMyCharacrersQuery();\n        navigate(\"/arena\");\n      },\n      onError: () => {\n        console.log(\"error\");\n      },\n      value: PAYMENT_FOR_MINTING,\n    });\n  }, [codeId, name, navigate, send, shouldUseVoucher, stats]);\n};\n","import { ChangeEvent, useCallback } from \"react\";\n\nexport const useOnChange = (\n  setData: (\n    value: React.SetStateAction<{\n      codeId: string;\n      name: string;\n    }>\n  ) => void\n) => {\n  return useCallback(\n    ({ target }: ChangeEvent<HTMLInputElement>) => {\n      setData((prev) => ({\n        ...prev,\n        [target.name]: target.value,\n      }));\n    },\n    [setData]\n  );\n};\n"],"names":["Button","_ref","onClick","children","disabled","buttonProps","className","classes","clsx","_jsx","Input","memo","inputProps","onChange","value","placeholder","name","StatBar","lives","health","healthMax","energy","energyMax","healthPercent","energyPercent","livesIndicators","Array","LIFES_INITIAL_QUANTITY","fill","map","el","idx","_jsxs","style","maxWidth","useWasmMetadata","source","alert","useAlert","data","setData","useState","useEffect","fetch","then","response","arrayBuffer","array","Buffer","from","buffer","catch","message","error","$user","createStore","setName","createEvent","sample","clock","target","userStore","ButtonGroup","firstButton","secondButton","leftText","onClickFirstButton","onClickSecondButton","isFirstDisabled","isSecondDisabled","Group","Flex","align","justify","cursor","TitleWithQuote","quoteUrl","Text","component","c","fw","fz","Anchor","ml","rel","href","SchoolOfMagicChoice","elementChecked","setElementCheckedRaw","Stack","gap","element","index","SchoolOfMagicWithRadioButton","isChecked","type","setElementChecked","_ref2","Radio","checked","color","size","styles","icon","SchoolOfMagic","MintCharacterView","stats","decrease","increase","onSubmit","onShoolOfMagicChange","onUploadCodeChange","codeId","setCodeId","initialStats","useRef","Table","StrategyInput","PointsLeft","points","statName","capitalize","current","Box","pt","mb","getFullHp","vitality","getFullEnergy","stamina","Badge","root","backgroundColor","pointerEvents","MintCharacter","_getCodeIdsFromLocalS","stateMetaWasm","setUserName","useUnit","account","useAccount","meta","useMemo","ProgramMetadata","MINT_METADATA","metaWasmData","programId","MINT_PROGRAM_ID","programMetadata","wasm","functionName","argument","decodedAddress","charInfo","useReadWasmState","getCodeIdsFromLocalStorage","arguments","length","undefined","strength","agility","intelligence","setStats","prevStats","useStats","onSuccess","onSuccessRef","shouldUseVoucher","useShouldUseVoucher","send","useSendMessage","isMaxGasLimit","navigate","useNavigate","useCallback","async","payload","CreateCharacter","code_id","attributes","gasLimit","MAX_GAS_LIMIT","withVoucher","result","_onSuccessRef$current","console","log","call","resetUseMyCharacrersQuery","onError","PAYMENT_FOR_MINTING","useOnSubmit","onChangeInput","prev","useOnChange","state"],"sourceRoot":""}