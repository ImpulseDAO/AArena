{"version":3,"file":"static/js/400.c742e01f.chunk.js","mappings":"0IAqBO,MAAMA,EAA0BC,IAMhC,IANiC,QACtCC,EAAO,SACPC,EAAQ,SACRC,EAAQ,YACRC,EAAW,UACXC,GACDL,EACC,MAAMM,GAAUC,EAAAA,EAAAA,GAAK,SAAUF,EAAW,CAAEF,aAC5C,OACEK,EAAAA,EAAAA,KAAA,aACMJ,EACJC,UAAWC,EACXL,QAASA,EACTE,SAAUA,EAASD,SAElBA,GACM,C,4HC9BN,MAmBMO,GAAoCC,EAAAA,EAAAA,OAAK,KACpD,MAAOC,EAASC,IAAUC,EAAAA,EAAAA,aAAYC,IAAWA,IAAO,GAClDC,GAAWC,EAAAA,EAAAA,OACX,QAAEC,IAAYC,EAAAA,EAAAA,MAQpB,OANAC,EAAAA,EAAAA,YAAU,KACJF,GACFF,EAAS,SACX,GACC,CAACE,EAASF,KAGXK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAnB,SAAA,EACEkB,EAAAA,EAAAA,MAAA,OAAKf,UAAU,YAAWH,SAAA,EACxBM,EAAAA,EAAAA,KAAA,KAAAN,SAAG,WACHM,EAAAA,EAAAA,KAACT,EAAAA,EAAM,CAACE,QAASW,EAAOV,SAAC,sCACxBS,IAAWH,EAAAA,EAAAA,KAACc,EAAAA,EAAa,CAACC,MAAOX,QAEpCJ,EAAAA,EAAAA,KAACgB,EAAAA,GAAM,MACN,G","sources":["components/Button/Button.tsx","pages/StartScreen/StartScreen.tsx"],"sourcesContent":["import React, {\n  ButtonHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  ReactNode,\n} from \"react\";\nimport \"./styles.scss\";\nimport clsx from \"clsx\";\n\nexport type ButtonProps = {\n  onClick?: VoidFunction;\n  children: ReactNode;\n  disabled?: boolean;\n  value?: string;\n  buttonProps?: DetailedHTMLProps<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n  className?: string;\n};\n\nexport const Button: FC<ButtonProps> = ({\n  onClick,\n  children,\n  disabled,\n  buttonProps,\n  className,\n}) => {\n  const classes = clsx(\"button\", className, { disabled });\n  return (\n    <button\n      {...buttonProps}\n      className={classes}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {children}\n    </button>\n  );\n};\n","import { FC, memo, useEffect, useReducer, useState } from \"react\";\nimport \"./styles.scss\";\nimport { Button } from \"components/Button\";\nimport { AccountsModal } from \"components/AccountsModal\";\nimport { useAccount, useAlert } from \"@gear-js/react-hooks\";\nimport { Outlet, useNavigate } from \"react-router-dom\";\n\nexport const useWasmMetadata = (source: RequestInfo | URL) => {\n  const alert = useAlert();\n  const [data, setData] = useState<Buffer>();\n\n  useEffect(() => {\n    if (source) {\n      fetch(source)\n        .then((response) => response.arrayBuffer())\n        .then((array) => Buffer.from(array))\n        .then((buffer) => setData(buffer))\n        .catch(({ message }: Error) => alert.error(`Fetch error: ${message}`));\n    }\n  }, [alert, source]);\n\n  return { buffer: data };\n};\n\nexport type StartScreenProps = {};\n\nexport const StartScreen: FC<StartScreenProps> = memo(() => {\n  const [visible, toggle] = useReducer((state) => !state, false);\n  const navigate = useNavigate();\n  const { account } = useAccount();\n\n  useEffect(() => {\n    if (account) {\n      navigate(\"/arena\");\n    }\n  }, [account, navigate]);\n\n  return (\n    <>\n      <div className=\"scr_start\">\n        <p>Arena</p>\n        <Button onClick={toggle}>Connect wallet to enter the Arena</Button>\n        {visible && <AccountsModal close={toggle} />}\n      </div>\n      <Outlet />\n    </>\n  );\n});\n"],"names":["Button","_ref","onClick","children","disabled","buttonProps","className","classes","clsx","_jsx","StartScreen","memo","visible","toggle","useReducer","state","navigate","useNavigate","account","useAccount","useEffect","_jsxs","_Fragment","AccountsModal","close","Outlet"],"sourceRoot":""}