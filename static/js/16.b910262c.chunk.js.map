{"version":3,"file":"static/js/16.b910262c.chunk.js","mappings":"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","sources":["app/api/lobbies.ts","app/api/sendMessages.ts","components/GasReserved/GasReserved.tsx","components/Panel/Panel.tsx","components/TheButton/TheButton.tsx","pages/Arena/Arena.tsx"],"sourcesContent":["import { graphql } from \"gql/gql\";\nimport { useGraphQL } from \"app/providers/ReactQuery/useGraphQL\";\nimport { useSendToArena } from \"./sendMessages\";\nimport { MAX_GAS_LIMIT } from \"consts\";\nimport { useAccount, useAlert } from \"@gear-js/react-hooks\";\n\n/**\n * All Lobbies\n */\n\nconst lobbiesQueryDocument = graphql(/* GraphQL */ `\n  query Lobbies {\n    lobbies {\n      id\n      capacity\n      reservationsCount\n      characters {\n        id\n        character {\n          id\n          name\n          owner\n          level\n          experience\n          attributes\n        }\n      }\n      battleLogs {\n        id\n      }\n    }\n  }\n`);\n\nexport const useLobbies = () =>\n  useGraphQL(lobbiesQueryDocument, undefined, { refetchInterval: 1000 * 3 });\n\n/**\n * Lobby By Id\n */\n\nconst lobbyByIdQueryDocument = graphql(/* GraphQL */ `\n  query LobbyById2($id: String!) {\n    lobbyById(id: $id) {\n      id\n      capacity\n      reservationsCount\n      characters {\n        id\n        character {\n          id\n          name\n          owner\n          level\n          experience\n          attributes\n        }\n      }\n      battleLogs {\n        id\n      }\n    }\n  }\n`);\n\nexport const useLobby = ({ id }: { id: string }) => {\n  const query = useGraphQL(\n    lobbyByIdQueryDocument,\n    { id: `${id}` },\n    {\n      // refresh every 3 seconds\n      refetchInterval: 1000 * 3,\n    }\n  );\n  return query;\n};\n\n/**\n * Create Lobby\n */\n\nexport const useCreateLobby = () => {\n  const alert = useAlert();\n  const send = useSendToArena();\n  const { isAccountReady } = useAccount();\n\n  if (!isAccountReady) {\n    // no-op\n    return ({ capacity }: { capacity: LobbyCapacity }) => Promise.resolve();\n  }\n\n  return ({ capacity }: { capacity: LobbyCapacity }) => {\n    if (capacity <= 0) {\n      alert.error(\"Capacity must be greater than 0\");\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      send({\n        payload: {\n          CreateLobby: {\n            capacity: `${capacity}`,\n          },\n        },\n        gasLimit: MAX_GAS_LIMIT,\n        onSuccess: () => {\n          console.log(\"success\");\n          resolve(\"success\");\n        },\n        onError: () => {\n          console.log(\"error\");\n          reject(\"error\");\n        },\n      });\n    });\n  };\n};\n","import { ProgramMetadata } from \"@gear-js/api\";\nimport { useSendMessage } from \"@gear-js/react-hooks\";\nimport {\n  ARENA_METADATA,\n  ARENA_PROGRAM_ID,\n  MINT_METADATA,\n  MINT_PROGRAM_ID,\n} from \"consts\";\nimport { useCallback, useMemo } from \"react\";\n\nconst options = {\n  isMaxGasLimit: true,\n};\n\nexport const useSendToArena = () => {\n  const meta = useMemo(() => ProgramMetadata.from(ARENA_METADATA), []);\n  const sendToArenaContract = useSendMessage(ARENA_PROGRAM_ID, meta, options);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(sendToArenaContract, []);\n};\n\nexport const useSendToMintContract = () => {\n  const meta = useMemo(() => ProgramMetadata.from(MINT_METADATA), []);\n  const sendToMintContract = useSendMessage(MINT_PROGRAM_ID, meta, options);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(sendToMintContract, []);\n};\n","import { FlexProps, Flex, Box, Text } from \"@mantine/core\";\n\nexport const GasReserved = ({\n  gasNeeded,\n  gasReserved,\n  ...flexProps\n}: {\n  gasNeeded: number,\n  gasReserved: number,\n} & FlexProps) => {\n  return (\n    <Flex align={\"center\"} gap=\"xs\" {...flexProps}>\n      <Flex gap={2.75}>\n        {\n          Array.from({ length: gasNeeded }).map((_, index) => (\n            <GasPoint filled={index < gasReserved} key={index} />\n          ))\n        }\n      </Flex>\n\n      <Text c=\"white\" fw={600}>Gas Reserved</Text>\n    </Flex >\n  );\n};\n\nconst GasPoint = ({ filled }: { filled?: boolean; }) => {\n  return <Box bg={filled ? 'primary' : 'white'} w={20} h={8} style={{\n    borderRadius: 4,\n  }} />;\n};\n","import { Paper, PaperProps } from \"@mantine/core\";\n\nexport const Panel = ({ children, turnOffPadding = false, ...paperProps }: PaperProps & {\n  children: React.ReactNode,\n  turnOffPadding?: boolean;\n}) => {\n  return (\n    <Paper\n      {...(turnOffPadding ? {} : { p: \"lg\" })}\n      bg={\"rgba(0, 0, 0, 0.7)\"}\n      withBorder\n      radius={12}\n      style={{\n        border: \"2px solid #eaecf0\",\n        color: 'white'\n      }}\n      {...paperProps}\n    >\n      {children}\n    </Paper>\n  );\n};\n","import { ComponentPropsWithoutRef } from \"react\";\nimport { Button, type ButtonProps } from \"@mantine/core\";\n\nexport const TheButton = ({\n  children,\n  onClick,\n  ...buttonProps\n}: ButtonProps & ComponentPropsWithoutRef<typeof Button<'button'>>) => {\n  return (\n    <Button\n      onClick={onClick}\n      //\n      radius=\"sm\"\n      bg=\"primary\"\n      size=\"md\"\n      px=\"xl\"\n      style={theme => ({\n        boxShadow: theme.shadows.sm,\n      })}\n      styles={(theme) => ({\n        root: {\n          '&:disabled': {\n            backgroundColor: theme.colors.gray[5],\n            color: theme.colors.gray[6],\n          },\n        },\n      })}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  );\n};\n","import { Title, Box, Grid, Image, Select, Stack, Badge, type TitleProps, Text, Flex } from \"@mantine/core\";\nimport ArenaPng from \"assets/images/arena.png\";\nimport { TheButton } from \"components/TheButton\";\nimport { Panel } from \"components/Panel\";\nimport { useCreateLobby, useLobbies } from \"app/api/lobbies\";\nimport { useNavigate } from \"react-router-dom\";\nimport { newRoutes } from \"app/routes\";\nimport { useMemo, useRef } from \"react\";\nimport { GasReserved } from \"components/GasReserved/GasReserved\";\nimport { useAlert } from \"@gear-js/react-hooks\";\nimport { PLAYERS_TO_RESERVATIONS_NEEDED_MAP } from \"consts\";\n\nexport const Arena = () => {\n  const alert = useAlert();\n  const navigate = useNavigate();\n  const selectRef = useRef<HTMLInputElement | null>(null);\n\n  const { data: lobbiesData, refetch: refetchLobbies } = useLobbies();\n\n  const cards = useMemo(() => {\n    if (!lobbiesData) return [];\n\n    return [...lobbiesData?.lobbies].reverse().map(lobby => {\n      return {\n        tierText: 'tier' in lobby ? lobby.tier as string : \"\",\n        lobbyId: lobby.id,\n        playersSize: lobby.capacity,\n        playersJoined: lobby.characters.length,\n        gasNeeded: PLAYERS_TO_RESERVATIONS_NEEDED_MAP[lobby.capacity],\n        gasReserved: lobby.reservationsCount,\n        isFinished: lobby.battleLogs.length > 0,\n      };\n    });\n  }, [lobbiesData]);\n\n  /**\n   * Get handleJoinLobby\n   */\n  const handleJoinLobby = ({ lobbyId }: {\n    lobbyId: string;\n  }) => {\n    console.log('handleJoinLobby', lobbyId);\n\n    navigate(newRoutes.lobby(lobbyId));\n  };\n\n  /**\n   * \n   */\n\n  const handleCreateLobby = useCreateLobby();\n\n  return (\n    <Flex style={{\n      flex: 1,\n      justifyContent: 'center',\n    }} >\n      <Grid m={'lg'} gutter={'md'}\n        pb={150}\n        style={{\n          flex: 1,\n          maxWidth: \"min(1300px, 90%)\",\n        }}\n      >\n        <GridColumn >\n          <Panel\n            h={370}\n            bg=\"black\"\n          >\n            <Stack align=\"center\" h=\"100%\" gap={0}>\n              <SwordsImage />\n\n              <TitleText>Create a lobby</TitleText>\n\n              <Stack w=\"100%\" mt=\"auto\" >\n                <Select\n                  ref={selectRef}\n                  label=\"Choose number of players\"\n                  styles={{\n                    input: {\n                      height: 44,\n                      fontSize: 16,\n                    },\n                    option: {\n                      color: 'black',\n                      fontSize: 14,\n                    },\n                    section: { pointerEvents: 'none' }\n                  }}\n                  labelProps={{\n                    c: 'white',\n                    fz: \"sm\",\n                    pb: 4\n                  }}\n                  data={[\n                    // can be only of type LobbyCapacity\n                    { value: '2', label: '2', },\n                    { value: '4', label: '4' },\n                  ]}\n                  defaultValue=\"4\"\n                  rightSection={\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\">\n                      <path d=\"M5 7.5L10 12.5L15 7.5\" stroke=\"#667085\" strokeWidth=\"1.66667\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                    </svg>\n                  }\n                  leftSection={\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\">\n                      <path d=\"M16.6668 17.5V15.8333C16.6668 14.9493 16.3156 14.1014 15.6905 13.4763C15.0654 12.8512 14.2176 12.5 13.3335 12.5H6.66683C5.78277 12.5 4.93493 12.8512 4.30981 13.4763C3.68469 14.1014 3.3335 14.9493 3.3335 15.8333V17.5M13.3335 5.83333C13.3335 7.67428 11.8411 9.16667 10.0002 9.16667C8.15921 9.16667 6.66683 7.67428 6.66683 5.83333C6.66683 3.99238 8.15921 2.5 10.0002 2.5C11.8411 2.5 13.3335 3.99238 13.3335 5.83333Z\" stroke=\"#667085\" strokeWidth=\"1.66667\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                    </svg>\n                  }\n                />\n                <TheButton onClick={async () => {\n                  const capacity = parseInt(selectRef.current?.value ?? '');\n\n                  if (capacity !== 2 && capacity !== 4 && capacity !== 8) {\n                    alert.error('Invalid capacity');\n                    return;\n                  };\n\n                  await handleCreateLobby({ capacity });\n                  /**\n                   * Refetch lobbies after successful promise resolution\n                   */\n                  refetchLobbies();\n                }}  >\n                  Create\n                </TheButton>\n              </Stack>\n            </Stack>\n          </Panel>\n        </GridColumn>\n\n        {cards.map((card, index) => (\n          <GridColumn key={`${index} - ${card.lobbyId}`}>\n            <Card\n              isFinished={card.isFinished}\n              tierText={card.tierText}\n              lobbyId={card.lobbyId}\n              playersSize={card.playersSize}\n              playersJoined={card.playersJoined}\n              gasNeeded={card.gasNeeded}\n              gasReserved={card.gasReserved}\n              onJoin={() => {\n                console.log('onJoin');\n                handleJoinLobby({ lobbyId: card.lobbyId });\n              }}\n            />\n          </GridColumn>\n        ))}\n      </Grid>\n    </Flex>\n  );\n};\n\nconst SwordsImage = () => <Image maw={105} src={ArenaPng} mb={14} />;\nconst TitleText = ({ children, ...titleProps }: TitleProps) => <Title order={2} c={'white'} {...titleProps} >{children}</Title>;\n\nconst GridColumn = ({ children }) => {\n  return (\n    <Grid.Col\n      span={{\n        xs: 12,\n        sm: 6,\n        md: 4,\n      }}\n    >\n      {children}\n    </Grid.Col>\n  );\n};\n\nconst Card = ({\n  isFinished,\n  tierText,\n  lobbyId,\n  playersSize,\n  playersJoined,\n  gasNeeded,\n  gasReserved,\n  onJoin\n}: {\n  isFinished?: boolean,\n  tierText: string,\n  lobbyId: string,\n  playersSize: number | string,\n  playersJoined: number,\n  gasNeeded: number,\n  gasReserved: number,\n  onJoin: () => void,\n}) => {\n  return (\n    <Panel h={370} pos=\"relative\" >\n      {/* Lobby ID - absolutely positioned*/}\n      <Box pos=\"absolute\"\n        top={10}\n        right={10}\n      >\n        <Text fz={12} fw=\"600\" color=\"white\" bg={\"rgba(0, 0, 0, 0.4)\"}\n          py={4}\n          px={8}\n          style={{\n            borderRadius: 9999,\n          }}\n        >Lobby ID #{lobbyId}</Text>\n      </Box>\n\n      {/* Centered Content */}\n      <Stack align=\"center\" h=\"100%\" gap={0}>\n        <SwordsImage />\n\n        <TitleText mb=\"sm\">{tierText}</TitleText>\n\n        <Badge c={'white'} style={{ textTransform: 'none' }}>\n          {playersJoined} of {playersSize} players\n        </Badge>\n\n        <Box\n          mt=\"auto\"\n          mb=\"lg\"\n        >\n          {\n            isFinished\n              ? <Text c=\"red\" fw={600}>Lobby ended</Text>\n              : gasNeeded > 0 ? <GasReserved  {...{ gasNeeded, gasReserved }} /> : null\n          }\n        </Box>\n\n        <TheButton onClick={() => {\n          setTimeout(onJoin, 200);\n        }} w=\"100%\" >\n          Join the Lobby\n        </TheButton>\n\n      </Stack>\n\n    </Panel>\n  );\n};\n"],"names":["lobbiesQueryDocument","graphql","useLobbies","useGraphQL","undefined","refetchInterval","lobbyByIdQueryDocument","useLobby","_ref","id","useCreateLobby","alert","useAlert","send","useSendToArena","isAccountReady","useAccount","_ref3","capacity","Promise","resolve","reject","payload","CreateLobby","gasLimit","MAX_GAS_LIMIT","onSuccess","console","log","onError","error","_ref2","options","isMaxGasLimit","meta","useMemo","ProgramMetadata","from","ARENA_METADATA","sendToArenaContract","useSendMessage","ARENA_PROGRAM_ID","useCallback","useSendToMintContract","MINT_METADATA","sendToMintContract","MINT_PROGRAM_ID","GasReserved","gasNeeded","gasReserved","flexProps","_jsxs","Flex","align","gap","children","_jsx","Array","length","map","_","index","GasPoint","filled","Text","c","fw","Box","bg","w","h","style","borderRadius","Panel","turnOffPadding","paperProps","Paper","p","withBorder","radius","border","color","TheButton","onClick","buttonProps","Button","size","px","theme","boxShadow","shadows","sm","styles","root","backgroundColor","colors","gray","Arena","navigate","useNavigate","selectRef","useRef","data","lobbiesData","refetch","refetchLobbies","cards","lobbies","reverse","lobby","tierText","tier","lobbyId","playersSize","playersJoined","characters","PLAYERS_TO_RESERVATIONS_NEEDED_MAP","reservationsCount","isFinished","battleLogs","handleCreateLobby","flex","justifyContent","Grid","m","gutter","pb","maxWidth","GridColumn","Stack","SwordsImage","TitleText","mt","Select","ref","label","input","height","fontSize","option","section","pointerEvents","labelProps","fz","value","defaultValue","rightSection","xmlns","width","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","leftSection","async","_selectRef$current$va","_selectRef$current","parseInt","current","card","Card","onJoin","newRoutes","handleJoinLobby","Image","maw","src","ArenaPng","mb","titleProps","Title","order","Col","span","xs","md","_ref4","pos","top","right","py","Badge","textTransform","setTimeout"],"sourceRoot":""}