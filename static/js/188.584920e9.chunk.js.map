{"version":3,"file":"static/js/188.584920e9.chunk.js","mappings":"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","sources":["../node_modules/@mantine/core/src/components/Badge/Badge.tsx","../node_modules/@mantine/core/src/components/Grid/Grid.context.ts","../node_modules/@mantine/core/src/core/utils/get-breakpoint-value/get-breakpoint-value.ts","../node_modules/@mantine/core/src/core/utils/get-sorted-breakpoints/get-sorted-breakpoints.ts","../node_modules/@mantine/core/src/core/utils/get-base-value/get-base-value.ts","../node_modules/@mantine/core/src/components/Grid/GridCol/GridColVariables.tsx","../node_modules/@mantine/core/src/components/Grid/GridCol/GridCol.tsx","../node_modules/@mantine/core/src/components/Grid/GridVariables.tsx","../node_modules/@mantine/core/src/components/Grid/Grid.tsx","../node_modules/@mantine/core/src/components/Paper/Paper.tsx","../node_modules/@mantine/core/src/components/Title/get-title-size.ts","../node_modules/@mantine/core/src/components/Title/Title.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  getRadius,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineGradient,\n  MantineRadius,\n  MantineSize,\n  polymorphicFactory,\n  PolymorphicFactory,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Badge.module.css';\n\nexport type BadgeStylesNames = 'root' | 'section' | 'label';\nexport type BadgeVariant =\n  | 'filled'\n  | 'light'\n  | 'outline'\n  | 'dot'\n  | 'transparent'\n  | 'white'\n  | 'default'\n  | 'gradient';\n\nexport type BadgeCssVariables = {\n  root:\n    | '--badge-height'\n    | '--badge-padding-x'\n    | '--badge-fz'\n    | '--badge-radius'\n    | '--badge-bg'\n    | '--badge-color'\n    | '--badge-bd'\n    | '--badge-dot-color';\n};\n\nexport interface BadgeProps extends BoxProps, StylesApiProps<BadgeFactory> {\n  /** Controls `font-size`, `height` and horizontal `padding`, `'md'` by default */\n  size?: MantineSize | (string & {});\n\n  /** If set, badge `min-width` becomes equal to its `height` and horizontal padding is removed */\n  circle?: boolean;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, `'xl'` by default */\n  radius?: MantineRadius;\n\n  /** Key of `theme.colors` or any valid CSS color, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Gradient configuration used when `variant=\"gradient\"`, default value is `theme.defaultGradient` */\n  gradient?: MantineGradient;\n\n  /** Content displayed on the left side of the badge label */\n  leftSection?: React.ReactNode;\n\n  /** Content displayed on the right side of the badge label */\n  rightSection?: React.ReactNode;\n\n  /** Determines whether Badge should take 100% of its parent width, `false` by default */\n  fullWidth?: boolean;\n\n  /** Main badge content */\n  children?: React.ReactNode;\n\n  /** Determines whether text color with filled variant should depend on `background-color`. If luminosity of the `color` prop is less than `theme.luminosityThreshold`, then `theme.white` will be used for text color, otherwise `theme.black`. Overrides `theme.autoContrast`. */\n  autoContrast?: boolean;\n}\n\nexport type BadgeFactory = PolymorphicFactory<{\n  props: BadgeProps;\n  defaultRef: HTMLDivElement;\n  defaultComponent: 'div';\n  stylesNames: BadgeStylesNames;\n  vars: BadgeCssVariables;\n  variant: BadgeVariant;\n}>;\n\nconst defaultProps: Partial<BadgeProps> = {};\n\nconst varsResolver = createVarsResolver<BadgeFactory>(\n  (theme, { radius, color, gradient, variant, size, autoContrast }) => {\n    const colors = theme.variantColorResolver({\n      color: color || theme.primaryColor,\n      theme,\n      gradient,\n      variant: variant || 'filled',\n      autoContrast,\n    });\n\n    return {\n      root: {\n        '--badge-height': getSize(size, 'badge-height'),\n        '--badge-padding-x': getSize(size, 'badge-padding-x'),\n        '--badge-fz': getSize(size, 'badge-fz'),\n        '--badge-radius': radius === undefined ? undefined : getRadius(radius),\n        '--badge-bg': color || variant ? colors.background : undefined,\n        '--badge-color': color || variant ? colors.color : undefined,\n        '--badge-bd': color || variant ? colors.border : undefined,\n        '--badge-dot-color': variant === 'dot' ? getThemeColor(color, theme) : undefined,\n      },\n    };\n  }\n);\n\nexport const Badge = polymorphicFactory<BadgeFactory>((_props, ref) => {\n  const props = useProps('Badge', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    radius,\n    color,\n    gradient,\n    leftSection,\n    rightSection,\n    children,\n    variant,\n    fullWidth,\n    autoContrast,\n    circle,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<BadgeFactory>({\n    name: 'Badge',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box\n      variant={variant}\n      mod={{ block: fullWidth, circle }}\n      {...getStyles('root', { variant })}\n      ref={ref}\n      {...others}\n    >\n      {leftSection && (\n        <span {...getStyles('section')} data-position=\"left\">\n          {leftSection}\n        </span>\n      )}\n      <span {...getStyles('label')}>{children}</span>\n      {rightSection && (\n        <span {...getStyles('section')} data-position=\"right\">\n          {rightSection}\n        </span>\n      )}\n    </Box>\n  );\n});\n\nBadge.classes = classes;\nBadge.displayName = '@mantine/core/Badge';\n","import { createSafeContext, GetStylesApi } from '../../core';\nimport type { GridFactory } from './Grid';\n\ninterface GridContextValue {\n  getStyles: GetStylesApi<GridFactory>;\n  grow: boolean | undefined;\n  columns: number;\n}\n\nexport const [GridProvider, useGridContext] = createSafeContext<GridContextValue>(\n  'Grid component was not found in tree'\n);\n","import type { MantineBreakpoint, MantineTheme } from '../../MantineProvider';\nimport { px } from '../units-converters';\n\nexport function getBreakpointValue(breakpoint: number | string, theme: MantineTheme) {\n  if (breakpoint in theme.breakpoints) {\n    return px(theme.breakpoints[breakpoint as MantineBreakpoint]) as number;\n  }\n\n  return px(breakpoint) as number;\n}\n","import type { MantineTheme } from '../../MantineProvider';\nimport { getBreakpointValue } from '../get-breakpoint-value/get-breakpoint-value';\n\nexport function getSortedBreakpoints(breakpoints: string[], theme: MantineTheme) {\n  const convertedBreakpoints = breakpoints.map((breakpoint) => ({\n    value: breakpoint,\n    px: getBreakpointValue(breakpoint, theme),\n  }));\n\n  convertedBreakpoints.sort((a, b) => a.px - b.px);\n  return convertedBreakpoints;\n}\n","import type { StyleProp } from '../../Box';\n\nexport function getBaseValue<Value = any>(value: StyleProp<Value>) {\n  if (typeof value === 'object' && value !== null) {\n    if ('base' in value) {\n      return value.base;\n    }\n\n    return undefined;\n  }\n\n  return value;\n}\n","import React from 'react';\nimport {\n  filterProps,\n  getBaseValue,\n  getSortedBreakpoints,\n  InlineStyles,\n  keys,\n  MantineBreakpoint,\n  useMantineTheme,\n} from '../../../core';\nimport { useGridContext } from '../Grid.context';\nimport type { ColSpan, GridColProps } from './GridCol';\n\ninterface GridColVariablesProps {\n  selector: string;\n  span: GridColProps['span'] | undefined;\n  order?: GridColProps['order'] | undefined;\n  offset?: GridColProps['offset'] | undefined;\n}\n\nconst getColumnFlexBasis = (colSpan: ColSpan | undefined, columns: number) => {\n  if (colSpan === 'content') {\n    return 'auto';\n  }\n\n  if (colSpan === 'auto') {\n    return '0rem';\n  }\n\n  return colSpan ? `${100 / (columns / colSpan)}%` : undefined;\n};\n\nconst getColumnMaxWidth = (\n  colSpan: ColSpan | undefined,\n  columns: number,\n  grow: boolean | undefined\n) => {\n  if (grow || colSpan === 'auto') {\n    return '100%';\n  }\n\n  if (colSpan === 'content') {\n    return 'unset';\n  }\n\n  return getColumnFlexBasis(colSpan, columns);\n};\n\nconst getColumnFlexGrow = (colSpan: ColSpan | undefined, grow: boolean | undefined) => {\n  if (!colSpan) {\n    return undefined;\n  }\n\n  return colSpan === 'auto' || grow ? '1' : 'auto';\n};\n\nconst getColumnOffset = (offset: number | undefined, columns: number) =>\n  offset === 0 ? '0' : offset ? `${100 / (columns / offset)}%` : undefined;\n\nexport function GridColVariables({ span, order, offset, selector }: GridColVariablesProps) {\n  const theme = useMantineTheme();\n  const ctx = useGridContext();\n\n  const baseValue = getBaseValue(span);\n  const baseSpan = baseValue === undefined ? 12 : getBaseValue(span);\n\n  const baseStyles: Record<string, string | undefined> = filterProps({\n    '--col-order': getBaseValue(order)?.toString(),\n    '--col-flex-grow': getColumnFlexGrow(baseSpan, ctx.grow),\n    '--col-flex-basis': getColumnFlexBasis(baseSpan, ctx.columns),\n    '--col-width': baseSpan === 'content' ? 'auto' : undefined,\n    '--col-max-width': getColumnMaxWidth(baseSpan, ctx.columns, ctx.grow),\n    '--col-offset': getColumnOffset(getBaseValue(offset), ctx.columns),\n  });\n\n  const queries = keys(theme.breakpoints).reduce<Record<string, Record<string, any>>>(\n    (acc, breakpoint) => {\n      if (!acc[breakpoint]) {\n        acc[breakpoint] = {};\n      }\n\n      if (typeof order === 'object' && order[breakpoint] !== undefined) {\n        acc[breakpoint]['--col-order'] = order[breakpoint]?.toString();\n      }\n\n      if (typeof span === 'object' && span[breakpoint] !== undefined) {\n        acc[breakpoint]['--col-flex-grow'] = getColumnFlexGrow(span[breakpoint], ctx.grow);\n        acc[breakpoint]['--col-flex-basis'] = getColumnFlexBasis(span[breakpoint], ctx.columns);\n        acc[breakpoint]['--col-width'] = span[breakpoint] === 'content' ? 'auto' : undefined;\n        acc[breakpoint]['--col-max-width'] = getColumnMaxWidth(\n          span[breakpoint],\n          ctx.columns,\n          ctx.grow\n        );\n      }\n\n      if (typeof offset === 'object' && offset[breakpoint] !== undefined) {\n        acc[breakpoint]['--col-offset'] = getColumnOffset(offset[breakpoint], ctx.columns);\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), theme).filter(\n    (breakpoint) => keys(queries[breakpoint.value]).length > 0\n  );\n\n  const media = sortedBreakpoints.map((breakpoint) => ({\n    query: `(min-width: ${theme.breakpoints[breakpoint.value as MantineBreakpoint]})`,\n    styles: queries[breakpoint.value],\n  }));\n\n  return <InlineStyles styles={baseStyles} media={media} selector={selector} />;\n}\n","import React from 'react';\nimport cx from 'clsx';\nimport {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  StyleProp,\n  useProps,\n  useRandomClassName,\n} from '../../../core';\nimport { useGridContext } from '../Grid.context';\nimport { GridColVariables } from './GridColVariables';\nimport classes from '../Grid.module.css';\n\nexport type GridColStylesNames = 'col';\nexport type ColSpan = number | 'auto' | 'content';\n\nexport interface GridColProps\n  extends BoxProps,\n    CompoundStylesApiProps<GridColFactory>,\n    ElementProps<'div'> {\n  /** Column span, `12` by default */\n  span?: StyleProp<ColSpan>;\n\n  /** Column order, can be used to reorder columns at different viewport sizes */\n  order?: StyleProp<number>;\n\n  /** Column offset on the left side – number of columns that should be left empty before this column */\n  offset?: StyleProp<number>;\n}\n\nexport type GridColFactory = Factory<{\n  props: GridColProps;\n  ref: HTMLDivElement;\n  stylesNames: GridColStylesNames;\n  compound: true;\n}>;\n\nconst defaultProps: Partial<GridColProps> = {\n  span: 12,\n};\n\nexport const GridCol = factory<GridColFactory>((_props, ref) => {\n  const props = useProps('GridCol', defaultProps, _props);\n  const { classNames, className, style, styles, vars, span, order, offset, ...others } = props;\n  const ctx = useGridContext();\n  const responsiveClassName = useRandomClassName();\n  return (\n    <>\n      <GridColVariables\n        selector={`.${responsiveClassName}`}\n        span={span}\n        order={order}\n        offset={offset}\n      />\n\n      <Box\n        ref={ref}\n        {...ctx.getStyles('col', {\n          className: cx(className, responsiveClassName),\n          style,\n          classNames,\n          styles,\n        })}\n        {...others}\n      />\n    </>\n  );\n});\n\nGridCol.classes = classes;\nGridCol.displayName = '@mantine/core/GridCol';\n","import React from 'react';\nimport {\n  filterProps,\n  getBaseValue,\n  getSortedBreakpoints,\n  getSpacing,\n  InlineStyles,\n  keys,\n  MantineBreakpoint,\n  useMantineTheme,\n} from '../../core';\nimport type { GridProps } from './Grid';\n\ninterface GridVariablesProps extends GridProps {\n  selector: string;\n}\n\nexport function GridVariables({ gutter, selector }: GridVariablesProps) {\n  const theme = useMantineTheme();\n\n  const baseStyles: Record<string, string | undefined> = filterProps({\n    '--grid-gutter': getSpacing(getBaseValue(gutter)),\n  });\n\n  const queries = keys(theme.breakpoints).reduce<Record<string, Record<string, any>>>(\n    (acc, breakpoint) => {\n      if (!acc[breakpoint]) {\n        acc[breakpoint] = {};\n      }\n\n      if (typeof gutter === 'object' && gutter[breakpoint] !== undefined) {\n        acc[breakpoint]['--grid-gutter'] = getSpacing(gutter[breakpoint]);\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), theme).filter(\n    (breakpoint) => keys(queries[breakpoint.value]).length > 0\n  );\n\n  const media = sortedBreakpoints.map((breakpoint) => ({\n    query: `(min-width: ${theme.breakpoints[breakpoint.value as MantineBreakpoint]})`,\n    styles: queries[breakpoint.value],\n  }));\n\n  return <InlineStyles styles={baseStyles} media={media} selector={selector} />;\n}\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  MantineSpacing,\n  StyleProp,\n  StylesApiProps,\n  useProps,\n  useRandomClassName,\n  useStyles,\n} from '../../core';\nimport { GridProvider } from './Grid.context';\nimport { GridCol } from './GridCol/GridCol';\nimport { GridVariables } from './GridVariables';\nimport classes from './Grid.module.css';\n\nexport type GridStylesNames = 'root' | 'col' | 'inner';\nexport type GridCssVariables = {\n  root: '--grid-justify' | '--grid-align' | '--grid-overflow';\n};\n\nexport interface GridProps extends BoxProps, StylesApiProps<GridFactory>, ElementProps<'div'> {\n  /** Gutter between columns, key of `theme.spacing` or any valid CSS value, `'md'` by default */\n  gutter?: StyleProp<MantineSpacing>;\n\n  /** Determines whether columns in the last row should expand to fill all available space, `false` by default */\n  grow?: boolean;\n\n  /** Sets `justify-content`, `flex-start` by default */\n  justify?: React.CSSProperties['justifyContent'];\n\n  /** Sets `align-items`, `stretch` by default */\n  align?: React.CSSProperties['alignItems'];\n\n  /** Number of columns in each row, `12` by default */\n  columns?: number;\n\n  /** Sets `overflow` CSS property on the root element, `'visible'` by default */\n  overflow?: React.CSSProperties['overflow'];\n}\n\nexport type GridFactory = Factory<{\n  props: GridProps;\n  ref: HTMLDivElement;\n  stylesNames: GridStylesNames;\n  vars: GridCssVariables;\n  staticComponents: {\n    Col: typeof GridCol;\n  };\n}>;\n\nconst defaultProps: Partial<GridProps> = {\n  gutter: 'md',\n  grow: false,\n  columns: 12,\n};\n\nconst varsResolver = createVarsResolver<GridFactory>((_, { justify, align, overflow }) => ({\n  root: {\n    '--grid-justify': justify,\n    '--grid-align': align,\n    '--grid-overflow': overflow,\n  },\n}));\n\nexport const Grid = factory<GridFactory>((_props, ref) => {\n  const props = useProps('Grid', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    grow,\n    gutter,\n    columns,\n    align,\n    justify,\n    children,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<GridFactory>({\n    name: 'Grid',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const responsiveClassName = useRandomClassName();\n\n  return (\n    <GridProvider value={{ getStyles, grow, columns: columns! }}>\n      <GridVariables selector={`.${responsiveClassName}`} {...props} />\n      <Box ref={ref} {...getStyles('root', { className: responsiveClassName })} {...others}>\n        <div {...getStyles('inner')}>{children}</div>\n      </Box>\n    </GridProvider>\n  );\n});\n\nGrid.classes = classes;\nGrid.displayName = '@mantine/core/Grid';\nGrid.Col = GridCol;\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  getRadius,\n  getShadow,\n  MantineRadius,\n  MantineShadow,\n  polymorphicFactory,\n  PolymorphicFactory,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Paper.module.css';\n\nexport type PaperStylesNames = 'root';\nexport type PaperCssVariables = {\n  root: '--paper-radius' | '--paper-shadow';\n};\n\nexport interface PaperBaseProps {\n  /** Key of `theme.shadows` or any valid CSS value to set `box-shadow`, `none` by default */\n  shadow?: MantineShadow;\n\n  /** Key of `theme.radius` or any valid CSS value to set border-radius, numbers are converted to rem, `theme.defaultRadius` by default */\n  radius?: MantineRadius;\n\n  /** Determines whether the paper should have border, border color depends on color scheme, `false` by default */\n  withBorder?: boolean;\n}\n\nexport interface PaperProps extends BoxProps, PaperBaseProps, StylesApiProps<PaperFactory> {}\n\nexport type PaperFactory = PolymorphicFactory<{\n  props: PaperProps;\n  defaultComponent: 'div';\n  defaultRef: HTMLDivElement;\n  stylesNames: PaperStylesNames;\n  vars: PaperCssVariables;\n}>;\n\nconst defaultProps: Partial<PaperProps> = {};\n\nconst varsResolver = createVarsResolver<PaperFactory>((_, { radius, shadow }) => ({\n  root: {\n    '--paper-radius': radius === undefined ? undefined : getRadius(radius),\n    '--paper-shadow': getShadow(shadow),\n  },\n}));\n\nexport const Paper = polymorphicFactory<PaperFactory>((_props, ref) => {\n  const props = useProps('Paper', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    withBorder,\n    vars,\n    radius,\n    shadow,\n    variant,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<PaperFactory>({\n    name: 'Paper',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box\n      ref={ref}\n      mod={{ 'data-with-border': withBorder }}\n      {...getStyles('root')}\n      variant={variant}\n      {...others}\n    />\n  );\n});\n\nPaper.classes = classes;\nPaper.displayName = '@mantine/core/Paper';\n","import { rem } from '../../core';\nimport type { TitleOrder, TitleSize } from './Title';\n\nconst headings: unknown[] = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\nexport interface GetTitleSizeResult {\n  fontSize: string;\n  fontWeight: string;\n  lineHeight: string;\n}\n\nexport function getTitleSize(order: TitleOrder, size: TitleSize | undefined): GetTitleSizeResult {\n  const titleSize = size !== undefined ? size : `h${order}`;\n\n  if (headings.includes(titleSize)) {\n    return {\n      fontSize: `var(--mantine-${titleSize}-font-size)`,\n      fontWeight: `var(--mantine-${titleSize}-font-weight)`,\n      lineHeight: `var(--mantine-${titleSize}-line-height)`,\n    };\n  }\n\n  return {\n    fontSize: rem(titleSize),\n    fontWeight: `var(--mantine-h${order}-font-weight)`,\n    lineHeight: `var(--mantine-h${order}-line-height)`,\n  };\n}\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { getTitleSize } from './get-title-size';\nimport classes from './Title.module.css';\n\nexport type TitleOrder = 1 | 2 | 3 | 4 | 5 | 6;\nexport type TitleSize = `h${TitleOrder}` | React.CSSProperties['fontSize'];\n\nexport type TitleStylesNames = 'root';\nexport type TitleCssVariables = {\n  root: '--title-fw' | '--title-lh' | '--title-fz' | '--title-line-clamp';\n};\n\nexport interface TitleProps\n  extends BoxProps,\n    StylesApiProps<TitleFactory>,\n    ElementProps<'h1', 'color'> {\n  /** Determines which tag will be used (h1-h6), controls `font-size` style if `size` prop is not set, `1` by default */\n  order?: TitleOrder;\n\n  /** Changes title size, if not set, then size is controlled by `order` prop */\n  size?: TitleSize;\n\n  /** Number of lines after which Text will be truncated */\n  lineClamp?: number;\n}\n\nexport type TitleFactory = Factory<{\n  props: TitleProps;\n  ref: HTMLHeadingElement;\n  stylesNames: TitleStylesNames;\n  vars: TitleCssVariables;\n}>;\n\nconst defaultProps: Partial<TitleProps> = {\n  order: 1,\n};\n\nconst varsResolver = createVarsResolver<TitleFactory>((_, { order, size, lineClamp }) => {\n  const sizeVariables = getTitleSize(order!, size);\n  return {\n    root: {\n      '--title-fw': sizeVariables.fontWeight,\n      '--title-lh': sizeVariables.lineHeight,\n      '--title-fz': sizeVariables.fontSize,\n      '--title-line-clamp': typeof lineClamp === 'number' ? lineClamp.toString() : undefined,\n    },\n  };\n});\n\nexport const Title = factory<TitleFactory>((_props, ref) => {\n  const props = useProps('Title', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    order,\n    vars,\n    size,\n    variant,\n    lineClamp,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<TitleFactory>({\n    name: 'Title',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  if (![1, 2, 3, 4, 5, 6].includes(order!)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...getStyles('root')}\n      component={`h${order!}`}\n      variant={variant}\n      ref={ref}\n      mod={{ order, 'data-line-clamp': typeof lineClamp === 'number' }}\n      size={size}\n      {...others}\n    />\n  );\n});\n\nTitle.classes = classes;\nTitle.displayName = '@mantine/core/Title';\n"],"names":["defaultProps","varsResolver","createVarsResolver","theme","_ref","radius","color","gradient","variant","size","autoContrast","colors","variantColorResolver","primaryColor","root","getSize","getRadius","background","border","getThemeColor","Badge","polymorphicFactory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","leftSection","rightSection","children","fullWidth","circle","others","getStyles","useStyles","name","classes","React","Box","mod","block","displayName","GridProvider","useGridContext","createSafeContext","getBreakpointValue","breakpoint","breakpoints","px","getSortedBreakpoints","convertedBreakpoints","map","value","sort","a","b","getBaseValue","base","getColumnFlexBasis","colSpan","columns","getColumnMaxWidth","grow","getColumnFlexGrow","getColumnOffset","offset","GridColVariables","_getBaseValue","span","order","selector","useMantineTheme","ctx","baseSpan","baseStyles","filterProps","toString","queries","keys","reduce","acc","_order$breakpoint","media","filter","length","query","InlineStyles","GridCol","factory","responsiveClassName","useRandomClassName","cx","GridVariables","gutter","getSpacing","_","justify","align","overflow","Grid","Col","shadow","getShadow","Paper","withBorder","headings","lineClamp","sizeVariables","titleSize","includes","fontSize","fontWeight","lineHeight","rem","getTitleSize","Title","component"],"sourceRoot":""}