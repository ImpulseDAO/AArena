{"version":3,"file":"static/js/836.73fc9872.chunk.js","mappings":"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","sources":["app/api/battleLogs.ts","app/api/characters.ts","components/TheButton/TheButton.tsx","hooks/hooks.ts","pages/History/History.tsx","../node_modules/@mantine/core/src/components/Table/Table.context.ts","../node_modules/@mantine/core/src/components/Table/Table.components.tsx","../node_modules/@mantine/core/src/components/Table/TableDataRenderer.tsx","../node_modules/@mantine/core/src/components/Table/TableScrollContainer.tsx","../node_modules/@mantine/core/src/components/Table/Table.tsx"],"sourcesContent":["import { queryClient } from \"app/providers/ReactQuery\";\nimport {\n  getGraphQLPrimaryKey,\n  useGraphQL,\n} from \"app/providers/ReactQuery/useGraphQL\";\nimport { graphql } from \"gql/gql\";\nimport { BattleLog } from \"gql/graphql\";\n\nexport const allbattleLogsQueryDocument = graphql(`\n  query BattleLogs {\n    battleLogs {\n      id\n      battleIndex\n      character1 {\n        winner\n        attributes\n        character\n        experience\n        rating\n        level\n      }\n      character2 {\n        winner\n        attributes\n        experience\n        character\n        level\n        rating\n      }\n      lobby {\n        id\n        characters {\n          id\n          character {\n            owner\n            name\n            level\n            experience\n            attributes\n            id\n          }\n        }\n        capacity\n      }\n      turns {\n        character1 {\n          energy\n          hp\n          position\n        }\n        logs {\n          action\n          character\n        }\n        character2 {\n          energy\n          position\n          hp\n        }\n      }\n    }\n  }\n`);\n\nexport const invalidateAllBattleLogs = () =>\n  queryClient.invalidateQueries({\n    queryKey: [getGraphQLPrimaryKey(allbattleLogsQueryDocument)],\n  });\n\nexport const useAllBattleLogs = () => {\n  // variables are not used, but we should pass undefined so that we can omit the second argument and pass the third argument\n  const queryResult = useGraphQL(allbattleLogsQueryDocument, undefined, {\n    select: (data) => data.battleLogs,\n  });\n\n  return queryResult;\n};\n\n/**\n *\n */\n\nconst battleLogByIdQueryDocument = graphql(/* GraphQL */ `\n  query BattleLogById($battleId: String!) {\n    battleLogById(id: $battleId) {\n      id\n      battleIndex\n      character1 {\n        winner\n        attributes\n        character\n        experience\n        rating\n        level\n      }\n      character2 {\n        winner\n        attributes\n        experience\n        character\n        level\n        rating\n      }\n      lobby {\n        id\n        characters {\n          id\n          character {\n            owner\n            name\n            level\n            experience\n            attributes\n            id\n          }\n        }\n        capacity\n      }\n      turns {\n        character1 {\n          energy\n          hp\n          position\n        }\n        logs {\n          action\n          character\n        }\n        character2 {\n          energy\n          position\n          hp\n        }\n      }\n    }\n  }\n`);\n\nexport const useBattleLogById = ({ battleId }: { battleId?: string }) => {\n  const query = useGraphQL(\n    battleLogByIdQueryDocument,\n    {\n      battleId: `${battleId}`,\n    },\n    {\n      enabled: battleId != null,\n      select: (data) => data.battleLogById,\n      placeholderData: (previousData) => previousData,\n    }\n  );\n  return query;\n};\n\n/**\n * Battle logs by lobby id\n */\n\nconst battleLogsByLobbyIdQueryDocument = graphql(/* GraphQL */ `\n  query BattleLogsByLobbyId($lobbyId: String!) {\n    battleLogs(where: { lobby: { id_eq: $lobbyId } }) {\n      id\n    }\n  }\n`);\n\nexport const useBattleLogsByLobbyId = ({ lobbyId }: { lobbyId?: string }) => {\n  const query = useGraphQL(\n    battleLogsByLobbyIdQueryDocument,\n    {\n      lobbyId: `${lobbyId}`,\n    },\n    {\n      enabled: lobbyId != null,\n      select: (data) => data.battleLogs,\n    }\n  );\n  return query;\n};\n\n/**\n * Utils\n */\n\nexport const getCharacterFromBattleLogById = (\n  battleLog: BattleLog,\n  characterId: string\n) => {\n  return battleLog.lobby.characters.find(\n    ({ character: { id } }) => id === characterId\n  )?.character;\n};\n","import { useAccount } from \"@gear-js/react-hooks\";\nimport { graphql } from \"gql/gql\";\nimport {\n  getGraphQLPrimaryKey,\n  useGraphQL,\n} from \"app/providers/ReactQuery/useGraphQL\";\nimport { UseQueryResult } from \"@tanstack/react-query\";\nimport { queryClient } from \"app/providers/ReactQuery\";\n\nconst allCharactersQueryDocument = graphql(/* GraphQL */ `\n  query AllCharacters {\n    characters {\n      id\n      level\n      name\n      owner\n      experience\n      attributes\n    }\n  }\n`);\n\nexport const useAllCharacters = () => useGraphQL(allCharactersQueryDocument);\n\nconst charactersByOwnerQueryDocument = graphql(/* GraphQL */ `\n  query CharactersByOwner($owner_eq: String!) {\n    characters(where: { owner_eq: $owner_eq }) {\n      id\n      level\n      name\n      owner\n      experience\n      attributes\n    }\n  }\n`);\n\nexport const resetUseMyCharacrersQuery = () => {\n  const primaryKey = getGraphQLPrimaryKey(charactersByOwnerQueryDocument);\n\n  queryClient.invalidateQueries({ queryKey: [primaryKey] });\n};\n\nexport const useMyCharacters = ({ owner_eq }: { owner_eq: string }) => {\n  return useGraphQL(charactersByOwnerQueryDocument, {\n    owner_eq,\n  });\n};\n\nexport const useMyCharacter = () => {\n  const { account } = useAccount();\n  const queryResult = useMyCharacters({\n    owner_eq: account?.decodedAddress ?? \"\",\n  });\n\n  const myCharacters = queryResult.data;\n\n  return {\n    ...queryResult,\n    data: myCharacters?.characters[\n      myCharacters?.characters.length - 1\n    ] as Character,\n  };\n};\n\nconst characterByIdQueryDocument = graphql(/* GraphQL */ `\n  query CharacterById($character_id: String!) {\n    characterById(id: $character_id) {\n      attributes\n      experience\n      id\n      level\n      name\n      owner\n    }\n  }\n`);\n\nexport const useCharacterById = ({ id }: { id: string }) => {\n  return useGraphQL(characterByIdQueryDocument, {\n    character_id: id,\n  }) as UseQueryResult<Character>;\n};\n","import { ComponentPropsWithoutRef } from \"react\";\nimport { Button, type ButtonProps } from \"@mantine/core\";\n\nexport const TheButton = ({\n  children,\n  onClick,\n  ...buttonProps\n}: ButtonProps & ComponentPropsWithoutRef<typeof Button<'button'>>) => {\n  return (\n    <Button\n      onClick={onClick}\n      //\n      radius=\"sm\"\n      bg=\"primary\"\n      size=\"md\"\n      px=\"xl\"\n      style={theme => ({\n        boxShadow: theme.shadows.sm,\n      })}\n      styles={(theme) => ({\n        root: {\n          '&:disabled': {\n            backgroundColor: theme.colors.gray[5],\n            color: theme.colors.gray[6],\n          },\n        },\n      })}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  );\n};\n","/**\n * I didn't want to name this file \"index.ts\" and named it \"hooks.ts\" instead\n * so that it's easier to open from vscode search menu cmd+P menu\n */\n\nimport { useAccount } from \"@gear-js/react-hooks\";\n\nexport const useMyAccountId = () => {\n  const { account } = useAccount();\n  return account?.decodedAddress;\n};\n","import './styles.scss';\nimport { getCharacterFromBattleLogById, useAllBattleLogs } from 'app/api/battleLogs';\nimport { Flex, Table } from '@mantine/core';\nimport { newRoutes } from 'app/routes';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { BattleLog } from 'gql/graphql';\nimport React, { useEffect } from 'react';\nimport { useMyCharacters } from 'app/api/characters';\nimport { useMyAccountId } from 'hooks/hooks';\nimport { TheButton } from 'components/TheButton';\n\nexport const History = () => {\n  const navigate = useNavigate();\n  const myAccountId = useMyAccountId();\n\n  /**\n   *\n   */\n\n  const { data: myCharacters } = useMyCharacters({ owner_eq: myAccountId ?? '' });\n  const { data: battleLogsUnfiltered } = useAllBattleLogs();\n\n  /**\n   * If true, only show battle logs where the player's characters are involved.\n   */\n  const [searchParams, setSearchParams] = useSearchParams();\n  const isFiltered = searchParams.get('filtered') === 'true';\n\n\n  useEffect(() => {\n    // set initial if not set\n    if (!searchParams.get('filtered')) {\n      setSearchParams('filtered=true');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const battleLogs = React.useMemo(() => {\n    if (!isFiltered) { return battleLogsUnfiltered; }\n\n    const myCharactersIds = myCharacters?.characters.map((character) => character.id) ?? [];\n\n    return battleLogsUnfiltered?.filter((battleLog: BattleLog) => {\n      return (myCharactersIds.includes(battleLog.character1.character)\n        || myCharactersIds.includes(battleLog.character2.character));\n    });\n  }, [battleLogsUnfiltered, isFiltered, myCharacters?.characters]);\n\n  /**\n   *\n   */\n\n  const inProgressRows = battleLogs?.toReversed().map((battleLog: BattleLog) => {\n    const { id } = battleLog;\n    const char1Id = battleLog.character1.character;\n    const char2Id = battleLog.character2.character;\n\n    const playersNames = [char1Id, char2Id].map((charId) => getCharacterFromBattleLogById(battleLog, charId)?.name ?? 'Player not found');\n    const playersOwners = [char1Id, char2Id].map((charId) => getCharacterFromBattleLogById(battleLog, charId)?.owner ?? 'Player not found');\n\n    const winner: Pick<Character, 'name' | 'owner'> | undefined = battleLog.character1.winner\n      ? getCharacterFromBattleLogById(battleLog as BattleLog, char1Id)\n      : battleLog.character2.winner\n        ? getCharacterFromBattleLogById(battleLog as BattleLog, char2Id)\n        : { name: 'No winner', owner: '' };\n\n    const winnerName = winner?.name;\n    const winnerOwner = winner?.owner;\n\n    const includesMyCharacter = playersOwners.includes(myAccountId ?? '') || (winnerOwner && winnerOwner === myAccountId);\n\n    return ({\n      playersNames,\n      battleId: id,\n      lobbyId: battleLog.lobby.id,\n      winner: winnerName,\n      includesMyCharacter\n    });\n  }) ?? [];\n\n\n  return (\n    <div className='logs'>\n      <div className='modal_leaderboard'>\n        <Flex\n          style={{ alignSelf: 'stretch' }}\n          mb=\"xs\"\n        >\n          <TheButton\n            size=\"sm\"\n            bg=\"black\"\n            onClick={() => setSearchParams(prev => {\n              const newParams = new URLSearchParams(prev);\n              newParams.set('filtered', isFiltered ? 'false' : 'true');\n              return newParams;\n            },)}\n          >{isFiltered ? \"Show all logs\" : \"Show my logs only\"}</TheButton>\n        </Flex>\n\n        <div className='header'>History</div>\n        <div className='modal_table'>\n          <Table horizontalSpacing=\"md\" verticalSpacing=\"md\" >\n            <Table.Thead>\n              <Table.Tr>\n                {[\n                  'Lobby ID',\n                  'Battle ID',\n                  'Players',\n                  'Winner',\n                ].map((header, idx) => {\n                  return (\n                    <Table.Th\n                      key={header}\n                      w={CELL_WIDTH[idx]}\n                      ta={TEXT_ALIGN[idx]}\n                    >\n                      {header}\n                    </Table.Th>\n                  );\n                })}\n              </Table.Tr>\n            </Table.Thead>\n            <Table.Tbody>{inProgressRows.map((row) => {\n              return (\n                <Table.Tr\n                  onClick={() => {\n                    const [lobbyId, battleId] = row.battleId.split('-') as [string, string | undefined];\n                    navigate(newRoutes.tournamentResult({ lobbyId, battleId }));\n                  }}\n                  className={['table_row', row.includesMyCharacter && !isFiltered ? 'table_row_highlighted' : ''].join(' ')}\n                  key={`${row.battleId}-${row.lobbyId}`}\n                >\n                  {[\n                    /* Lobby ID */\n                    <div className={'badge'} > {row.lobbyId}</div>,\n                    /* Battle ID */\n                    <div className={'badge'}>{row.battleId}</div>,\n                    /* Players */\n                    row.playersNames.map(playerName => {\n                      return (\n                        <div key={playerName}>\n                          {playerName}\n                        </div>\n                      );\n                    }),\n                    /* Winner */\n                    row.winner,\n                  ].map((cellContent, idx) => {\n                    return (\n                      <Table.Td\n                        key={idx}\n                        w={CELL_WIDTH[idx]}\n                        ta={TEXT_ALIGN[idx]}\n                      >\n                        {cellContent}\n                      </Table.Td>\n                    );\n                  })}\n\n                </Table.Tr>);\n            })}</Table.Tbody>\n          </Table>\n\n        </div>\n      </div>\n    </div >\n  );\n};\n\nconst CELL_WIDTH = {\n  0: '100px',\n  1: '100px',\n};\n\nconst TEXT_ALIGN = {\n  0: 'center',\n  1: 'center',\n};\n","import { createSafeContext, GetStylesApi } from '../../core';\nimport type { TableFactory } from './Table';\n\nexport interface TableContextValue {\n  getStyles: GetStylesApi<TableFactory>;\n  stickyHeader: boolean | undefined;\n  striped: 'odd' | 'even' | undefined;\n  highlightOnHover: boolean | undefined;\n  withColumnBorders: boolean | undefined;\n  withRowBorders: boolean | undefined;\n  captionSide: 'top' | 'bottom';\n}\n\nexport const [TableProvider, useTableContext] = createSafeContext<TableContextValue>(\n  'Table component was not found in the tree'\n);\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  CompoundStylesApiProps,\n  ElementProps,\n  factory,\n  Factory,\n  FactoryPayload,\n  useProps,\n} from '../../core';\nimport type { TableFactory } from './Table';\nimport { TableContextValue, useTableContext } from './Table.context';\nimport classes from './Table.module.css';\n\nexport interface TableElementProps<Selector extends string>\n  extends BoxProps,\n    CompoundStylesApiProps<Omit<TableFactory, 'stylesNames'> & { stylesNames: Selector }> {}\n\nexport interface TableThProps extends TableElementProps<'th'>, ElementProps<'th'> {}\nexport interface TableTdProps extends TableElementProps<'td'>, ElementProps<'td'> {}\nexport interface TableTrProps extends TableElementProps<'tr'>, ElementProps<'tr'> {}\nexport interface TableTheadProps extends TableElementProps<'thead'>, ElementProps<'thead'> {}\nexport interface TableTbodyProps extends TableElementProps<'tbody'>, ElementProps<'tbody'> {}\nexport interface TableTfootProps extends TableElementProps<'tfoot'>, ElementProps<'tfoot'> {}\nexport interface TableCaptionProps extends TableElementProps<'caption'>, ElementProps<'caption'> {}\n\nexport type TableThFactory = Factory<{\n  props: TableThProps;\n  ref: HTMLTableCellElement;\n  stylesNames: 'th';\n  compound: true;\n}>;\n\nexport type TableTdFactory = Factory<{\n  props: TableTdProps;\n  ref: HTMLTableCellElement;\n  stylesNames: 'td';\n  compound: true;\n}>;\n\nexport type TableTrFactory = Factory<{\n  props: TableTrProps;\n  ref: HTMLTableRowElement;\n  stylesNames: 'tr';\n  compound: true;\n}>;\n\nexport type TableTheadFactory = Factory<{\n  props: TableTheadProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'thead';\n  compound: true;\n}>;\n\nexport type TableTbodyFactory = Factory<{\n  props: TableTbodyProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'tbody';\n  compound: true;\n}>;\n\nexport type TableTfootFactory = Factory<{\n  props: TableTfootProps;\n  ref: HTMLTableSectionElement;\n  stylesNames: 'tfoot';\n  compound: true;\n}>;\n\nexport type TableCaptionFactory = Factory<{\n  props: TableCaptionProps;\n  ref: HTMLTableCaptionElement;\n  stylesNames: 'caption';\n  compound: true;\n}>;\n\ninterface TableElementOptions {\n  columnBorder?: true;\n  rowBorder?: true;\n  striped?: true;\n  highlightOnHover?: true;\n  captionSide?: true;\n  stickyHeader?: true;\n}\n\nfunction getDataAttributes(ctx: TableContextValue, options?: TableElementOptions) {\n  if (!options) {\n    return undefined;\n  }\n\n  const data: Record<string, boolean | string> = {};\n\n  if (options.columnBorder && ctx.withColumnBorders) {\n    data['data-with-column-border'] = true;\n  }\n\n  if (options.rowBorder && ctx.withRowBorders) {\n    data['data-with-row-border'] = true;\n  }\n\n  if (options.striped && ctx.striped) {\n    data['data-striped'] = ctx.striped;\n  }\n\n  if (options.highlightOnHover && ctx.highlightOnHover) {\n    data['data-hover'] = true;\n  }\n\n  if (options.captionSide && ctx.captionSide) {\n    data['data-side'] = ctx.captionSide;\n  }\n\n  if (options.stickyHeader && ctx.stickyHeader) {\n    data['data-sticky'] = true;\n  }\n\n  return data;\n}\n\nexport function tableElement<Factory extends FactoryPayload>(\n  element: 'th' | 'td' | 'tr' | 'thead' | 'tbody' | 'tfoot' | 'caption',\n  options?: TableElementOptions\n) {\n  const name = `Table${element.charAt(0).toUpperCase()}${element.slice(1)}`;\n  const Component = factory<Factory>((_props, ref) => {\n    const props = useProps(name, {}, _props);\n    const { classNames, className, style, styles, ...others } = props;\n\n    const ctx = useTableContext();\n\n    return (\n      <Box\n        component={element}\n        ref={ref}\n        {...getDataAttributes(ctx, options)}\n        {...ctx.getStyles(element, { className, classNames, style, styles, props })}\n        {...others}\n      />\n    );\n  });\n\n  Component.displayName = `@mantine/core/${name}`;\n  Component.classes = classes;\n  return Component;\n}\n\nexport const TableTh = tableElement<TableThFactory>('th', { columnBorder: true });\nexport const TableTd = tableElement<TableTdFactory>('td', { columnBorder: true });\nexport const TableTr = tableElement<TableTrFactory>('tr', {\n  rowBorder: true,\n  striped: true,\n  highlightOnHover: true,\n});\nexport const TableThead = tableElement<TableTheadFactory>('thead', { stickyHeader: true });\nexport const TableTbody = tableElement<TableTbodyFactory>('tbody');\nexport const TableTfoot = tableElement<TableTfootFactory>('tfoot');\nexport const TableCaption = tableElement<TableCaptionFactory>('caption', { captionSide: true });\n","import React from 'react';\nimport type { TableData } from './Table';\nimport {\n  TableCaption,\n  TableTbody,\n  TableTd,\n  TableTfoot,\n  TableTh,\n  TableThead,\n  TableTr,\n} from './Table.components';\n\nexport interface TableDataRendererProps {\n  data: TableData;\n}\n\nexport function TableDataRenderer({ data }: TableDataRendererProps) {\n  return (\n    <>\n      {data.caption && <TableCaption>{data.caption}</TableCaption>}\n\n      {data.head && (\n        <TableThead>\n          <TableTr>\n            {data.head.map((item, index) => (\n              <TableTh key={index}>{item}</TableTh>\n            ))}\n          </TableTr>\n        </TableThead>\n      )}\n\n      {data.body && (\n        <TableTbody>\n          {data.body.map((row, rowIndex) => (\n            <TableTr key={rowIndex}>\n              {row.map((item, index) => (\n                <TableTd key={index}>{item}</TableTd>\n              ))}\n            </TableTr>\n          ))}\n        </TableTbody>\n      )}\n\n      {data.foot && (\n        <TableTfoot>\n          <TableTr>\n            {data.foot.map((item, index) => (\n              <TableTh key={index}>{item}</TableTh>\n            ))}\n          </TableTr>\n        </TableTfoot>\n      )}\n    </>\n  );\n}\n\nTableDataRenderer.displayName = '@mantine/core/TableDataRenderer';\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { ScrollArea } from '../ScrollArea';\nimport classes from './Table.module.css';\n\nexport type TableScrollContainerStylesNames = 'scrollContainer' | 'scrollContainerInner';\nexport type TableScrollContainerCssVariables = {\n  scrollContainer: '--table-min-width' | '--table-overflow';\n};\n\nexport interface TableScrollContainerProps\n  extends BoxProps,\n    StylesApiProps<TableScrollContainerFactory>,\n    ElementProps<'div'> {\n  /** `min-width` of the `Table` at which it should become scrollable */\n  minWidth: React.CSSProperties['minWidth'];\n\n  /** Type of the scroll container, `native` to use native scrollbars, `scrollarea` to use `ScrollArea` component, `scrollarea` by default */\n  type?: 'native' | 'scrollarea';\n}\n\nexport type TableScrollContainerFactory = Factory<{\n  props: TableScrollContainerProps;\n  ref: HTMLDivElement;\n  stylesNames: TableScrollContainerStylesNames;\n  vars: TableScrollContainerCssVariables;\n}>;\n\nconst defaultProps: Partial<TableScrollContainerProps> = {\n  type: 'scrollarea',\n};\n\nconst varsResolver = createVarsResolver<TableScrollContainerFactory>((_, { minWidth, type }) => ({\n  scrollContainer: {\n    '--table-min-width': rem(minWidth),\n    '--table-overflow': type === 'native' ? 'auto' : undefined,\n  },\n}));\n\nexport const TableScrollContainer = factory<TableScrollContainerFactory>((_props, ref) => {\n  const props = useProps('TableScrollContainer', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    minWidth,\n    type,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<TableScrollContainerFactory>({\n    name: 'TableScrollContainer',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n    rootSelector: 'scrollContainer',\n  });\n\n  return (\n    <Box<any>\n      component={type === 'scrollarea' ? ScrollArea : 'div'}\n      {...(type === 'scrollarea' ? { offsetScrollbars: 'x' } : {})}\n      ref={ref}\n      {...getStyles('scrollContainer')}\n      {...others}\n    >\n      <div {...getStyles('scrollContainerInner')}>{children}</div>\n    </Box>\n  );\n});\n\nTableScrollContainer.classes = classes;\nTableScrollContainer.displayName = '@mantine/core/TableScrollContainer';\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getSpacing,\n  getThemeColor,\n  MantineColor,\n  MantineSpacing,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport {\n  TableCaption,\n  TableTbody,\n  TableTd,\n  TableTfoot,\n  TableTh,\n  TableThead,\n  TableTr,\n} from './Table.components';\nimport { TableProvider } from './Table.context';\nimport { TableDataRenderer } from './TableDataRenderer';\nimport { TableScrollContainer } from './TableScrollContainer';\nimport classes from './Table.module.css';\n\nexport type TableStylesNames =\n  | 'table'\n  | 'thead'\n  | 'tbody'\n  | 'tfoot'\n  | 'tr'\n  | 'th'\n  | 'td'\n  | 'caption';\n\nexport type TableCssVariables = {\n  table:\n    | '--table-layout'\n    | '--table-border-color'\n    | '--table-caption-side'\n    | '--table-horizontal-spacing'\n    | '--table-vertical-spacing'\n    | '--table-striped-color'\n    | '--table-highlight-on-hover-color'\n    | '--table-sticky-header-offset';\n};\n\nexport interface TableData {\n  head?: React.ReactNode[];\n  body?: React.ReactNode[][];\n  foot?: React.ReactNode[];\n  caption?: string;\n}\n\nexport interface TableProps extends BoxProps, StylesApiProps<TableFactory>, ElementProps<'table'> {\n  /** Value of `table-layout` style, `auto` by default */\n  layout?: React.CSSProperties['tableLayout'];\n\n  /** Determines on which side `Table.Caption` is displayed, `bottom` by default */\n  captionSide?: 'top' | 'bottom';\n\n  /** Color of table borders, key of `theme.colors` or any valid CSS color */\n  borderColor?: MantineColor;\n\n  /** Determines whether the table should have outer border, `false` by default */\n  withTableBorder?: boolean;\n\n  /** Determines whether the table should have borders between columns, `false` by default */\n  withColumnBorders?: boolean;\n\n  /** Determines whether the table should have borders between rows, `true` by default */\n  withRowBorders?: boolean;\n\n  /** Horizontal cells spacing, key of `theme.spacing` or any valid CSS value for padding, numbers are converted to rem, default value is `xs` */\n  horizontalSpacing?: MantineSpacing;\n\n  /** Vertical cells spacing, key of `theme.spacing` or any valid CSS value for padding, numbers are converted to rem, default value is `xs` */\n  verticalSpacing?: MantineSpacing;\n\n  /** Determines whether every odd/even row background should be changed to `strippedColor`, if set to `true`, then `odd` value will be used, `false` by default  */\n  striped?: boolean | 'odd' | 'even';\n\n  /** Background color of striped rows, key of `theme.colors` or any valid CSS color */\n  stripedColor?: MantineColor;\n\n  /** Determines whether table rows background should change to `highlightOnHoverColor` when hovered, `false` by default */\n  highlightOnHover?: boolean;\n\n  /** Background color of table rows when hovered, key of `theme.colors` or any valid CSS color */\n  highlightOnHoverColor?: MantineColor;\n\n  /** Data that should be used to generate table, ignored if `children` prop is set */\n  data?: TableData;\n\n  /** Determines whether `Table.Thead` should be sticky, `false` by default */\n  stickyHeader?: boolean;\n\n  /** Offset from top at which `Table.Thead` should become sticky, `0` by default */\n  stickyHeaderOffset?: number | string;\n}\n\nexport type TableFactory = Factory<{\n  props: TableProps;\n  ref: HTMLTableElement;\n  stylesNames: TableStylesNames;\n  vars: TableCssVariables;\n  staticComponents: {\n    Thead: typeof TableThead;\n    Tbody: typeof TableTbody;\n    Tfoot: typeof TableTfoot;\n    Td: typeof TableTd;\n    Th: typeof TableTh;\n    Tr: typeof TableTr;\n    Caption: typeof TableCaption;\n    ScrollContainer: typeof TableScrollContainer;\n    DataRenderer: typeof TableDataRenderer;\n  };\n}>;\n\nconst defaultProps: Partial<TableProps> = {\n  withRowBorders: true,\n  verticalSpacing: 7,\n};\n\nconst varsResolver = createVarsResolver<TableFactory>(\n  (\n    theme,\n    {\n      layout,\n      captionSide,\n      horizontalSpacing,\n      verticalSpacing,\n      borderColor,\n      stripedColor,\n      highlightOnHoverColor,\n      striped,\n      highlightOnHover,\n      stickyHeaderOffset,\n      stickyHeader,\n    }\n  ) => ({\n    table: {\n      '--table-layout': layout,\n      '--table-caption-side': captionSide,\n      '--table-horizontal-spacing': getSpacing(horizontalSpacing),\n      '--table-vertical-spacing': getSpacing(verticalSpacing),\n      '--table-border-color': borderColor ? getThemeColor(borderColor, theme) : undefined,\n      '--table-striped-color':\n        striped && stripedColor ? getThemeColor(stripedColor, theme) : undefined,\n      '--table-highlight-on-hover-color':\n        highlightOnHover && highlightOnHoverColor\n          ? getThemeColor(highlightOnHoverColor, theme)\n          : undefined,\n      '--table-sticky-header-offset': stickyHeader ? rem(stickyHeaderOffset) : undefined,\n    },\n  })\n);\n\nexport const Table = factory<TableFactory>((_props, ref) => {\n  const props = useProps('Table', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    horizontalSpacing,\n    verticalSpacing,\n    captionSide,\n    stripedColor,\n    highlightOnHoverColor,\n    striped,\n    highlightOnHover,\n    withColumnBorders,\n    withRowBorders,\n    withTableBorder,\n    borderColor,\n    layout,\n    variant,\n    data,\n    children,\n    stickyHeader,\n    stickyHeaderOffset,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<TableFactory>({\n    name: 'Table',\n    props,\n    className,\n    style,\n    classes,\n    classNames,\n    styles,\n    unstyled,\n    rootSelector: 'table',\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <TableProvider\n      value={{\n        getStyles,\n        stickyHeader,\n        striped: striped === true ? 'odd' : striped || undefined,\n        highlightOnHover,\n        withColumnBorders,\n        withRowBorders,\n        captionSide: captionSide || 'bottom',\n      }}\n    >\n      <Box\n        component=\"table\"\n        variant={variant}\n        ref={ref}\n        mod={{ 'data-with-table-border': withTableBorder }}\n        {...getStyles('table')}\n        {...others}\n      >\n        {children || (!!data && <TableDataRenderer data={data} />)}\n      </Box>\n    </TableProvider>\n  );\n});\n\nTable.classes = classes;\nTable.displayName = '@mantine/core/Table';\nTable.Td = TableTd;\nTable.Th = TableTh;\nTable.Tr = TableTr;\nTable.Thead = TableThead;\nTable.Tbody = TableTbody;\nTable.Tfoot = TableTfoot;\nTable.Caption = TableCaption;\nTable.ScrollContainer = TableScrollContainer;\nTable.DataRenderer = TableDataRenderer;\n"],"names":["allbattleLogsQueryDocument","graphql","useAllBattleLogs","useGraphQL","undefined","select","data","battleLogs","battleLogByIdQueryDocument","useBattleLogById","_ref","battleId","enabled","battleLogById","placeholderData","previousData","battleLogsByLobbyIdQueryDocument","useBattleLogsByLobbyId","_ref2","lobbyId","getCharacterFromBattleLogById","battleLog","characterId","_battleLog$lobby$char","lobby","characters","find","_ref3","character","id","charactersByOwnerQueryDocument","resetUseMyCharacrersQuery","primaryKey","getGraphQLPrimaryKey","queryClient","invalidateQueries","queryKey","useMyCharacters","owner_eq","useMyCharacter","_account$decodedAddre","account","useAccount","queryResult","decodedAddress","myCharacters","length","TheButton","children","onClick","buttonProps","_jsx","Button","radius","bg","size","px","style","theme","boxShadow","shadows","sm","styles","root","backgroundColor","colors","gray","color","useMyAccountId","History","_battleLogs$toReverse","navigate","useNavigate","myAccountId","battleLogsUnfiltered","searchParams","setSearchParams","useSearchParams","isFiltered","get","useEffect","React","_myCharacters$charact","myCharactersIds","map","filter","includes","character1","character2","inProgressRows","toReversed","char1Id","char2Id","playersNames","charId","_getCharacterFromBatt","_getCharacterFromBatt2","name","playersOwners","_getCharacterFromBatt3","_getCharacterFromBatt4","owner","winner","winnerName","winnerOwner","includesMyCharacter","className","_jsxs","Flex","alignSelf","mb","prev","newParams","URLSearchParams","set","Table","horizontalSpacing","verticalSpacing","Thead","Tr","header","idx","Th","w","CELL_WIDTH","ta","TEXT_ALIGN","Tbody","row","split","newRoutes","tournamentResult","join","playerName","cellContent","Td","TableProvider","useTableContext","createSafeContext","getDataAttributes","ctx","options","columnBorder","withColumnBorders","rowBorder","withRowBorders","striped","highlightOnHover","captionSide","stickyHeader","tableElement","element","charAt","toUpperCase","slice","Component","factory","_props","ref","props","useProps","classNames","others","Box","component","getStyles","displayName","classes","TableTh","TableTd","TableTr","TableThead","TableTbody","TableTfoot","TableCaption","TableDataRenderer","caption","head","item","index","key","body","rowIndex","foot","defaultProps","type","varsResolver","createVarsResolver","_","minWidth","scrollContainer","rem","TableScrollContainer","unstyled","vars","useStyles","rootSelector","ScrollArea","offsetScrollbars","layout","borderColor","stripedColor","highlightOnHoverColor","stickyHeaderOffset","table","getSpacing","getThemeColor","withTableBorder","variant","value","mod","Tfoot","Caption","ScrollContainer","DataRenderer"],"sourceRoot":""}