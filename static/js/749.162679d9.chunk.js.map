{"version":3,"file":"static/js/749.162679d9.chunk.js","mappings":"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","sources":["app/api/sendMessages.ts","components/Panel/Panel.tsx","components/TheButton/TheButton.tsx","hooks/hooks.ts","pages/@shared/CharInfo/CharInfo.tsx","pages/@shared/CharStats/CharStats.tsx","webpack://dapp/./src/pages/BattleResult/components/BlackButton.module.css?2521","pages/BattleResult/components/BlackButton.tsx","components/Alert/Alert.tsx","pages/@shared/NoCharacterWidget.tsx","pages/MyProfile/components/UploadStrategyWidget.tsx","../node_modules/@tanstack/query-core/src/queriesObserver.ts","../node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/query-core/src/hydration.ts","../node_modules/@tanstack/react-query/src/useQueries.ts","../node_modules/@tanstack/react-query/src/useSuspenseQuery.ts","../node_modules/@tanstack/react-query/src/useSuspenseInfiniteQuery.ts","../node_modules/@tanstack/react-query/src/useSuspenseQueries.ts","../node_modules/@tanstack/react-query/src/queryOptions.ts","../node_modules/@tanstack/react-query/src/infiniteQueryOptions.ts","../node_modules/@tanstack/react-query/src/HydrationBoundary.tsx","../node_modules/@tanstack/react-query/src/useIsFetching.ts","../node_modules/@tanstack/react-query/src/useMutationState.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","../node_modules/@tanstack/react-query/src/useInfiniteQuery.ts","../node_modules/react-query-kit/src/utils.ts","../node_modules/react-query-kit/src/createBaseQuery.ts","app/api/mintState.ts","../node_modules/react-query-kit/src/createQuery.ts","app/api/queryMiddleware/withApi.ts","pages/MyProfile/MyProfile.tsx","pages/MyProfile/hooks/useStats.ts","../node_modules/@mantine/core/src/components/Title/get-title-size.ts","../node_modules/@mantine/core/src/components/Title/Title.tsx"],"sourcesContent":["import { ProgramMetadata } from \"@gear-js/api\";\nimport { useSendMessage } from \"@gear-js/react-hooks\";\nimport {\n  ARENA_METADATA,\n  ARENA_PROGRAM_ID,\n  MINT_METADATA,\n  MINT_PROGRAM_ID,\n} from \"consts\";\nimport { useCallback, useMemo } from \"react\";\n\nconst options = {\n  isMaxGasLimit: true,\n};\n\nexport const useSendToArena = () => {\n  const meta = useMemo(() => ProgramMetadata.from(ARENA_METADATA), []);\n  const sendToArenaContract = useSendMessage(ARENA_PROGRAM_ID, meta, options);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(sendToArenaContract, []);\n};\n\nexport const useSendToMintContract = () => {\n  const meta = useMemo(() => ProgramMetadata.from(MINT_METADATA), []);\n  const sendToMintContract = useSendMessage(MINT_PROGRAM_ID, meta, options);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(sendToMintContract, []);\n};\n","import { Paper, PaperProps } from \"@mantine/core\";\n\nexport const Panel = ({ children, turnOffPadding = false, ...paperProps }: PaperProps & {\n  children: React.ReactNode,\n  turnOffPadding?: boolean;\n}) => {\n  return (\n    <Paper\n      {...(turnOffPadding ? {} : { p: \"lg\" })}\n      bg={\"rgba(0, 0, 0, 0.7)\"}\n      withBorder\n      radius={12}\n      style={{\n        border: \"2px solid #eaecf0\",\n        color: 'white'\n      }}\n      {...paperProps}\n    >\n      {children}\n    </Paper>\n  );\n};\n","import { ComponentPropsWithoutRef } from \"react\";\nimport { Button, type ButtonProps } from \"@mantine/core\";\n\nexport const TheButton = ({\n  children,\n  onClick,\n  ...buttonProps\n}: ButtonProps & ComponentPropsWithoutRef<typeof Button<'button'>>) => {\n  return (\n    <Button\n      onClick={onClick}\n      //\n      radius=\"sm\"\n      bg=\"primary\"\n      size=\"md\"\n      px=\"xl\"\n      style={theme => ({\n        boxShadow: theme.shadows.sm,\n      })}\n      styles={(theme) => ({\n        root: {\n          '&:disabled': {\n            backgroundColor: theme.colors.gray[5],\n            color: theme.colors.gray[6],\n          },\n        },\n      })}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  );\n};\n","/**\n * I didn't want to name this file \"index.ts\" and named it \"hooks.ts\" instead\n * so that it's easier to open from vscode search menu cmd+P menu\n */\n\nimport { useAccount } from \"@gear-js/react-hooks\";\n\nexport const useMyAccountId = () => {\n  const { account } = useAccount();\n  return account?.decodedAddress;\n};\n","import { Box, BoxProps } from \"@mantine/core\";\nimport \"./styles.scss\";\nimport AvatarIcon from \"assets/images/AvatarV2.png\";\nimport { useEffect, useState } from \"react\";\n\nexport const CharInfo = ({\n  isMyCharacter,\n  name,\n  shortId,\n  //\n  exp,\n  maxExp,\n  level,\n  ...boxProps\n}: {\n  isMyCharacter: boolean;\n  name: string;\n  shortId: string;\n  //\n  exp: number;\n  maxExp: number;\n  level: number;\n} & BoxProps) => {\n  return (\n    <Box className=\"profile_user\" {...boxProps}>\n      <img className={`profile_avatar ${isMyCharacter ? 'my_avatar' : ''}`} src={AvatarIcon} alt=\"AvatarIcon\" />\n      <div className=\"profile_name\">\n        <p>{name}</p>\n        <p>{shortId}</p>\n\n        <LevelBar maxXp={maxExp} curXp={exp} level={level} />\n      </div>\n    </Box>\n  );\n};\n\nconst LevelBar = ({\n  maxXp,\n  curXp,\n  level,\n}: { maxXp: number; curXp: number; level: number; }) => {\n  const [percent, setPercent] = useState(0);\n  useEffect(() => {\n    setTimeout(() => setPercent((curXp / maxXp) * 100), 300);\n  });\n\n  return (\n    <div className=\"level_bar_wrapper\">\n      <span className=\"level_bar_text\">Level</span>\n\n      <div className=\"level_bar\">\n        <div className=\"level_bar_progress\" style={{ maxWidth: `${percent}%` }} />\n      </div>\n\n      <span className=\"level_bar_level\">{level}</span>\n    </div>\n  );\n};\n","import { Divider, Flex, Text, Box, Button, Tooltip } from \"@mantine/core\";\nimport type { FlexProps, BoxProps } from \"@mantine/core\";\n\nexport const CharStats = ({\n  character,\n  isReadyForLevelUp = false,\n  selectAttr,\n  isLoading,\n  ...boxProps\n}: {\n  character: Character;\n  isReadyForLevelUp?: boolean;\n  selectAttr?: (capitalizedAttrName: string) => void;\n  isLoading?: boolean;\n} & BoxProps) => {\n  return (\n    <Box {...boxProps}\n      style={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n      }}\n    >\n      <Divider mt=\"sm\" />\n      <Attribute attributeName=\"Rating\" value={character.tier_rating ?? 0} my=\"lg\" />\n      <Divider mb=\"xs\" />\n      {[\n        'strength',\n        'agility',\n        'vitality',\n        'stamina',\n        'intelligence',\n      ].map((attrName) => (\n        <Attribute\n          key={attrName}\n          attributeName={attrName}\n          value={character.attributes[attrName]}\n          my=\"sm\"\n          selectAttr={isReadyForLevelUp ? selectAttr : undefined}\n          isLoading={isLoading}\n        />\n      ))}\n    </Box >\n  );\n};\n\nconst Attribute = ({\n  attributeName,\n  value,\n  selectAttr,\n  isLoading,\n  ...flexProps\n}: {\n  attributeName: string;\n  value: number;\n  selectAttr?: (capitalizedAttrName: string) => void;\n  isLoading?: boolean;\n} & FlexProps) => {\n  return (\n    <Flex justify={'space-between'} align=\"center\" {...flexProps}>\n\n      <Flex align='center' gap=\"sm\">\n        {selectAttr && (\n          <Tooltip\n            multiline\n            label={\"You have points to spend after leveling up.\\nClick on the attribute to increase it.\"}\n            position=\"top-start\"\n            transitionProps={{ duration: 400 }}\n          >\n            <Button\n              variant=\"outline\"\n              onClick={() => selectAttr(attributeName)}\n              c=\"white\"\n              style={{ paddingInline: \".8rem\" }}\n              {...{ isLoading }}\n            >\n              +\n            </Button>\n          </Tooltip>\n        )}\n        <Text>{attributeName}</Text>\n      </Flex>\n\n      <Text fw=\"600\">{value}</Text>\n\n    </Flex >\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"blackButton\":\"BlackButton_blackButton__a-fm1\"};","import { Button, ButtonProps } from \"@mantine/core\";\nimport styles from './BlackButton.module.css';\nimport clsx from \"clsx\";\n\nexport const BlackButton = ({\n  children,\n  style,\n  onClick,\n  buttonRef,\n  className,\n  ...buttonProps\n}: {\n  onClick?: () => void;\n  buttonRef?: React.ForwardedRef<HTMLButtonElement>;\n  children: React.ReactNode;\n} & ButtonProps) => {\n  return <Button\n    className={clsx(styles.blackButton, className)}\n    ref={buttonRef}\n    h={44}\n    bg=\"black\"\n    style={{\n      display: \"inline-flex\",\n      padding: \"10px 16px\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      gap: \"12px\",\n      //\n      borderRadius: \"8px\",\n      transition: 'background .1s ease-in-out',\n      ...(style ?? {})\n    }}\n\n    {...buttonProps}\n    onClick={onClick}\n  >\n    {children}\n  </Button>;\n};\n","import { FC, memo } from \"react\";\nimport { Button, ButtonProps } from \"components/Button\";\nimport \"./styles.scss\";\n\ntype AlertProps = {\n  title: string;\n  subTitle?: string;\n  buttonsSlot: Array<ButtonProps>;\n};\n\nexport const Alert: FC<AlertProps> = memo(\n  ({ buttonsSlot, title, subTitle }) => {\n    return (\n      <div className=\"alert\">\n        <div className=\"alert_window\">\n          <p className=\"alert_title\">{title}</p>\n          {subTitle && <p className=\"alert_subTitle\">{subTitle}</p>}\n          <div className=\"alert_buttons\">\n            {buttonsSlot.map(({ children, ...restButtonProps }, i) => (\n              <>\n                {i % 2 ? <div className=\"alert_divider\" key={i}></div> : null}\n                <Button {...restButtonProps}>{children}</Button>\n              </>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n","import { Stack, Title } from \"@mantine/core\";\nimport { routes } from \"app/routes\";\nimport { Panel } from \"components/Panel\";\nimport { TheButton } from \"components/TheButton\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const NoCharacterWidget = () => {\n  const navigate = useNavigate();\n\n  return (\n    <Stack justify=\"center\" align=\"center\" w=\"100%\" my=\"auto\">\n      <Panel w={375}>\n        <Title\n          order={3}\n          mb=\"lg\"\n        >\n          You don't have a character yet\n        </Title>\n        <TheButton onClick={() => navigate(routes.mintCharacter)} w=\"100%\">\n          Create\n        </TheButton>\n      </Panel>\n    </Stack>\n  );\n};\n","import { Anchor, Button, Flex, Stack, Text, Tooltip } from \"@mantine/core\";\nimport { StrategyInput } from \"components/StrategyInput\";\nimport { getCodeIdsFromLocalStorage } from \"hooks/useUploadCode\";\nimport { BlackButton } from \"pages/BattleResult/components/BlackButton\";\nimport React from \"react\";\nimport { useSendToMintContract } from '../../../app/api/sendMessages';\nimport { MAX_GAS_LIMIT } from \"consts\";\nimport { useShouldUseVoucher } from \"hooks/useShouldUseVoucher\";\n\nexport const UploadStrategyWidget = () => {\n  const [isVisible, setIsVisible] = React.useState(false);\n\n  /**\n   * Voucher\n   */\n\n  const shouldUseVoucher = useShouldUseVoucher();\n\n  /**\n   * Upload code \n   */\n\n  const [data, setData] = React.useState({\n    codeId: getCodeIdsFromLocalStorage()[0] ?? \"\",\n    name: \"\",\n  });\n\n  const codeId = data.codeId;\n  const setCodeId = (codeId) => setData({ ...data, codeId });\n  const onUploadCodeChange = (codeId) => setData({ ...data, codeId });\n\n  /**\n   * Run contract method UpdateCharacter\n   */\n\n  const sendToMintContract = useSendToMintContract();\n\n  /**\n   * \n   */\n\n  const [isUpdating, setIsUpdating] = React.useState(false);\n\n  const handleUpdateCharacter = React.useCallback(async () => {\n    setIsUpdating(true);\n\n    const payload = {\n      UpdateCharacter: {\n        code_id: codeId,\n      },\n    };\n\n    sendToMintContract({\n      payload,\n      gasLimit: MAX_GAS_LIMIT,\n      withVoucher: shouldUseVoucher,\n      onSuccess: (result) => {\n        console.log(\"UpdateCharacter message successfully sent\", result);\n        setIsUpdating(false);\n      },\n      onError: () => {\n        console.log(\"Error while trying to call UpdateCharacter method \");\n        setIsUpdating(false);\n      },\n    });\n\n\n  }, [codeId, sendToMintContract, shouldUseVoucher]);\n\n\n  if (!isVisible) {\n    return (\n      <Tooltip\n        multiline\n        label={(\n          <Text >\n            You can upload your compiled strategy here or change to the previously uploaded.<br />\n            <Anchor\n              href={'https://impulse-dao.gitbook.io/impulse-dao/games-for-developers/arena/arena-v0.2/creating-a-gladiator'}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              More info here\n            </Anchor>\n          </Text>\n        )}\n        color=\"black\"\n        position=\"bottom-start\"\n        withArrow\n        closeDelay={200}\n        p=\"xs\"\n        w=\"350px\"\n        transitionProps={{\n          duration: 600,\n          transition: 'pop-top-left'\n        }}\n        variant=\"outline\"\n        style={{ pointerEvents: 'auto' }}\n\n      >\n        <div>\n          <BlackButton\n            w=\"100%\"\n            onClick={() => setTimeout(() => setIsVisible(true), 100)}\n            disabled={isUpdating}\n            loading={isUpdating}\n          >\n            Change Strategy\n          </BlackButton>\n        </div>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Stack gap={'sm'} >\n      <StrategyInput\n        codeId={codeId}\n        setCodeId={setCodeId}\n        onUploadCodeChange={onUploadCodeChange}\n      />\n      <Flex gap=\"md\">\n        <Button\n          variant=\"outline\"\n          flex={1}\n          color=\"white\"\n          onClick={() => setIsVisible(false)}\n        >\n          Cancel\n        </Button>\n        <Button\n          flex={1}\n          onClick={() => {\n            handleUpdateCharacter();\n            setIsVisible(false);\n          }}\n        >\n          Confirm\n        </Button>\n      </Flex>\n    </Stack >\n  );\n};\n","import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: (result: Array<QueryObserverResult>) => TCombinedResult\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #observers: Array<QueryObserver>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #combinedResult!: TCombinedResult\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#queries = queries\n    this.#options = options\n    this.#observers = []\n\n    this.#setResult([])\n    this.setQueries(queries, options)\n  }\n\n  #setResult(value: Array<QueryObserverResult>) {\n    this.#result = value\n    this.#combinedResult = this.#combineResult(value)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#setResult(newResult)\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): TCombinedResult {\n    return this.#combinedResult\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result)\n      },\n      () => {\n        return matches.map((match, index) => {\n          const observerResult = result[index]!\n          return !match.defaultedQueryOptions.notifyOnChangeProps\n            ? match.observer.trackResult(observerResult)\n            : observerResult\n        })\n      },\n    ]\n  }\n\n  #combineResult(input: Array<QueryObserverResult>): TCombinedResult {\n    const combine = this.#options?.combine\n    if (combine) {\n      return replaceEqualDeep(this.#combinedResult, combine(input))\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObservers = this.#observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.#client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: Array<QueryObserverMatch> =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const currentObserver = this.#observers.find(\n        (o) => o.options.queryHash === defaultedOptions.queryHash,\n      )\n      return (\n        currentObserver ?? new QueryObserver(this.#client, defaultedOptions)\n      )\n    }\n\n    const newOrReusedObservers: Array<QueryObserverMatch> =\n      unmatchedQueries.map((options) => {\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      })\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#setResult(replaceAt(this.#result, index, result))\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.#result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type {\n  DefaultError,\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  TData,\n  InfiniteData<TQueryData, TPageParam>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward' },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward' },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<\n      TQueryFnData,\n      TError,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n    this.#currentMutation?.setOptions(this.options)\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ?? defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ?? defaultShouldDehydrateQuery\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) => (filterQuery(query) ? [dehydrateQuery(query)] : []))\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach((dehydratedMutation) => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n        meta: dehydratedMutation.meta,\n      },\n      dehydratedMutation.state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta }) => {\n    const query = queryCache.get(queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...dehydratedQueryState } = state\n        query.setState(dehydratedQueryState)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey,\n        queryHash,\n        meta,\n      },\n      // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      {\n        ...state,\n        fetchStatus: 'idle',\n      },\n    )\n  })\n}\n","'use client'\nimport * as React from 'react'\n\nimport {\n  QueriesObserver,\n  QueryObserver,\n  notifyManager,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureStaleTime,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefaultError,\n  QueriesObserverOptions,\n  QueriesPlaceholderDataFunction,\n  QueryClient,\n  QueryFunction,\n  QueryKey,\n  ThrowOnError,\n} from '@tanstack/query-core'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// `placeholderData` function always gets undefined passed\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = Omit<\n  UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  'placeholderData' | 'suspense'\n> & {\n  placeholderData?: TQueryFnData | QueriesPlaceholderDataFunction<TQueryFnData>\n}\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n        : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n          T extends [infer TQueryFnData, infer TError, infer TData]\n          ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseQueryOptionsForUseQueries<TQueryFnData>\n              : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n                T extends {\n                    queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseQueryOptionsForUseQueries<\n                    TQueryFnData,\n                    TError,\n                    TData,\n                    TQueryKey\n                  >\n                : T extends {\n                      queryFn?: QueryFunction<\n                        infer TQueryFnData,\n                        infer TQueryKey\n                      >\n                      throwOnError?: ThrowOnError<any, infer TError, any, any>\n                    }\n                  ? UseQueryOptionsForUseQueries<\n                      TQueryFnData,\n                      TError,\n                      TQueryFnData,\n                      TQueryKey\n                    >\n                  : // Fallback\n                    UseQueryOptionsForUseQueries\n\n// A defined initialData setting should return a DefinedUseQueryResult rather than UseQueryResult\ntype GetDefinedOrUndefinedQueryResult<T, TData, TError = unknown> = T extends {\n  initialData?: infer TInitialData\n}\n  ? unknown extends TInitialData\n    ? UseQueryResult<TData, TError>\n    : TInitialData extends TData\n      ? DefinedUseQueryResult<TData, TError>\n      : TInitialData extends () => infer TInitialDataResult\n        ? unknown extends TInitialDataResult\n          ? UseQueryResult<TData, TError>\n          : TInitialDataResult extends TData\n            ? DefinedUseQueryResult<TData, TError>\n            : UseQueryResult<TData, TError>\n        : UseQueryResult<TData, TError>\n  : UseQueryResult<TData, TError>\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n        : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n          T extends [any, infer TError, infer TData]\n          ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n          : T extends [infer TQueryFnData, infer TError]\n            ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData>\n              : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n                T extends {\n                    queryFn?: QueryFunction<infer TQueryFnData, any>\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? GetDefinedOrUndefinedQueryResult<\n                    T,\n                    unknown extends TData ? TQueryFnData : TData,\n                    unknown extends TError ? DefaultError : TError\n                  >\n                : T extends {\n                      queryFn?: QueryFunction<infer TQueryFnData, any>\n                      throwOnError?: ThrowOnError<any, infer TError, any, any>\n                    }\n                  ? GetDefinedOrUndefinedQueryResult<\n                      T,\n                      TQueryFnData,\n                      unknown extends TError ? DefaultError : TError\n                    >\n                  : // Fallback\n                    UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends Array<any>,\n  Result extends Array<any> = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryOptionsForUseQueries>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...Result, GetOptions<Head>]\n      : T extends [infer Head, ...infer Tail]\n        ? QueriesOptions<\n            [...Tail],\n            [...Result, GetOptions<Head>],\n            [...Depth, 1]\n          >\n        : Array<unknown> extends T\n          ? T\n          : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n            // use this to infer the param types in the case of Array.map() argument\n            T extends Array<\n                UseQueryOptionsForUseQueries<\n                  infer TQueryFnData,\n                  infer TError,\n                  infer TData,\n                  infer TQueryKey\n                >\n              >\n            ? Array<\n                UseQueryOptionsForUseQueries<\n                  TQueryFnData,\n                  TError,\n                  TData,\n                  TQueryKey\n                >\n              >\n            : // Fallback\n              Array<UseQueryOptionsForUseQueries>\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends Array<any>,\n  Result extends Array<any> = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryResult>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...Result, GetResults<Head>]\n      : T extends [infer Head, ...infer Tail]\n        ? QueriesResults<\n            [...Tail],\n            [...Result, GetResults<Head>],\n            [...Depth, 1]\n          >\n        : T extends Array<\n              UseQueryOptionsForUseQueries<\n                infer TQueryFnData,\n                infer TError,\n                infer TData,\n                any\n              >\n            >\n          ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n            Array<\n              UseQueryResult<\n                unknown extends TData ? TQueryFnData : TData,\n                unknown extends TError ? DefaultError : TError\n              >\n            >\n          : // Fallback\n            Array<UseQueryResult>\n\nexport function useQueries<\n  T extends Array<any>,\n  TCombinedResult = QueriesResults<T>,\n>(\n  {\n    queries,\n    ...options\n  }: {\n    queries: readonly [...QueriesOptions<T>]\n    combine?: (result: QueriesResults<T>) => TCombinedResult\n  },\n  queryClient?: QueryClient,\n): TCombinedResult {\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((opts) => {\n        const defaultedOptions = client.defaultQueryOptions(opts)\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, client, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureStaleTime(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new QueriesObserver<TCombinedResult>(\n        client,\n        defaultedQueries,\n        options as QueriesObserverOptions<TCombinedResult>,\n      ),\n  )\n\n  const [optimisticResult, getCombinedResult, trackResult] =\n    observer.getOptimisticResult(defaultedQueries)\n\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(\n      defaultedQueries,\n      options as QueriesObserverOptions<TCombinedResult>,\n      {\n        listeners: false,\n      },\n    )\n  }, [defaultedQueries, options, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const opts = defaultedQueries[index]\n\n        if (opts) {\n          const queryObserver = new QueryObserver(client, opts)\n          if (shouldSuspend(opts, result)) {\n            return fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    observer.setQueries(\n      defaultedQueries,\n      options as QueriesObserverOptions<TCombinedResult>,\n      {\n        listeners: false,\n      },\n    )\n    throw Promise.all(suspensePromises)\n  }\n  const observerQueries = observer.getQueries()\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) =>\n      getHasError({\n        result,\n        errorResetBoundary,\n        throwOnError: defaultedQueries[index]?.throwOnError ?? false,\n        query: observerQueries[index]!,\n      }),\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return getCombinedResult(trackResult())\n}\n","'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport { defaultThrowOnError } from './suspense'\nimport type { UseSuspenseQueryOptions, UseSuspenseQueryResult } from './types'\nimport type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'\n\nexport function useSuspenseQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseSuspenseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseSuspenseQueryResult<TData, TError> {\n  return useBaseQuery(\n    {\n      ...options,\n      enabled: true,\n      suspense: true,\n      throwOnError: defaultThrowOnError,\n    },\n    QueryObserver,\n    queryClient,\n  ) as UseSuspenseQueryResult<TData, TError>\n}\n","'use client'\nimport { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport { defaultThrowOnError } from './suspense'\nimport type {\n  InfiniteQueryObserverSuccessResult,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  DefaultError,\n  InfiniteData,\n  QueryClient,\n  QueryKey,\n} from '@tanstack/query-core'\nimport type {\n  UseSuspenseInfiniteQueryOptions,\n  UseSuspenseInfiniteQueryResult,\n} from './types'\n\nexport function useSuspenseInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseSuspenseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseSuspenseInfiniteQueryResult<TData, TError> {\n  return useBaseQuery(\n    {\n      ...options,\n      enabled: true,\n      suspense: true,\n      throwOnError: defaultThrowOnError,\n    },\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  ) as InfiniteQueryObserverSuccessResult<TData, TError>\n}\n","'use client'\nimport { useQueries } from './useQueries'\nimport { defaultThrowOnError } from './suspense'\nimport type { UseSuspenseQueryOptions, UseSuspenseQueryResult } from './types'\nimport type {\n  DefaultError,\n  QueryClient,\n  QueryFunction,\n  ThrowOnError,\n} from '@tanstack/query-core'\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetSuspenseOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseSuspenseQueryOptions<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseSuspenseQueryOptions<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseSuspenseQueryOptions<unknown, TError, TData>\n        : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n          T extends [infer TQueryFnData, infer TError, infer TData]\n          ? UseSuspenseQueryOptions<TQueryFnData, TError, TData>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseSuspenseQueryOptions<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseSuspenseQueryOptions<TQueryFnData>\n              : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n                T extends {\n                    queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseSuspenseQueryOptions<\n                    TQueryFnData,\n                    TError,\n                    TData,\n                    TQueryKey\n                  >\n                : T extends {\n                      queryFn?: QueryFunction<\n                        infer TQueryFnData,\n                        infer TQueryKey\n                      >\n                      throwOnError?: ThrowOnError<any, infer TError, any, any>\n                    }\n                  ? UseSuspenseQueryOptions<\n                      TQueryFnData,\n                      TError,\n                      TQueryFnData,\n                      TQueryKey\n                    >\n                  : // Fallback\n                    UseSuspenseQueryOptions\n\ntype GetSuspenseResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseSuspenseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseSuspenseQueryResult<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseSuspenseQueryResult<TData, TError>\n        : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n          T extends [any, infer TError, infer TData]\n          ? UseSuspenseQueryResult<TData, TError>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseSuspenseQueryResult<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseSuspenseQueryResult<TQueryFnData>\n              : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n                T extends {\n                    queryFn?: QueryFunction<infer TQueryFnData, any>\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseSuspenseQueryResult<\n                    unknown extends TData ? TQueryFnData : TData,\n                    unknown extends TError ? DefaultError : TError\n                  >\n                : T extends {\n                      queryFn?: QueryFunction<infer TQueryFnData, any>\n                      throwOnError?: ThrowOnError<any, infer TError, any, any>\n                    }\n                  ? UseSuspenseQueryResult<\n                      TQueryFnData,\n                      unknown extends TError ? DefaultError : TError\n                    >\n                  : // Fallback\n                    UseSuspenseQueryResult\n\n/**\n * SuspenseQueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type SuspenseQueriesOptions<\n  T extends Array<any>,\n  Result extends Array<any> = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseSuspenseQueryOptions>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...Result, GetSuspenseOptions<Head>]\n      : T extends [infer Head, ...infer Tail]\n        ? SuspenseQueriesOptions<\n            [...Tail],\n            [...Result, GetSuspenseOptions<Head>],\n            [...Depth, 1]\n          >\n        : Array<unknown> extends T\n          ? T\n          : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n            // use this to infer the param types in the case of Array.map() argument\n            T extends Array<\n                UseSuspenseQueryOptions<\n                  infer TQueryFnData,\n                  infer TError,\n                  infer TData,\n                  infer TQueryKey\n                >\n              >\n            ? Array<\n                UseSuspenseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n              >\n            : // Fallback\n              Array<UseSuspenseQueryOptions>\n\n/**\n * SuspenseQueriesResults reducer recursively maps type param to results\n */\nexport type SuspenseQueriesResults<\n  T extends Array<any>,\n  Result extends Array<any> = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseSuspenseQueryResult>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...Result, GetSuspenseResults<Head>]\n      : T extends [infer Head, ...infer Tail]\n        ? SuspenseQueriesResults<\n            [...Tail],\n            [...Result, GetSuspenseResults<Head>],\n            [...Depth, 1]\n          >\n        : T extends Array<\n              UseSuspenseQueryOptions<\n                infer TQueryFnData,\n                infer TError,\n                infer TData,\n                any\n              >\n            >\n          ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n            Array<\n              UseSuspenseQueryResult<\n                unknown extends TData ? TQueryFnData : TData,\n                unknown extends TError ? DefaultError : TError\n              >\n            >\n          : // Fallback\n            Array<UseSuspenseQueryResult>\n\nexport function useSuspenseQueries<\n  T extends Array<any>,\n  TCombinedResult = SuspenseQueriesResults<T>,\n>(\n  options: {\n    queries: readonly [...SuspenseQueriesOptions<T>]\n    combine?: (result: SuspenseQueriesResults<T>) => TCombinedResult\n  },\n  queryClient?: QueryClient,\n): TCombinedResult {\n  return useQueries(\n    {\n      ...options,\n      queries: options.queries.map((query) => ({\n        ...query,\n        suspense: true,\n        throwOnError: defaultThrowOnError,\n        enabled: true,\n      })),\n    } as any,\n    queryClient,\n  )\n}\n","import type { DataTag, DefaultError, QueryKey } from '@tanstack/query-core'\nimport type { UseQueryOptions } from './types'\n\nexport type UndefinedInitialDataOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = UseQueryOptions<TQueryFnData, TError, TData, TQueryKey> & {\n  initialData?: undefined\n}\n\ntype NonUndefinedGuard<T> = T extends undefined ? never : T\n\nexport type DefinedInitialDataOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = UseQueryOptions<TQueryFnData, TError, TData, TQueryKey> & {\n  initialData:\n    | NonUndefinedGuard<TQueryFnData>\n    | (() => NonUndefinedGuard<TQueryFnData>)\n}\n\nexport function queryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey> & {\n  queryKey: DataTag<TQueryKey, TData>\n}\n\nexport function queryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n): DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey> & {\n  queryKey: DataTag<TQueryKey, TData>\n}\n\nexport function queryOptions(options: unknown) {\n  return options\n}\n","import type { DataTag } from '@tanstack/query-core'\nimport type { InfiniteData } from '@tanstack/query-core'\nimport type { UseInfiniteQueryOptions } from './types'\nimport type { DefaultError, QueryKey } from '@tanstack/query-core'\n\nexport type UndefinedInitialDataInfiniteOptions<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> = UseInfiniteQueryOptions<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryFnData,\n  TQueryKey,\n  TPageParam\n> & {\n  initialData?: undefined\n}\n\ntype NonUndefinedGuard<T> = T extends undefined ? never : T\n\nexport type DefinedInitialDataInfiniteOptions<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> = UseInfiniteQueryOptions<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryFnData,\n  TQueryKey,\n  TPageParam\n> & {\n  initialData:\n    | NonUndefinedGuard<InfiniteData<TQueryFnData, TPageParam>>\n    | (() => NonUndefinedGuard<InfiniteData<TQueryFnData, TPageParam>>)\n}\n\nexport function infiniteQueryOptions<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UndefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n): UndefinedInitialDataInfiniteOptions<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey,\n  TPageParam\n> & {\n  queryKey: DataTag<TQueryKey, TData>\n}\n\nexport function infiniteQueryOptions<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: DefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n): DefinedInitialDataInfiniteOptions<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey,\n  TPageParam\n> & {\n  queryKey: DataTag<TQueryKey, TData>\n}\n\nexport function infiniteQueryOptions(options: unknown) {\n  return options\n}\n","'use client'\nimport * as React from 'react'\n\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  DehydratedState,\n  HydrateOptions,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport interface HydrationBoundaryProps {\n  state?: unknown\n  options?: Omit<HydrateOptions, 'defaultOptions'> & {\n    defaultOptions?: Omit<HydrateOptions['defaultOptions'], 'mutations'>\n  }\n  children?: React.ReactNode\n  queryClient?: QueryClient\n}\n\nexport const HydrationBoundary = ({\n  children,\n  options = {},\n  state,\n  queryClient,\n}: HydrationBoundaryProps) => {\n  const client = useQueryClient(queryClient)\n  const [hydrationQueue, setHydrationQueue] = React.useState<\n    DehydratedState['queries'] | undefined\n  >()\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // This useMemo is for performance reasons only, everything inside it _must_\n  // be safe to run in every render and code here should be read as \"in render\".\n  //\n  // This code needs to happen during the render phase, because after initial\n  // SSR, hydration needs to happen _before_ children render. Also, if hydrating\n  // during a transition, we want to hydrate as much as is safe in render so\n  // we can prerender as much as possible.\n  //\n  // For any queries that already exist in the cache, we want to hold back on\n  // hydrating until _after_ the render phase. The reason for this is that during\n  // transitions, we don't want the existing queries and observers to update to\n  // the new data on the current page, only _after_ the transition is committed.\n  // If the transition is aborted, we will have hydrated any _new_ queries, but\n  // we throw away the fresh data for any existing ones to avoid unexpectedly\n  // updating the UI.\n  React.useMemo(() => {\n    if (state) {\n      if (typeof state !== 'object') {\n        return\n      }\n\n      const queryCache = client.getQueryCache()\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const queries = (state as DehydratedState).queries || []\n\n      const newQueries: DehydratedState['queries'] = []\n      const existingQueries: DehydratedState['queries'] = []\n      for (const dehydratedQuery of queries) {\n        const existingQuery = queryCache.get(dehydratedQuery.queryHash)\n\n        if (!existingQuery) {\n          newQueries.push(dehydratedQuery)\n        } else {\n          const hydrationIsNewer =\n            dehydratedQuery.state.dataUpdatedAt >\n            existingQuery.state.dataUpdatedAt\n          const queryAlreadyQueued = hydrationQueue?.find(\n            (query) => query.queryHash === dehydratedQuery.queryHash,\n          )\n\n          if (\n            hydrationIsNewer &&\n            (!queryAlreadyQueued ||\n              dehydratedQuery.state.dataUpdatedAt >\n                queryAlreadyQueued.state.dataUpdatedAt)\n          ) {\n            existingQueries.push(dehydratedQuery)\n          }\n        }\n      }\n\n      if (newQueries.length > 0) {\n        // It's actually fine to call this with queries/state that already exists\n        // in the cache, or is older. hydrate() is idempotent for queries.\n        hydrate(client, { queries: newQueries }, optionsRef.current)\n      }\n      if (existingQueries.length > 0) {\n        setHydrationQueue((prev) =>\n          prev ? [...prev, ...existingQueries] : existingQueries,\n        )\n      }\n    }\n  }, [client, hydrationQueue, state])\n\n  React.useEffect(() => {\n    if (hydrationQueue) {\n      hydrate(client, { queries: hydrationQueue }, optionsRef.current)\n      setHydrationQueue(undefined)\n    }\n  }, [client, hydrationQueue])\n\n  return children as React.ReactElement\n}\n","'use client'\nimport * as React from 'react'\nimport { notifyManager } from '@tanstack/query-core'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport type { QueryClient, QueryFilters } from '@tanstack/query-core'\n\nexport function useIsFetching(\n  filters?: QueryFilters,\n  queryClient?: QueryClient,\n): number {\n  const client = useQueryClient(queryClient)\n  const queryCache = client.getQueryCache()\n\n  return React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => client.isFetching(filters),\n    () => client.isFetching(filters),\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nimport { notifyManager, replaceEqualDeep } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  DefaultError,\n  Mutation,\n  MutationCache,\n  MutationFilters,\n  MutationState,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  queryClient?: QueryClient,\n): number {\n  const client = useQueryClient(queryClient)\n  return useMutationState(\n    { filters: { ...filters, status: 'pending' } },\n    client,\n  ).length\n}\n\ntype MutationStateOptions<TResult = MutationState> = {\n  filters?: MutationFilters\n  select?: (\n    mutation: Mutation<unknown, DefaultError, unknown, unknown>,\n  ) => TResult\n}\n\nfunction getResult<TResult = MutationState>(\n  mutationCache: MutationCache,\n  options: MutationStateOptions<TResult>,\n): Array<TResult> {\n  return mutationCache\n    .findAll(options.filters)\n    .map(\n      (mutation): TResult =>\n        (options.select\n          ? options.select(\n              mutation as Mutation<unknown, DefaultError, unknown, unknown>,\n            )\n          : mutation.state) as TResult,\n    )\n}\n\nexport function useMutationState<TResult = MutationState>(\n  options: MutationStateOptions<TResult> = {},\n  queryClient?: QueryClient,\n): Array<TResult> {\n  const mutationCache = useQueryClient(queryClient).getMutationCache()\n  const optionsRef = React.useRef(options)\n  const result = React.useRef<Array<TResult>>()\n  if (!result.current) {\n    result.current = getResult(mutationCache, options)\n  }\n\n  React.useEffect(() => {\n    optionsRef.current = options\n  })\n\n  return React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(() => {\n          const nextResult = replaceEqualDeep(\n            result.current,\n            getResult(mutationCache, optionsRef.current),\n          )\n          if (result.current !== nextResult) {\n            result.current = nextResult\n            notifyManager.schedule(onStoreChange)\n          }\n        }),\n      [mutationCache],\n    ),\n    () => result.current,\n    () => result.current,\n  )!\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","'use client'\nimport { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  InfiniteData,\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseInfiniteQueryResult,\n  UseInfiniteQueryOptions,\n  UseInfiniteQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataInfiniteOptions,\n  UndefinedInitialDataInfiniteOptions,\n} from './infiniteQueryOptions'\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UndefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: DefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): DefinedUseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery(\n  options: UseInfiniteQueryOptions,\n  queryClient?: QueryClient,\n) {\n  return useBaseQuery(\n    options,\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  )\n}\n","import * as TanstackReactQuery from '@tanstack/react-query'\nimport type { Query, QueryClient, QueryKey } from '@tanstack/react-query'\n\nimport type { Middleware } from './types'\n\nexport const ReactQuery = TanstackReactQuery\n\nexport const isV5 = !!ReactQuery.useSuspenseQuery\n\nexport const suspenseOptions = {\n  enabled: true,\n  suspense: true,\n  useErrorBoundary: (_error: unknown, query: Query) =>\n    typeof query.state.data === 'undefined',\n}\n\nexport const withMiddleware = (\n  hook: any,\n  defaultOptions: any,\n  type: 'queries' | 'mutations'\n) => {\n  return function useMiddleware(\n    options?: { client?: QueryClient; use?: Middleware[] },\n    queryClient?: QueryClient\n  ) {\n    const [uses, opts]: [Middleware[], any] = [\n      ReactQuery.useQueryClient(\n        // @ts-ignore Compatible with ReactQuery v4\n        isV5 ? queryClient : options\n      ).getDefaultOptions()[type],\n      defaultOptions,\n      options,\n    ].reduce(\n      ([u1, o1], { use: u2 = [], ...o2 } = {}) => [\n        [...u1, ...u2],\n        { ...o1, ...o2 },\n      ],\n      [[]]\n    )\n    const composedHook = uses.reduceRight((next, use) => use(next), hook)\n\n    return composedHook(opts, queryClient)\n  }\n}\n\nexport const getKey = (queryKey: QueryKey, variables?: any): QueryKey => {\n  return typeof variables === 'undefined' ? queryKey : [...queryKey, variables]\n}\n","import type {\n  QueryClient,\n  QueryFunctionContext,\n  UseBaseQueryOptions,\n  UseInfiniteQueryOptions,\n} from '@tanstack/react-query'\n\nimport type { AdditionalQueryOptions, Middleware } from './types'\nimport { getKey as getFullKey, withMiddleware } from './utils'\n\ninterface CreateBaseQueryOptions\n  extends Omit<UseInfiniteQueryOptions, 'queryFn'>,\n    AdditionalQueryOptions<any, any> {\n  use?: Middleware[]\n  variables?: any\n}\n\ntype QueryBaseHookOptions = Omit<\n  UseBaseQueryOptions,\n  'queryKey' | 'queryFn'\n> & {\n  fetcher?: any\n  variables?: any\n}\n\nexport const createBaseQuery = (\n  defaultOptions: any,\n  useRQHook: (options: any, queryClient?: any) => any,\n  overrideOptions?: Partial<UseInfiniteQueryOptions>\n): any => {\n  if (process.env.NODE_ENV !== 'production') {\n    // @ts-ignore\n    if (defaultOptions.useDefaultOptions) {\n      console.error(\n        '[Bug] useDefaultOptions is not supported, please use middleware instead.'\n      )\n    }\n\n    // @ts-ignore\n    if (defaultOptions.queryFn) {\n      console.error(\n        '[Bug] queryFn is not supported, please use fetcher instead.'\n      )\n    }\n  }\n\n  const {\n    queryKey,\n    fetcher,\n    queryKeyHashFn,\n    getPreviousPageParam,\n    getNextPageParam,\n    initialPageParam,\n  } = defaultOptions as CreateBaseQueryOptions\n\n  const getQueryOptions = (fetcherFn: any, variables: any) => {\n    return {\n      queryFn: (context: QueryFunctionContext) => fetcherFn(variables, context),\n      queryKey: getFullKey(queryKey, variables),\n    }\n  }\n\n  const getKey = (variables?: any) => getFullKey(queryKey, variables)\n\n  const getOptions = (variables: any) => {\n    return {\n      ...defaultOptions,\n      ...getQueryOptions(fetcher, variables),\n    }\n  }\n\n  const getFetchOptions = (variables: any) => {\n    return {\n      queryKeyHashFn,\n      getPreviousPageParam,\n      getNextPageParam,\n      initialPageParam,\n      ...getQueryOptions(fetcher, variables),\n    }\n  }\n\n  const useBaseHook = (\n    options: QueryBaseHookOptions,\n    queryClient?: QueryClient\n  ) => {\n    return useRQHook(\n      {\n        ...options,\n        ...overrideOptions,\n        ...getQueryOptions(options.fetcher, options.variables),\n      },\n      queryClient\n    )\n  }\n\n  return Object.assign(withMiddleware(useBaseHook, defaultOptions, 'queries'), {\n    fetcher,\n    getKey,\n    getOptions,\n    getFetchOptions,\n  })\n}\n","import { GearApi, ProgramMetadata } from \"@gear-js/api\";\nimport { MINT_METADATA, MINT_PROGRAM_ID } from \"consts\";\nimport { useMyAccountId } from \"hooks/hooks\";\n\nimport { createQuery } from \"react-query-kit\";\nimport { withApi } from \"./queryMiddleware/withApi\";\n\ntype OwnerId = HexString;\n\nconst useMintState = createQuery<\n  {\n    characters: Record<OwnerId, CharacterInContractState>;\n  },\n  {\n    programId: HexString;\n    metadata: string;\n  }\n>({\n  use: [withApi],\n  queryKey: [\"mintProgramState\"],\n  fetcher: async ({ programId, metadata }, context) => {\n    const mintMetadata = ProgramMetadata.from(metadata);\n    const api = context.meta?.api as GearApi | undefined;\n\n    const mintState = await api?.programState.read(\n      { programId, payload: undefined },\n      mintMetadata\n    );\n    return mintState?.toJSON() as {\n      characters: Record<OwnerId, CharacterInContractState>;\n    };\n  },\n});\n\n/**\n * This is a workaround until we have working indexer\n */\nexport const useMyCharacterFromContractState = () => {\n  const accountId = useMyAccountId();\n  const queryResult = useMintState({\n    variables: {\n      metadata: MINT_METADATA,\n      programId: MINT_PROGRAM_ID,\n    },\n    select: (state) => {\n      return state.characters?.[(accountId ?? \"\") as OwnerId] ?? null;\n    },\n  });\n\n  return queryResult;\n};\n","import { createBaseQuery } from './createBaseQuery'\nimport type { CompatibleError, CreateQueryOptions, QueryHook } from './types'\nimport { ReactQuery } from './utils'\n\nexport const createQuery = <\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError\n>(\n  options: CreateQueryOptions<TFnData, TVariables, TError>\n): QueryHook<TFnData, TVariables, TError> => {\n  return createBaseQuery(options, ReactQuery.useQuery)\n}\n","import { useApi } from \"@gear-js/react-hooks\";\nimport { Middleware } from \"react-query-kit\";\n\nexport const withApi: Middleware = (useQueryNext) => {\n  return (options) => {\n    const { api } = useApi();\n\n    return useQueryNext({\n      ...options,\n      meta: {\n        ...options.meta,\n        api,\n      },\n    });\n  };\n};\n","import { useParams } from \"react-router-dom\";\n//\nimport \"./styles.scss\";\n//\nimport LockSvg from \"../../assets/svg/lock.svg\";\nimport CharSvg from \"../../assets/svg/char.svg\";\nimport GoldCoin from \"../../assets/images/goldCoin.png\";\n//\nimport { getShortIdString } from \"utils\";\nimport { getFullEnergy, getFullHp } from \"consts\";\nimport { useStats } from \"./hooks/useStats\";\nimport { useCharacterById, useMyCharacter } from \"app/api/characters\";\n//\nimport { Flex, Image, Text } from \"@mantine/core\";\n//\nimport { Alert } from \"components/Alert/Alert\";\nimport { StatBar } from \"pages/@shared/StatBar\";\nimport { CharInfo } from \"pages/@shared/CharInfo\";\nimport { CharStats } from \"pages/@shared/CharStats/CharStats\";\nimport { SchoolOfMagic } from \"components/SchoolOfMagic\";\nimport { NoCharacterWidget } from \"pages/@shared/NoCharacterWidget\";\nimport { UploadStrategyWidget } from \"./components/UploadStrategyWidget\";\nimport { useMyCharacterFromContractState } from \"app/api/mintState\";\n\nexport const MyProfile = () => {\n  const { data: myCharacter, refetch: refetchMyCharacterQuery } = useMyCharacter();\n  const {\n    data: myCharacterFromState,\n    refetch: refetchMyCharacterFromStateQuery\n  } = useMyCharacterFromContractState();\n\n\n  const refetch = () => {\n    console.log('refetching YAY');\n    refetchMyCharacterQuery();\n    refetchMyCharacterFromStateQuery();\n  };\n\n  if (!myCharacter || !myCharacterFromState) {\n    return <div className=\"profile\"><NoCharacterWidget /></div>;\n  }\n\n  return <Profile character={myCharacter} myCharacter={myCharacterFromState} onSuccessfulLevelUp={refetch} />;\n};\n\nexport const ProfilePage = () => {\n  const params = useParams();\n\n  if (!params.id) {\n    throw new Error(\"No id provided\");\n  }\n\n  const { data: character } = useCharacterById({ id: params.id });\n  const { data: myCharacterFromState } = useMyCharacterFromContractState();\n\n  if (!character || !myCharacterFromState) {\n    return null;\n  }\n\n  return <Profile character={character} myCharacter={myCharacterFromState} />;\n\n};\n\nexport const Profile = ({\n  /**\n   * Character is the one we are viewing\n   * it can be our own character or someone else's\n   */\n  character,\n  myCharacter,\n  onSuccessfulLevelUp\n}: {\n  character: Character;\n  myCharacter: CharacterInContractState;\n  onSuccessfulLevelUp?: () => void;\n}) => {\n  /**\n   * myCharacter is our own character\n   * we need it to check if we are viewing our own character\n   */\n\n  const isMyCharacter = character.id === String(myCharacter.id);\n  if (isMyCharacter) {\n    character.name = myCharacter.name;\n    character.attributes = myCharacter.attributes;\n    character.level = myCharacter.level;\n    character.experience = myCharacter.experience;\n    character.lives_count = myCharacter.attributes.livesCount;\n    character.balance = myCharacter.attributes.balance;\n  }\n\n  const { accept, alertVisible, cancel, stats, selectAttr, selectedAttr, isStatsMutating } = useStats(\n    character\n  );\n\n\n\n  /**\n   * \n   */\n\n  if (!myCharacter) {\n    return null;\n  }\n\n\n  return (\n    <div className=\"profile\">\n      {alertVisible && (\n        <Alert\n          title={`Please confirm ${selectedAttr} increase`}\n          buttonsSlot={[\n            {\n              className: \"profile_alert_cancel\",\n              children: \"Cancel\",\n              onClick: cancel,\n            },\n            {\n              className: \"profile_alert_accept\",\n              children: \"Accept\",\n              onClick: () => accept({\n                onSuccess: onSuccessfulLevelUp,\n              }),\n            },\n          ]}\n        />\n      )}\n      <div className=\"profile_char\">\n        <div className=\"profile_data\">\n\n          <CharInfo\n            isMyCharacter={isMyCharacter}\n            name={character.name}\n            shortId={getShortIdString(character.id)}\n            //\n            exp={stats.experience}\n            maxExp={stats.maxExp}\n            level={stats.level}\n          />\n\n          <UploadStrategyWidget />\n\n          <CharStats\n            character={character}\n            isReadyForLevelUp={stats.points > 0}\n            selectAttr={selectAttr}\n            isLoading={isStatsMutating}\n          />\n\n        </div>\n\n        <div className=\"profile_equip\">\n          <StatBar\n            lives={character.lives_count}\n            health={getFullHp(character.attributes.vitality)}\n            energy={getFullEnergy(character.attributes.stamina)}\n          />\n\n          <div className={\"imgWrapper\"}>\n            <img className={\"lock_img1\"} src={LockSvg} alt=\"LockSvg\" />\n            <img className={\"lock_img2\"} src={LockSvg} alt=\"LockSvg\" />\n            <img className={\"lock_img3\"} src={LockSvg} alt=\"LockSvg\" />\n            <img className={\"lock_img4\"} src={LockSvg} alt=\"LockSvg\" />\n            <img className={\"lock_img5\"} src={LockSvg} alt=\"LockSvg\" />\n            <img className={\"char_svg\"} src={CharSvg} alt=\"CharSvg\" />\n            <img className={\"lock_img6\"} src={LockSvg} alt=\"LockSvg\" />\n            <img className={\"lock_img7\"} src={LockSvg} alt=\"LockSvg\" />\n            <img className={\"lock_img8\"} src={LockSvg} alt=\"LockSvg\" />\n            <img className={\"lock_img9\"} src={LockSvg} alt=\"LockSvg\" />\n          </div>\n\n          <div className=\"school_and_gold\">\n            <div className=\"one_half school_of_magic\">\n              <p>School of magic:</p>\n              <SchoolOfMagic className=\"bottom_part\" type={character.magicElement} size={48} />\n            </div>\n            <div className=\"one_half gold\">\n              <p>Gold:</p>\n              <Flex className=\"bottom_part\" gap=\"md\" align=\"center\" style={{ position: 'relative' }} >\n                <Image width={40} src={GoldCoin} />\n                <Text fw=\"600\" c=\"white\" >{character.balance ?? 0}</Text>\n              </Flex>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div >\n  );\n};\n","import { ProgramMetadata } from \"@gear-js/api\";\nimport { useSendMessage } from \"@gear-js/react-hooks\";\nimport { MAX_GAS_LIMIT, XP_NEEDED_FOR_LEVEL_UP_MAP } from \"consts\";\nimport { MINT_METADATA, MINT_PROGRAM_ID } from \"consts\";\nimport { useCallback, useEffect, useMemo, useReducer, useState } from \"react\";\n\nexport const useStats = (character?: Character) => {\n  const [stats, setStats] = useState({\n    ...character?.attributes,\n    points: 0,\n    level: character?.level ?? 0,\n    experience: 0,\n    maxExp: 0,\n  });\n  const [attr, setAttr] = useState(\"\");\n\n  const [alertVisible, toggleVisible] = useReducer((state) => !state, false);\n  const [isStatsMutating, setIsStatsMutating] = useState(false);\n\n  const selectAttr = useCallback((capitalizedAttrName: string) => {\n    setAttr(capitalizedAttrName);\n    toggleVisible();\n  }, []);\n\n  const meta = useMemo(() => ProgramMetadata.from(MINT_METADATA), []);\n  const send = useSendMessage(MINT_PROGRAM_ID, meta, { isMaxGasLimit: true });\n  const accept = useCallback(\n    ({\n      onSuccess,\n      onError,\n    }: {\n      onSuccess?: () => void;\n      onError?: () => void;\n    } = {}) => {\n      if (attr) {\n        setIsStatsMutating(true);\n        toggleVisible();\n        try {\n          send({\n            payload: {\n              LevelUp: {\n                attr,\n              },\n            },\n            gasLimit: MAX_GAS_LIMIT,\n            onSuccess: () => {\n              console.log(\"LevelUp message successfully sent\");\n              onSuccess?.();\n            },\n            onError: () => {\n              console.log(\"Error while sending LevelUp message\");\n              onError?.();\n            },\n          });\n        } catch (e) {\n          console.log(e);\n        } finally {\n          setIsStatsMutating(false);\n        }\n      }\n    },\n    [attr, send]\n  );\n\n  useEffect(() => {\n    if (character?.attributes) {\n      const exp = character.experience;\n      const currentLevel = character.level;\n      const nextLevel = currentLevel + 1;\n\n      /**\n       * Calculating if it's possible to level up\n       */\n      const expNeededForLevelUp = XP_NEEDED_FOR_LEVEL_UP_MAP[nextLevel];\n      const isAvailableLvlUp = exp >= expNeededForLevelUp;\n\n      setStats((prev) => ({\n        ...prev,\n        ...character.attributes,\n        maxExp: XP_NEEDED_FOR_LEVEL_UP_MAP[nextLevel],\n        points: isAvailableLvlUp ? 1 : 0,\n        experience: exp,\n      }));\n    }\n  }, [character]);\n\n  console.log(\"stats\", stats);\n\n  return {\n    selectAttr,\n    stats,\n    alertVisible,\n    accept,\n    cancel: toggleVisible,\n    selectedAttr: attr,\n    isStatsMutating,\n  };\n};\n","import { rem } from '../../core';\nimport type { TitleOrder, TitleSize } from './Title';\n\nconst headings: unknown[] = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\nexport interface GetTitleSizeResult {\n  fontSize: string;\n  fontWeight: string;\n  lineHeight: string;\n}\n\nexport function getTitleSize(order: TitleOrder, size: TitleSize | undefined): GetTitleSizeResult {\n  const titleSize = size !== undefined ? size : `h${order}`;\n\n  if (headings.includes(titleSize)) {\n    return {\n      fontSize: `var(--mantine-${titleSize}-font-size)`,\n      fontWeight: `var(--mantine-${titleSize}-font-weight)`,\n      lineHeight: `var(--mantine-${titleSize}-line-height)`,\n    };\n  }\n\n  return {\n    fontSize: rem(titleSize),\n    fontWeight: `var(--mantine-h${order}-font-weight)`,\n    lineHeight: `var(--mantine-h${order}-line-height)`,\n  };\n}\n","import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { getTitleSize } from './get-title-size';\nimport classes from './Title.module.css';\n\nexport type TitleOrder = 1 | 2 | 3 | 4 | 5 | 6;\nexport type TitleSize = `h${TitleOrder}` | React.CSSProperties['fontSize'];\n\nexport type TitleStylesNames = 'root';\nexport type TitleCssVariables = {\n  root: '--title-fw' | '--title-lh' | '--title-fz' | '--title-line-clamp';\n};\n\nexport interface TitleProps\n  extends BoxProps,\n    StylesApiProps<TitleFactory>,\n    ElementProps<'h1', 'color'> {\n  /** Determines which tag will be used (h1-h6), controls `font-size` style if `size` prop is not set, `1` by default */\n  order?: TitleOrder;\n\n  /** Changes title size, if not set, then size is controlled by `order` prop */\n  size?: TitleSize;\n\n  /** Number of lines after which Text will be truncated */\n  lineClamp?: number;\n}\n\nexport type TitleFactory = Factory<{\n  props: TitleProps;\n  ref: HTMLHeadingElement;\n  stylesNames: TitleStylesNames;\n  vars: TitleCssVariables;\n}>;\n\nconst defaultProps: Partial<TitleProps> = {\n  order: 1,\n};\n\nconst varsResolver = createVarsResolver<TitleFactory>((_, { order, size, lineClamp }) => {\n  const sizeVariables = getTitleSize(order!, size);\n  return {\n    root: {\n      '--title-fw': sizeVariables.fontWeight,\n      '--title-lh': sizeVariables.lineHeight,\n      '--title-fz': sizeVariables.fontSize,\n      '--title-line-clamp': typeof lineClamp === 'number' ? lineClamp.toString() : undefined,\n    },\n  };\n});\n\nexport const Title = factory<TitleFactory>((_props, ref) => {\n  const props = useProps('Title', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    order,\n    vars,\n    size,\n    variant,\n    lineClamp,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<TitleFactory>({\n    name: 'Title',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  if (![1, 2, 3, 4, 5, 6].includes(order!)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...getStyles('root')}\n      component={`h${order!}`}\n      variant={variant}\n      ref={ref}\n      mod={{ order, 'data-line-clamp': typeof lineClamp === 'number' }}\n      size={size}\n      {...others}\n    />\n  );\n});\n\nTitle.classes = classes;\nTitle.displayName = '@mantine/core/Title';\n"],"names":["options","isMaxGasLimit","useSendToArena","meta","useMemo","ProgramMetadata","from","ARENA_METADATA","sendToArenaContract","useSendMessage","ARENA_PROGRAM_ID","useCallback","useSendToMintContract","MINT_METADATA","sendToMintContract","MINT_PROGRAM_ID","Panel","_ref","children","turnOffPadding","paperProps","_jsx","Paper","p","bg","withBorder","radius","style","border","color","TheButton","onClick","buttonProps","Button","size","px","theme","boxShadow","shadows","sm","styles","root","backgroundColor","colors","gray","useMyAccountId","account","useAccount","decodedAddress","CharInfo","isMyCharacter","name","shortId","exp","maxExp","level","boxProps","_jsxs","Box","className","src","alt","LevelBar","maxXp","curXp","_ref2","percent","setPercent","useState","useEffect","setTimeout","maxWidth","CharStats","_character$tier_ratin","character","isReadyForLevelUp","selectAttr","isLoading","flex","display","flexDirection","justifyContent","Divider","mt","Attribute","attributeName","value","tier_rating","my","mb","map","attrName","attributes","undefined","flexProps","Flex","justify","align","gap","Tooltip","multiline","label","position","transitionProps","duration","variant","c","paddingInline","Text","fw","BlackButton","buttonRef","clsx","ref","h","padding","alignItems","borderRadius","transition","Alert","memo","buttonsSlot","title","subTitle","i","restButtonProps","_Fragment","NoCharacterWidget","navigate","useNavigate","Stack","w","Title","order","routes","mintCharacter","UploadStrategyWidget","_getCodeIdsFromLocalS","isVisible","setIsVisible","React","shouldUseVoucher","useShouldUseVoucher","data","setData","codeId","getCodeIdsFromLocalStorage","isUpdating","setIsUpdating","handleUpdateCharacter","async","payload","UpdateCharacter","code_id","gasLimit","MAX_GAS_LIMIT","withVoucher","onSuccess","result","console","log","onError","StrategyInput","setCodeId","onUploadCodeChange","Anchor","href","target","rel","withArrow","closeDelay","pointerEvents","disabled","loading","difference","array1","array2","filter","x","includes","QueriesObserver","_client","WeakMap","_result","_queries","_observers","_options","_combinedResult","_setResult","WeakSet","_combineResult","_findMatchingObservers","_onUpdate","_notify","Subscribable","constructor","client","queries","super","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","this","_classPrivateMethodGet","_setResult2","call","setQueries","onSubscribe","listeners","_classPrivateFieldGet","forEach","observer","subscribe","_onUpdate2","onUnsubscribe","destroy","Set","notifyOptions","notifyManager","batch","prevObservers","newObserverMatches","_findMatchingObservers2","match","setOptions","defaultedQueryOptions","newObservers","newResult","getCurrentResult","hasIndexChange","some","index","length","hasListeners","_notify2","getQueries","getCurrentQuery","getObservers","getOptimisticResult","matches","r","_combineResult2","observerResult","notifyOnChangeProps","trackResult","input","_classPrivateFieldGet2","combine","replaceEqualDeep","prevObserversMap","Map","queryHash","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","has","getObserver","currentObserver","find","o","QueryObserver","newOrReusedObservers","concat","sort","sortMatchesByOrderOfQueries","a","b","indexOf","array","copy","slice","replaceAt","listener","InfiniteQueryObserver","bindMethods","fetchNextPage","bind","fetchPreviousPage","behavior","infiniteQueryBehavior","fetch","fetchMore","direction","createResult","query","_state$fetchMeta","_state$fetchMeta2","state","isFetching","isRefetching","isFetchingNextPage","fetchMeta","isFetchingPreviousPage","hasNextPage","hasPreviousPage","MutationObserver","_currentResult","_currentMutation","_mutateOptions","_updateResult","_updateResult2","mutate","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","mutationKey","hashKey","_classPrivateFieldGet3","removeObserver","onMutationUpdate","action","_classPrivateFieldGet4","variables","_classPrivateFieldGet5","build","addObserver","execute","_classPrivateFieldGet6","_classPrivateFieldGet7","getDefaultState","isPending","status","isSuccess","isError","isIdle","context","_classPrivateFieldGet8","_classPrivateFieldGet9","_classPrivateFieldGet10","_classPrivateFieldGet11","onSettled","_classPrivateFieldGet12","_classPrivateFieldGet13","_classPrivateFieldGet14","_classPrivateFieldGet15","error","dehydrateMutation","dehydrateQuery","queryKey","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","dehydrate","_options$shouldDehydr","_options$shouldDehydr2","arguments","filterMutation","shouldDehydrateMutation","mutations","getAll","filterQuery","shouldDehydrateQuery","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","dehydratedMutation","_options$defaultOptio","defaultOptions","_options$defaultOptio2","dataUpdatedAt","fetchStatus","_ignored","dehydratedQueryState","setState","useQueries","queryClient","useQueryClient","isRestoring","useIsRestoring","errorResetBoundary","useQueryErrorResetBoundary","defaultedQueries","opts","_optimisticResults","ensureStaleTime","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","optimisticResult","getCombinedResult","onStoreChange","batchCalls","suspensePromises","shouldSuspend","queryObserver","fetchOptimistic","willFetch","Promise","all","observerQueries","firstSingleResultWhichShouldThrow","_defaultedQueries$ind","_defaultedQueries$ind2","getHasError","throwOnError","useSuspenseQuery","useBaseQuery","enabled","suspense","defaultThrowOnError","useSuspenseInfiniteQuery","useSuspenseQueries","queryOptions","infiniteQueryOptions","HydrationBoundary","hydrationQueue","setHydrationQueue","optionsRef","current","newQueries","existingQueries","dehydratedQuery","existingQuery","hydrationIsNewer","queryAlreadyQueued","push","prev","useIsFetching","filters","useIsMutating","useMutationState","getResult","findAll","select","nextResult","schedule","useMutation","mutateOptions","catch","noop","shouldThrowError","mutateAsync","useInfiniteQuery","ReactQuery","TanstackReactQuery","isV5","getKey","createBaseQuery","useRQHook","overrideOptions","fetcher","queryKeyHashFn","getPreviousPageParam","getNextPageParam","initialPageParam","getQueryOptions","fetcherFn","queryFn","Object","assign","withMiddleware","hook","uses","getDefaultOptions","reduce","u1","o1","use","u2","o2","reduceRight","next","composedHook","useBaseHook","getOptions","getFetchOptions","useMintState","useQueryNext","api","useApi","_context$meta","programId","metadata","mintMetadata","mintState","programState","read","toJSON","useQuery","MyProfile","myCharacter","refetch","refetchMyCharacterQuery","useMyCharacter","myCharacterFromState","refetchMyCharacterFromStateQuery","useMyCharacterFromContractState","accountId","_state$characters","_state$characters2","characters","Profile","onSuccessfulLevelUp","_character$balance","id","String","experience","lives_count","livesCount","balance","accept","alertVisible","cancel","stats","selectedAttr","isStatsMutating","_character$level","setStats","points","attr","setAttr","toggleVisible","useReducer","setIsStatsMutating","capitalizedAttrName","send","LevelUp","e","nextLevel","expNeededForLevelUp","XP_NEEDED_FOR_LEVEL_UP_MAP","isAvailableLvlUp","useStats","getShortIdString","StatBar","lives","health","getFullHp","vitality","energy","getFullEnergy","stamina","LockSvg","CharSvg","SchoolOfMagic","magicElement","Image","width","headings","defaultProps","varsResolver","createVarsResolver","_","lineClamp","sizeVariables","titleSize","fontSize","fontWeight","lineHeight","rem","getTitleSize","toString","factory","_props","props","useProps","classNames","unstyled","vars","others","getStyles","useStyles","classes","component","mod","displayName"],"sourceRoot":""}