{"version":3,"file":"static/js/684.b8156822.chunk.js","mappings":"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","sources":["app/api/characters.ts","components/Button/Button.tsx","pages/MintCharacter/hooks/useWasmMetadata.ts","pages/StartFight/hooks/useOnSubmit.ts","pages/StartFight/components/StartFightView.tsx","pages/StartFight/StartFight.tsx"],"sourcesContent":["import { useAccount } from \"@gear-js/react-hooks\";\nimport { graphql } from \"gql/gql\";\nimport {\n  getGraphQLPrimaryKey,\n  useGraphQL,\n} from \"app/providers/ReactQuery/useGraphQL\";\nimport { UseQueryResult } from \"@tanstack/react-query\";\nimport { queryClient } from \"app/providers/ReactQuery\";\n\nconst allCharactersQueryDocument = graphql(/* GraphQL */ `\n  query AllCharacters {\n    characters {\n      id\n      level\n      name\n      owner\n      experience\n      attributes\n    }\n  }\n`);\n\nexport const useAllCharacters = () => useGraphQL(allCharactersQueryDocument);\n\nconst charactersByOwnerQueryDocument = graphql(/* GraphQL */ `\n  query CharactersByOwner($owner_eq: String!) {\n    characters(where: { owner_eq: $owner_eq }) {\n      id\n      level\n      name\n      owner\n      experience\n      attributes\n    }\n  }\n`);\n\nexport const resetUseMyCharacrersQuery = () => {\n  const primaryKey = getGraphQLPrimaryKey(charactersByOwnerQueryDocument);\n\n  queryClient.invalidateQueries({ queryKey: [primaryKey] });\n};\n\nexport const useMyCharacters = ({ owner_eq }: { owner_eq: string }) => {\n  return useGraphQL(charactersByOwnerQueryDocument, {\n    owner_eq,\n  });\n};\n\nexport const useMyCharacter = () => {\n  const { account } = useAccount();\n  const queryResult = useMyCharacters({\n    owner_eq: account?.decodedAddress ?? \"\",\n  });\n\n  const myCharacters = queryResult.data;\n\n  return {\n    ...queryResult,\n    data: myCharacters?.characters[\n      myCharacters?.characters.length - 1\n    ] as Character,\n  };\n};\n\nconst characterByIdQueryDocument = graphql(/* GraphQL */ `\n  query CharacterById($character_id: String!) {\n    characterById(id: $character_id) {\n      attributes\n      experience\n      id\n      level\n      name\n      owner\n    }\n  }\n`);\n\nexport const useCharacterById = ({ id }: { id: string }) => {\n  return useGraphQL(characterByIdQueryDocument, {\n    character_id: id,\n  }) as UseQueryResult<Character>;\n};\n","import React, {\n  ButtonHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  ReactNode,\n} from \"react\";\nimport \"./styles.scss\";\nimport clsx from \"clsx\";\n\nexport type ButtonProps = {\n  onClick?: VoidFunction;\n  children: ReactNode;\n  disabled?: boolean;\n  value?: string;\n  buttonProps?: DetailedHTMLProps<\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n  className?: string;\n};\n\nexport const Button: FC<ButtonProps> = ({\n  onClick,\n  children,\n  disabled,\n  buttonProps,\n  className,\n}) => {\n  const classes = clsx(\"button\", className, { disabled });\n  return (\n    <button\n      {...buttonProps}\n      className={classes}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {children}\n    </button>\n  );\n};\n","import { useAlert } from \"@gear-js/react-hooks\";\nimport { useEffect, useState } from \"react\";\n\nexport const useWasmMetadata = (source: RequestInfo | URL) => {\n  const alert = useAlert();\n  const [data, setData] = useState<Buffer>();\n\n  useEffect(() => {\n    if (source) {\n      fetch(source)\n        .then((response) => response.arrayBuffer())\n        .then((array) => Buffer.from(array))\n        .then((buffer) => setData(buffer))\n        .catch(({ message }: Error) => alert.error(`Fetch error: ${message}`));\n    }\n  }, [alert, source]);\n\n  return { buffer: data };\n};\n","import { useWasmMetadata } from \"./../../MintCharacter/hooks/useWasmMetadata\";\nimport { useCallback, useMemo } from \"react\";\nimport { ARENA_PROGRAM_ID, ARENA_METADATA } from \"consts\";\nimport {\n  useAccount,\n  useReadWasmState,\n  useSendMessage,\n} from \"@gear-js/react-hooks\";\nimport { ProgramMetadata } from \"@gear-js/api\";\nimport arenaMetaWasm from \"../../../assets/arena.opt.wasm\";\nimport { MAX_GAS_LIMIT } from \"consts\";\n\nexport const useOnRegisterForBattle = () => {\n  const { account } = useAccount();\n\n  const { buffer } = useWasmMetadata(arenaMetaWasm);\n\n  const meta = useMemo(() => ProgramMetadata.from(ARENA_METADATA), []);\n  const send = useSendMessage(ARENA_PROGRAM_ID, meta, { isMaxGasLimit: true });\n\n  const arenaMetaWasmData: MetaWasmDataType = useMemo(\n    () => ({\n      programId: ARENA_PROGRAM_ID,\n      programMetadata: meta,\n      wasm: buffer,\n      functionName: \"registered\",\n      argument: account?.decodedAddress,\n    }),\n    [account?.decodedAddress, meta, buffer]\n  );\n\n  const registered = useReadWasmState<\n    Array<{\n      attributes: {\n        strength: string;\n        agility: string;\n        vitality: string;\n        stamina: string;\n      };\n      energy: string;\n      hp: string;\n      id: string;\n      name: string;\n      owner: string;\n      position: string;\n    }>\n  >(arenaMetaWasmData).state;\n  console.log(`registered`, registered);\n  return useCallback(\n    async ({ lobbyId }: { lobbyId: string }) => {\n      return new Promise(async (resolve, reject) => {\n        send({\n          payload: {\n            Register: {\n              owner_id: account?.decodedAddress,\n              lobby_id: lobbyId,\n            },\n          },\n          gasLimit: MAX_GAS_LIMIT,\n          onSuccess: () => {\n            console.log('\"Register\" message successfully sent');\n            resolve(undefined);\n          },\n          onError: () => {\n            console.log(\"error\");\n            reject();\n          },\n        });\n      });\n    },\n    [account?.decodedAddress, send]\n  );\n};\n","import \"./styles.scss\";\nimport ArenaPng from \"assets/images/arena.png\";\nimport { FC, memo } from \"react\";\n\nimport { Button } from \"components/Button\";\n\nexport const colourOptions = [\n  { value: \"ocean\", label: \"Ocean\", color: \"#00B8D9\", isFixed: true },\n];\n\ntype StartFightViewProps = {\n  setUser: React.Dispatch<any>;\n  user: any;\n  name: string;\n  handleSubmit: VoidFunction;\n};\n\nexport const StartFightView: FC<StartFightViewProps> = memo(\n  ({ setUser, user, name, handleSubmit }) => {\n    return (\n      <div className=\"arena\">\n        <div className=\"arena_modal\">\n          <img className=\"arena_img\" src={ArenaPng} />\n          <p className=\"arena_title\">Enter the Arena</p>\n          {/* <div className=\"arena_select_wrapper\">\n            <p>Select your character</p>\n            <Select\n              className=\"arena_select\"\n              onClick={(user) => setUser(user)}\n              //@ts-ignore\n              icon={<img className=\"arena_user_icon\" src={userIcon} />}\n              //@ts-ignore\n              components={{ Control: SelectControl, Option: CustomOption }}\n              isSearchable\n              name=\"user\"\n              options={[\n                {\n                  value: name || localStorage.getItem(\"name\"),\n                  label: name || localStorage.getItem(\"name\"),\n                },\n              ]}\n              selectedUser={user}\n            />\n          </div> */}\n          <Button onClick={handleSubmit} disabled={!user}>\n            Start fight\n          </Button>\n        </div>\n      </div>\n    );\n  }\n);\n","import { memo, useState, useMemo, useEffect } from \"react\";\nimport { ProgramMetadata } from \"@gear-js/api\";\nimport { useOnRegisterForBattle } from \"./hooks/useOnSubmit\";\nimport { StartFightView } from \"./components/StartFightView\";\nimport { useAccount, useAlert, useReadWasmState } from \"@gear-js/react-hooks\";\nimport stateMetaWasm from \"../../assets/mint.opt.wasm\";\nimport { useWasmMetadata } from \"../MintCharacter/hooks/useWasmMetadata\";\nimport { ARENA_PROGRAM_ID, ARENA_METADATA, MINT_METADATA, MINT_PROGRAM_ID } from \"consts\";\nimport arenaMetaWasm from \"../../assets/arena.opt.wasm\";\nimport { useParams } from \"react-router-dom\";\nimport { useMyCharacter } from \"app/api/characters\";\n\nexport const colourOptions = [\n  { value: \"ocean\", label: \"Ocean\", color: \"#00B8D9\", isFixed: true },\n];\n\nexport const StartFight = memo(() => {\n  const alert = useAlert();\n  const { lobbyId } = useParams<{ lobbyId: string | undefined; }>();\n\n  /**\n   * Get user\n   */\n  const [user, setUser] = useState<typeof character>();\n  const { data: character } = useMyCharacter();\n  useEffect(() => {\n    if (character) {\n      setUser(character);\n    }\n\n  }, [character]);\n\n  const { account } = useAccount();\n  const { buffer } = useWasmMetadata(stateMetaWasm);\n  const { buffer: arenaMetaBuffer } = useWasmMetadata(arenaMetaWasm);\n\n  const meta = useMemo(() => ProgramMetadata.from(MINT_METADATA), []);\n  const arenaMeta = useMemo(() => ProgramMetadata.from(ARENA_METADATA), []);\n\n  const metaWasmData: MetaWasmDataType = useMemo(\n    () => ({\n      programId: MINT_PROGRAM_ID,\n      programMetadata: meta,\n      wasm: buffer,\n      functionName: \"character_info\",\n      argument: account?.decodedAddress,\n    }),\n    [account?.decodedAddress, meta, buffer]\n  );\n\n  const arenaMetaWasmData: MetaWasmDataType = useMemo(\n    () => ({\n      programId: ARENA_PROGRAM_ID,\n      programMetadata: arenaMeta,\n      wasm: arenaMetaBuffer,\n      functionName: \"registered\",\n      argument: account?.decodedAddress,\n    }),\n    [account?.decodedAddress, arenaMeta, arenaMetaBuffer]\n  );\n\n  const charInfo = useReadWasmState<{\n    id: string;\n    attributes: {\n      strength: string;\n      agility: string;\n      vitality: string;\n      stamina: string;\n    };\n    name: string;\n  }>(metaWasmData);\n\n  const registerForBattle = useOnRegisterForBattle();\n  const handleSubmit = () => {\n\n    if (!lobbyId) {\n      const message = \"lobbyId is not defined\";\n      console.error(message);\n      alert.error(message);\n      return;\n    }\n    console.log('registerForBattle called with lobbyId: ', lobbyId);\n    registerForBattle({ lobbyId });\n  };\n\n  return (\n    <StartFightView\n      name={charInfo?.state?.name ?? \"\"}\n      setUser={setUser}\n      user={user}\n      handleSubmit={handleSubmit}\n    />\n  );\n});\n"],"names":["graphql","charactersByOwnerQueryDocument","resetUseMyCharacrersQuery","primaryKey","getGraphQLPrimaryKey","queryClient","invalidateQueries","queryKey","useMyCharacters","_ref","owner_eq","useGraphQL","useMyCharacter","_account$decodedAddre","account","useAccount","queryResult","decodedAddress","myCharacters","data","characters","length","Button","onClick","children","disabled","buttonProps","className","classes","clsx","_jsx","useWasmMetadata","source","alert","useAlert","setData","useState","useEffect","fetch","then","response","arrayBuffer","array","Buffer","from","buffer","catch","message","error","useOnRegisterForBattle","arenaMetaWasm","meta","useMemo","ProgramMetadata","ARENA_METADATA","send","useSendMessage","ARENA_PROGRAM_ID","isMaxGasLimit","arenaMetaWasmData","programId","programMetadata","wasm","functionName","argument","registered","useReadWasmState","state","console","log","useCallback","async","lobbyId","Promise","resolve","reject","payload","Register","owner_id","lobby_id","gasLimit","MAX_GAS_LIMIT","onSuccess","undefined","onError","StartFightView","memo","setUser","user","name","handleSubmit","_jsxs","src","ArenaPng","colourOptions","value","label","color","isFixed","StartFight","_charInfo$state$name","_charInfo$state","useParams","character","stateMetaWasm","arenaMetaBuffer","MINT_METADATA","arenaMeta","metaWasmData","MINT_PROGRAM_ID","charInfo","registerForBattle"],"sourceRoot":""}